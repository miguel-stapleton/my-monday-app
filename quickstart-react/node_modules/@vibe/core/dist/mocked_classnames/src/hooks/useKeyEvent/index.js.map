{"version":3,"file":"index.js","sources":["../../../../../src/hooks/useKeyEvent/index.ts"],"sourcesContent":["import { RefObject, useCallback, useRef } from \"react\";\nimport useEventListener from \"../useEventListener\";\nimport { GenericEventCallback } from \"../../types/events\";\nimport { isClient } from \"../../utils/ssr-utils\";\n\nconst CTRL_OR_META = \"ctrlOrMetaKey\";\n\nenum Modifier {\n  ALT = \"altKey\",\n  META = \"metaKey\",\n  CTRL = \"ctrlKey\",\n  SHIFT = \"shiftKey\",\n  CTRL_OR_META = \"ctrlOrMetaKey\"\n}\n\nconst checkModifierInEvent = (event: KeyboardEvent, modifier: Modifier) => {\n  if (modifier === Modifier.CTRL_OR_META) {\n    return event.ctrlKey || event.metaKey;\n  }\n\n  return event[modifier];\n};\nconst checkWithoutModifierInEvent = (event: KeyboardEvent) => {\n  return !Object.values(useKeyEvent.modifiers).some((m: Modifier) => {\n    if (m !== CTRL_OR_META) {\n      return !!event[m];\n    }\n  });\n};\n\nexport interface UseKeyEventArgs {\n  /**\n   * The list of keys that should trigger the event.\n   */\n  keys: KeyboardEvent[\"key\"][];\n  // TODO: [breaking] change to keyboard event\n  /**\n   * Callback fired when a specified key is pressed.\n   */\n  callback: GenericEventCallback;\n  /**\n   * Modifier key that must be pressed along with the specified key.\n   */\n  modifier?: Modifier;\n  /**\n   * The keyboard event type to listen for (e.g., \"keydown\", \"keyup\").\n   */\n  keyEventName?: string;\n  /**\n   * If true, ensures no modifier keys are pressed when handling the event.\n   */\n  withoutAnyModifier?: boolean;\n  /**\n   * The element reference to listen for key events on.\n   */\n  ref?: RefObject<HTMLElement | Document>;\n  /**\n   * If true, prevents fallback to listening on the document when no ref is provided.\n   */\n  ignoreDocumentFallback?: boolean;\n  /**\n   * If true, uses capture phase instead of bubbling phase for event listening.\n   */\n  capture?: boolean;\n  /**\n   * If true, calls `preventDefault` on the key event.\n   */\n  preventDefault?: boolean;\n  /**\n   * If true, calls `stopPropagation` on the key event.\n   */\n  stopPropagation?: boolean;\n}\n\nexport default function useKeyEvent({\n  keys = [],\n  callback,\n  modifier,\n  withoutAnyModifier,\n  ref,\n  ignoreDocumentFallback = false,\n  capture = false,\n  preventDefault = false,\n  stopPropagation = false,\n  keyEventName = \"keydown\" // need keydown and not keyup to prevent scrolling with prevent default, for example during menu keyboard navigation\n}: UseKeyEventArgs) {\n  const documentRef = useRef(isClient() ? document.body : null);\n  const onKeyUpPress = useCallback(\n    (event: KeyboardEvent) => {\n      const { key } = event;\n      if (!keys.includes(key)) {\n        return;\n      }\n      if (modifier && !checkModifierInEvent(event, modifier)) {\n        return;\n      }\n      if (withoutAnyModifier && !checkWithoutModifierInEvent(event)) {\n        return;\n      }\n\n      if (preventDefault) {\n        event.preventDefault();\n      }\n\n      if (stopPropagation) {\n        event.stopPropagation();\n      }\n\n      callback(event);\n    },\n    [keys, modifier, withoutAnyModifier, preventDefault, stopPropagation, callback]\n  );\n\n  let listenerRef;\n\n  if (ref) {\n    listenerRef = ref;\n  } else if (ignoreDocumentFallback) {\n    listenerRef = null;\n  } else {\n    listenerRef = documentRef;\n  }\n\n  useEventListener({\n    eventName: keyEventName,\n    callback: onKeyUpPress,\n    ref: listenerRef,\n    capture\n  });\n}\n\nuseKeyEvent.modifiers = Modifier;\n"],"names":["Modifier","useKeyEvent","_ref","_ref$keys","keys","callback","modifier","withoutAnyModifier","ref","_ref$ignoreDocumentFa","ignoreDocumentFallback","_ref$capture","capture","_ref$preventDefault","preventDefault","_ref$stopPropagation","stopPropagation","_ref$keyEventName","keyEventName","documentRef","useRef","isClient","document","body","onKeyUpPress","useCallback","event","includes","key","CTRL_OR_META","ctrlKey","metaKey","checkModifierInEvent","Object","values","modifiers","some","m","checkWithoutModifierInEvent","useEventListener","eventName"],"mappings":"gJAKA,IAEKA,GAAL,SAAKA,GACHA,EAAA,IAAA,SACAA,EAAA,KAAA,UACAA,EAAA,KAAA,UACAA,EAAA,MAAA,WACAA,EAAA,aAAA,eACD,CAND,CAAKA,IAAAA,EAMJ,CAAA,IA6Da,SAAUC,EAAWC,GAWjB,IAAAC,EAAAD,EAVhBE,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EACTE,EAAQH,EAARG,SACAC,EAAQJ,EAARI,SACAC,EAAkBL,EAAlBK,mBACAC,EAAGN,EAAHM,IAAGC,EAAAP,EACHQ,uBAAAA,OAAyB,IAAHD,GAAQA,EAAAE,EAAAT,EAC9BU,QAAAA,OAAU,IAAHD,GAAQA,EAAAE,EAAAX,EACfY,eAAAA,OAAiB,IAAHD,GAAQA,EAAAE,EAAAb,EACtBc,gBAAAA,OAAkB,IAAHD,GAAQA,EAAAE,EAAAf,EACvBgB,aAAAA,OAAe,IAAHD,EAAG,UAASA,EAElBE,EAAcC,EAAOC,IAAaC,SAASC,KAAO,MAClDC,EAAeC,GACnB,SAACC,GAEMtB,EAAKuB,SADMD,EAARE,OAIJtB,IA9EmB,SAACoB,EAAsBpB,GAClD,OAAIA,IAAaN,EAAS6B,aACjBH,EAAMI,SAAWJ,EAAMK,QAGzBL,EAAMpB,EACf,CAwEuB0B,CAAqBN,EAAOpB,IAGzCC,IA1E0B,SAACmB,GACnC,OAAQO,OAAOC,OAAOjC,EAAYkC,WAAWC,MAAK,SAACC,GACjD,GAnBiB,kBAmBbA,EACF,QAASX,EAAMW,EAEnB,GACF,CAoEiCC,CAA4BZ,KAInDZ,GACFY,EAAMZ,iBAGJE,GACFU,EAAMV,kBAGRX,EAASqB,IACX,GACA,CAACtB,EAAME,EAAUC,EAAoBO,EAAgBE,EAAiBX,IAaxEkC,EAAiB,CACfC,UAAWtB,EACXb,SAAUmB,EACVhB,IAXEA,IAEOE,EACK,KAEAS,GAOdP,QAAAA,GAEJ,CAEAX,EAAYkC,UAAYnC"}