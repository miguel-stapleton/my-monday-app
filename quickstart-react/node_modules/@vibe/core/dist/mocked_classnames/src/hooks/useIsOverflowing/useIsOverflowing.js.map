{"version":3,"file":"useIsOverflowing.js","sources":["../../../../../src/hooks/useIsOverflowing/useIsOverflowing.ts"],"sourcesContent":["import { RefObject, useCallback, useState } from \"react\";\nimport useResizeObserver from \"../useResizeObserver\";\n\nfunction checkOverflow(element: HTMLElement, ignoreHeightOverflow: boolean, heightTolerance = 0, widthTolerance = 0) {\n  if (!element) {\n    return false;\n  }\n  const isOverflowingWidth = element.clientWidth + widthTolerance < element.scrollWidth;\n  const isOverflowingHeight = !ignoreHeightOverflow && element.clientHeight + heightTolerance < element.scrollHeight;\n  return isOverflowingWidth || isOverflowingHeight;\n}\n\nexport default function useIsOverflowing({\n  ref,\n  ignoreHeightOverflow = false,\n  tolerance: heightTolerance,\n  widthTolerance\n}: {\n  /**\n   * The ref of the element to check for overflow.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether to ignore height overflow.\n   */\n  ignoreHeightOverflow?: boolean;\n  /**\n   * The tolerance value to consider the element as overflowing (height overflow).\n   */\n  tolerance?: number;\n  /**\n   * The tolerance value to consider the element as overflowing (width overflow).\n   */\n  widthTolerance?: number;\n}) {\n  const [isOverflowing, setIsOverflowing] = useState<boolean>(() =>\n    checkOverflow(ref?.current, ignoreHeightOverflow, heightTolerance, widthTolerance)\n  );\n  const callback = useCallback(() => {\n    const element = ref?.current;\n    if (!element) return;\n\n    const newOverflowState = checkOverflow(element, ignoreHeightOverflow, heightTolerance, widthTolerance);\n    setIsOverflowing(prevState => (prevState !== newOverflowState ? newOverflowState : prevState));\n  }, [ignoreHeightOverflow, ref, heightTolerance, widthTolerance]);\n\n  useResizeObserver({\n    ref,\n    callback,\n    debounceTime: 0\n  });\n\n  return isOverflowing;\n}\n"],"names":["checkOverflow","element","ignoreHeightOverflow","scrollWidth","clientWidth","arguments","length","undefined","scrollHeight","clientHeight","useIsOverflowing","_ref","ref","_ref$ignoreHeightOver","heightTolerance","tolerance","widthTolerance","_useState","useState","current","_useState2","_slicedToArray","isOverflowing","setIsOverflowing","callback","useCallback","newOverflowState","prevState","useResizeObserver","debounceTime"],"mappings":"wKAGA,SAASA,EAAcC,EAAsBC,GAC3C,QAAKD,IAG6DA,EAAQE,YAA/CF,EAAQG,aAJ0EC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAKnFH,GAAiED,EAAQO,aAAjDP,EAAQQ,cAL4BJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAO9F,CAEc,SAAUK,EAAgBC,GAsBvC,IArBCC,EAAGD,EAAHC,IAAGC,EAAAF,EACHT,qBAAAA,OAAuB,IAAHW,GAAQA,EACjBC,EAAeH,EAA1BI,UACAC,EAAcL,EAAdK,eAmBAC,EAA0CC,GAAkB,WAAA,OAC1DlB,EAAcY,aAAA,EAAAA,EAAKO,QAASjB,EAAsBY,EAAiBE,MACpEI,EAAAC,EAAAJ,EAAA,GAFMK,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAGhCI,EAAWC,GAAY,WAC3B,IAAMxB,EAAUW,aAAA,EAAAA,EAAKO,QACrB,GAAKlB,EAAL,CAEA,IAAMyB,EAAmB1B,EAAcC,EAASC,EAAsBY,EAAiBE,GACvFO,GAAiB,SAAAI,GAAS,OAAKA,IAAcD,EAAmBA,EAAmBC,CAAS,GAH9E,CAIf,GAAE,CAACzB,EAAsBU,EAAKE,EAAiBE,IAQhD,OANAY,EAAkB,CAChBhB,IAAAA,EACAY,SAAAA,EACAK,aAAc,IAGTP,CACT"}