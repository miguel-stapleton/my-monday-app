{"version":3,"file":"MenuButton.js","sources":["../../../../../src/components/MenuButton/MenuButton.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { camelCase } from \"lodash-es\";\nimport { isForwardRef } from \"react-is\";\nimport Dialog, { DialogEvent } from \"../Dialog/Dialog\";\nimport DialogContentContainer from \"../DialogContentContainer/DialogContentContainer\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport useIsomorphicLayoutEffect from \"../../hooks/ssr/useIsomorphicLayoutEffect\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { BUTTON_ICON_SIZE, SMALL_BUTTON_ICON_SIZE } from \"../Button/ButtonConstants\";\nimport { ElementContent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport {\n  MenuButtonComponentPosition as MenuButtonComponentPositionEnum,\n  MenuButtonSize as MenuButtonSizeEnum\n} from \"./MenuButtonConstants\";\nimport {\n  DialogPosition as DialogPositionEnum,\n  HideShowEvent as DialogTriggerEventEnum,\n  DialogSize as DialogSizeEnum\n} from \"../Dialog/DialogConstants\";\nimport { MenuButtonComponentPosition, MenuButtonSize } from \"./MenuButton.types\";\nimport { DialogOffset, DialogPosition, DialogSize, DialogTriggerEvent } from \"../Dialog/Dialog.types\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { Menu } from \"@vibe/icons\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { MenuChild } from \"../Menu/Menu/MenuConstants\";\nimport styles from \"./MenuButton.module.scss\";\nimport { TooltipPositions } from \"../Tooltip\";\nimport { ComponentVibeId } from \"../../tests/constants\";\n\nconst MOVE_BY = { main: 8, secondary: 0 };\nconst CLOSE_KEYS: DialogTriggerEventEnum[] = [Dialog.hideShowTriggers.ESCAPE_KEY, Dialog.hideShowTriggers.TAB_KEY];\n\nexport interface MenuButtonProps extends VibeComponentProps {\n  /**\n   * If true, the button is in an active state.\n   */\n  active?: boolean;\n  /**\n   * Class name applied to the button when the dialog is open.\n   */\n  openDialogComponentClassName?: string;\n  /**\n   * The component used as the button icon.\n   */\n  component?: (() => JSX.Element) | React.ElementType;\n  /**\n   * The size of the button.\n   */\n  size?: MenuButtonSize;\n  /**\n   * If true, the menu is open.\n   */\n  open?: boolean;\n  /**\n   * Callback fired when the button is clicked.\n   */\n  onClick?: (event: React.MouseEvent) => void;\n  /**\n   * The z-index of the menu.\n   */\n  zIndex?: number;\n  /**\n   * The label of the button for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * Class name applied to the menu dialog wrapper.\n   */\n  dialogClassName?: string;\n  /**\n   * The offset of the menu relative to the button.\n   */\n  dialogOffset?: DialogOffset;\n  /**\n   * The padding size inside the menu dialog.\n   */\n  dialogPaddingSize?: DialogSize;\n  /**\n   * The position of the menu dialog relative to the button.\n   */\n  dialogPosition?: DialogPosition;\n  /**\n   * Classes that prevent showing the dialog when present.\n   */\n  dialogShowTriggerIgnoreClass?: string | Array<string>;\n  /**\n   * Classes that prevent hiding the dialog when present.\n   */\n  dialogHideTriggerIgnoreClass?: string | Array<string>;\n  /**\n   * The container selector in which to append the dialog.\n   */\n  dialogContainerSelector?: string;\n  /**\n   * The starting edge alignment of the menu.\n   */\n  startingEdge?: string;\n  /**\n   * Callback fired when the menu is shown.\n   */\n  onMenuShow?: () => void;\n  /**\n   * Callback fired when the menu is hidden.\n   */\n  onMenuHide?: () => void;\n  /**\n   * The text displayed inside the button.\n   */\n  text?: string;\n  /**\n   * If true, the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The tooltip content displayed when hovering over the button.\n   */\n  tooltipContent?: string;\n  /**\n   * If true, removes the tab key from the hide trigger.\n   */\n  removeTabCloseTrigger?: boolean;\n  /**\n   * The triggers that cause the tooltip to show or hide.\n   */\n  tooltipTriggers?: DialogTriggerEvent | DialogTriggerEvent[];\n  /**\n   * The position of the tooltip.\n   */\n  tooltipPosition?: TooltipPositions;\n  /**\n   * Class name applied to the tooltip reference wrapper.\n   */\n  tooltipReferenceClassName?: string;\n  /**\n   * Additional props for customizing the tooltip.\n   */\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * If true, hides the menu and tooltip when the button is not visible.\n   */\n  hideWhenReferenceHidden?: boolean;\n  /**\n   * The content inside the menu button.\n   */\n  children?: ElementContent;\n  /**\n   * The position of the component relative to the text.\n   */\n  componentPosition?: MenuButtonComponentPosition;\n  /**\n   * The element used as the trigger for the menu.\n   */\n  triggerElement?: React.ElementType;\n  /**\n   * If true, closes the menu when a menu item is clicked.\n   */\n  closeMenuOnItemClick?: boolean;\n  /**\n   * If true, the tooltip appears only when hovering over the trigger element, not the menu dialog.\n   */\n  showTooltipOnlyOnTriggerElement?: boolean;\n  /**\n   * If true, closes the menu when clicking inside the dialog.\n   */\n  closeDialogOnContentClick?: boolean;\n  /**\n   * The ARIA control of the menu button for accessibility.\n   */\n  ariaControls?: string;\n}\n\nconst MenuButton = forwardRef(\n  (\n    {\n      id,\n      className,\n      openDialogComponentClassName,\n      children,\n      component = Menu,\n      componentPosition = \"start\",\n      size = \"small\",\n      open = false,\n      onClick = NOOP,\n      zIndex = null,\n      ariaLabel = \"Menu\",\n      closeMenuOnItemClick,\n      dialogOffset = MOVE_BY,\n      dialogPosition = Dialog.positions.BOTTOM_START,\n      dialogClassName,\n      dialogPaddingSize = DialogContentContainer.sizes.SMALL,\n      dialogShowTriggerIgnoreClass,\n      dialogHideTriggerIgnoreClass,\n      onMenuHide = NOOP,\n      onMenuShow = NOOP,\n      disabled = false,\n      text,\n      tooltipContent,\n      tooltipProps,\n      tooltipTriggers = [\"mouseleave\"],\n      tooltipPosition = \"right\",\n      startingEdge = \"bottom\",\n      removeTabCloseTrigger = false,\n      tooltipReferenceClassName,\n      hideWhenReferenceHidden = true,\n      dialogContainerSelector,\n      active,\n      triggerElement: TriggerElement = \"button\",\n      showTooltipOnlyOnTriggerElement,\n      \"data-testid\": dataTestId,\n      closeDialogOnContentClick = false,\n      ariaControls\n    }: MenuButtonProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [isOpen, setIsOpen] = useState(open);\n    const isActive = active ?? isOpen;\n\n    const handleMenuClose = useCallback(\n      (focusOnMenuButtonAfterClose: boolean) => {\n        onMenuHide();\n        setIsOpen(false);\n        const button = componentRef.current;\n        if (!button || !focusOnMenuButtonAfterClose) {\n          return;\n        }\n        window.requestAnimationFrame(() => {\n          button.focus();\n        });\n      },\n      [onMenuHide]\n    );\n\n    const onMenuDidClose = useCallback(\n      (event: React.KeyboardEvent) => {\n        // TODO: check the functionality of the isEscapeKey since the event is not an actual KeyboardEVent but an object with propagate property only\n        const isCloseKey = CLOSE_KEYS.includes(event.key as DialogTriggerEventEnum);\n        if (isCloseKey || closeMenuOnItemClick) {\n          // @ts-ignore\n          if (event.propagate) {\n            handleMenuClose(isCloseKey);\n          }\n        }\n      },\n      [closeMenuOnItemClick, handleMenuClose]\n    );\n\n    const onDialogDidHide = useCallback(\n      (event: DialogEvent, hideEvent: string) => {\n        handleMenuClose(isOpen && CLOSE_KEYS.includes(hideEvent as DialogTriggerEventEnum));\n      },\n      [handleMenuClose, isOpen]\n    );\n\n    const onDialogDidShow = useCallback(() => {\n      setIsOpen(true);\n      onMenuShow();\n    }, [setIsOpen, onMenuShow]);\n\n    const [clonedChildren, hideTrigger] = useMemo(() => {\n      const triggers = new Set([\n        Dialog.hideShowTriggers.CLICK_OUTSIDE,\n        Dialog.hideShowTriggers.TAB_KEY,\n        Dialog.hideShowTriggers.ESCAPE_KEY\n      ]);\n\n      if (closeDialogOnContentClick) {\n        triggers.add(Dialog.hideShowTriggers.CONTENT_CLICK);\n        triggers.add(Dialog.hideShowTriggers.ENTER);\n      }\n\n      if (removeTabCloseTrigger) {\n        triggers.delete(Dialog.hideShowTriggers.TAB_KEY);\n      }\n      const childrenArr = React.Children.toArray(children) as MenuChild[];\n      const cloned = childrenArr.map(child => {\n        if (!React.isValidElement(child)) return null;\n\n        const newProps: { focusOnMount?: boolean; onClose?: (event: React.KeyboardEvent) => void } = {};\n        if (child.type && child.type.supportFocusOnMount) {\n          newProps.focusOnMount = true;\n          triggers.delete(Dialog.hideShowTriggers.ESCAPE_KEY);\n        }\n\n        if (child.type && child.type.isMenu) {\n          newProps.onClose = onMenuDidClose;\n        }\n\n        return React.cloneElement(child, newProps);\n      });\n      return [cloned, Array.from(triggers)];\n    }, [children, onMenuDidClose, closeDialogOnContentClick, removeTabCloseTrigger]);\n\n    const content = useMemo(() => {\n      if (clonedChildren.length === 0) return null;\n      return (\n        <DialogContentContainer size={dialogPaddingSize} type={DialogContentContainer.types.POPOVER}>\n          {clonedChildren}\n        </DialogContentContainer>\n      );\n    }, [clonedChildren, dialogPaddingSize]);\n\n    const computedDialogOffset = useMemo(\n      () => ({\n        ...MOVE_BY,\n        ...dialogOffset\n      }),\n      [dialogOffset]\n    );\n\n    const onMouseUp = (event: React.MouseEvent<HTMLElement>) => {\n      if (disabled) {\n        event.currentTarget.blur();\n        return;\n      }\n      onClick(event);\n    };\n\n    const Icon = component;\n    const iconSize = useMemo(() => {\n      switch (size) {\n        case \"xxs\":\n        case \"xs\":\n          return SMALL_BUTTON_ICON_SIZE;\n        case \"small\":\n        case \"medium\":\n        case \"large\":\n          return BUTTON_ICON_SIZE;\n        default:\n          return 24;\n      }\n    }, [size]);\n    const icon = Icon ? <Icon size={iconSize.toString()} role=\"img\" aria-hidden=\"true\" /> : null;\n\n    useIsomorphicLayoutEffect(() => {\n      setIsOpen(open);\n    }, [open, setIsOpen]);\n\n    // Trigger element props, which are only relevant for \"button\" element, but might be needed for other elements e.g. Button\n    const triggerElementProps =\n      TriggerElement === \"button\"\n        ? {\n            ref: mergedRef\n          }\n        : {\n            active: isActive,\n            disabled: disabled,\n            ref: isForwardRef(TriggerElement) ? mergedRef : undefined\n          };\n\n    const triggerElementNode = (\n      <TriggerElement\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MENU_BUTTON, id)}\n        data-vibe={ComponentVibeId.MENU_BUTTON}\n        type=\"button\"\n        className={cx(styles.wrapper, className, getStyle(styles, camelCase(`size-${size}`)), {\n          [styles.active]: isActive,\n          [getStyle(styles, openDialogComponentClassName)]: isOpen && openDialogComponentClassName,\n          [styles.disabled]: disabled,\n          [styles.text]: text\n        })}\n        aria-haspopup=\"true\"\n        aria-expanded={isOpen}\n        aria-controls={ariaControls}\n        aria-label={!text && ariaLabel}\n        onMouseUp={onMouseUp}\n        aria-disabled={disabled}\n        {...triggerElementProps}\n      >\n        {componentPosition === \"start\" && icon}\n        {text && <span className={styles.innerText}>{text}</span>}\n        {componentPosition === \"end\" && icon}\n      </TriggerElement>\n    );\n\n    const dialogNode = (dialogChildren: React.ReactElement) => (\n      <Dialog\n        wrapperClassName={dialogClassName}\n        position={dialogPosition}\n        containerSelector={dialogContainerSelector}\n        startingEdge={startingEdge}\n        animationType=\"expand\"\n        content={content}\n        moveBy={computedDialogOffset}\n        showTrigger={disabled ? [] : [\"click\", \"enter\"]}\n        hideTrigger={hideTrigger}\n        showTriggerIgnoreClass={dialogShowTriggerIgnoreClass}\n        hideTriggerIgnoreClass={dialogHideTriggerIgnoreClass}\n        useDerivedStateFromProps={true}\n        onDialogDidShow={onDialogDidShow}\n        onDialogDidHide={onDialogDidHide}\n        zIndex={zIndex}\n        isOpen={isOpen}\n        hideWhenReferenceHidden={hideWhenReferenceHidden}\n      >\n        {dialogChildren}\n      </Dialog>\n    );\n\n    const tooltipNode = (tooltipChildren: React.ReactElement) => (\n      <Tooltip\n        content={tooltipContent}\n        position={tooltipPosition}\n        showTrigger=\"mouseenter\"\n        hideTrigger={tooltipTriggers}\n        referenceWrapperClassName={tooltipReferenceClassName}\n        hideWhenReferenceHidden={hideWhenReferenceHidden}\n        {...tooltipProps}\n      >\n        {tooltipChildren}\n      </Tooltip>\n    );\n\n    if (showTooltipOnlyOnTriggerElement) {\n      return dialogNode(tooltipNode(triggerElementNode));\n    }\n    return tooltipNode(dialogNode(triggerElementNode));\n  }\n);\n\ninterface MenuButtonStaticProps {\n  sizes: typeof MenuButtonSizeEnum;\n  paddingSizes: typeof DialogContentContainer.sizes;\n  dialogPositions: typeof DialogPositionEnum;\n  hideTriggers: typeof Dialog.hideShowTriggers;\n  componentPositions: typeof MenuButtonComponentPositionEnum;\n}\n\nexport default withStaticProps<MenuButtonProps, MenuButtonStaticProps>(MenuButton, {\n  sizes: MenuButtonSizeEnum,\n  paddingSizes: DialogSizeEnum,\n  dialogPositions: DialogPositionEnum,\n  hideTriggers: DialogTriggerEventEnum,\n  componentPositions: MenuButtonComponentPositionEnum\n});\n"],"names":["MOVE_BY","main","secondary","CLOSE_KEYS","Dialog","hideShowTriggers","ESCAPE_KEY","TAB_KEY","withStaticProps","forwardRef","_ref","ref","id","className","openDialogComponentClassName","children","_ref$component","component","Menu","_ref$componentPositio","componentPosition","_ref$size","size","_ref$open","open","_ref$onClick","onClick","NOOP","_ref$zIndex","zIndex","_ref$ariaLabel","ariaLabel","closeMenuOnItemClick","_ref$dialogOffset","dialogOffset","_ref$dialogPosition","dialogPosition","positions","BOTTOM_START","dialogClassName","_ref$dialogPaddingSiz","dialogPaddingSize","DialogContentContainer","sizes","SMALL","dialogShowTriggerIgnoreClass","dialogHideTriggerIgnoreClass","_ref$onMenuHide","onMenuHide","_ref$onMenuShow","onMenuShow","_ref$disabled","disabled","text","tooltipContent","tooltipProps","_ref$tooltipTriggers","tooltipTriggers","_ref$tooltipPosition","tooltipPosition","_ref$startingEdge","startingEdge","_ref$removeTabCloseTr","removeTabCloseTrigger","tooltipReferenceClassName","_ref$hideWhenReferenc","hideWhenReferenceHidden","dialogContainerSelector","active","_ref$triggerElement","triggerElement","TriggerElement","showTooltipOnlyOnTriggerElement","dataTestId","_ref$closeDialogOnCon","closeDialogOnContentClick","ariaControls","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","isActive","handleMenuClose","useCallback","focusOnMenuButtonAfterClose","button","current","window","requestAnimationFrame","focus","onMenuDidClose","event","isCloseKey","includes","key","propagate","onDialogDidHide","hideEvent","onDialogDidShow","_useMemo","useMemo","triggers","Set","CLICK_OUTSIDE","add","CONTENT_CLICK","ENTER","delete","React","Children","toArray","map","child","isValidElement","newProps","type","supportFocusOnMount","focusOnMount","isMenu","onClose","cloneElement","Array","from","_useMemo2","clonedChildren","hideTrigger","content","length","createElement","types","POPOVER","computedDialogOffset","Object","assign","Icon","iconSize","SMALL_BUTTON_ICON_SIZE","BUTTON_ICON_SIZE","icon","role","useIsomorphicLayoutEffect","triggerElementProps","isForwardRef","undefined","triggerElementNode","getTestId","ComponentDefaultTestId","MENU_BUTTON","ComponentVibeId","cx","styles","wrapper","getStyle","camelCase","concat","_defineProperty","onMouseUp","currentTarget","blur","innerText","dialogNode","dialogChildren","wrapperClassName","position","containerSelector","animationType","moveBy","showTrigger","showTriggerIgnoreClass","hideTriggerIgnoreClass","useDerivedStateFromProps","tooltipNode","tooltipChildren","Tooltip","referenceWrapperClassName","MenuButtonSizeEnum","paddingSizes","DialogSizeEnum","dialogPositions","DialogPositionEnum","hideTriggers","DialogTriggerEventEnum","componentPositions","MenuButtonComponentPositionEnum"],"mappings":"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"}