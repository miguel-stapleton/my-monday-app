{"version":3,"file":"EmptyState.js","sources":["../../../../../src/components/EmptyState/EmptyState.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport Flex from \"../../components/Flex/Flex\";\nimport Heading from \"../../components/Heading/Heading\";\nimport Text from \"../../components/Text/Text\";\nimport { EmptyStateProps } from \"./EmptyState.types\";\nimport styles from \"./EmptyState.module.scss\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { Button, ButtonProps } from \"../Button\";\nimport { Link, LinkProps } from \"../Link\";\nconst EmptyState = forwardRef<HTMLDivElement, EmptyStateProps>(\n  (\n    {\n      className,\n      title,\n      description,\n      visual,\n      mainAction,\n      supportingAction,\n      layout = \"default\",\n      id,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const isCompact = layout === \"compact\";\n\n    return (\n      <Flex\n        direction=\"column\"\n        align=\"center\"\n        justify=\"center\"\n        gap={isCompact ? \"small\" : \"medium\"}\n        className={cx(styles.emptyState, getStyle(styles, layout), className)}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.EMPTY_STATE, id)}\n        ref={ref}\n      >\n        {!!visual && visual}\n\n        <Flex direction=\"column\" align=\"center\" gap={isCompact ? 12 : \"medium\"} className={styles.content}>\n          <Flex direction=\"column\" align=\"center\" gap=\"xs\">\n            {title && (\n              <Heading type=\"h3\" weight=\"normal\" className={styles.title} align=\"center\" ellipsis={false}>\n                {title}\n              </Heading>\n            )}\n\n            {typeof description === \"string\" ? (\n              <Text className={styles.description} align=\"center\" ellipsis={false}>\n                {description}\n              </Text>\n            ) : (\n              description\n            )}\n          </Flex>\n\n          {(mainAction || supportingAction) && (\n            <Flex direction=\"column\" align=\"center\" gap=\"small\" className={styles.actions}>\n              {renderMainAction(mainAction, isCompact)}\n              {renderSupportingAction(supportingAction, isCompact)}\n            </Flex>\n          )}\n        </Flex>\n      </Flex>\n    );\n  }\n);\n\nfunction renderMainAction(mainAction: EmptyStateProps[\"mainAction\"], isCompact: boolean) {\n  if (typeof mainAction === \"object\" && \"text\" in mainAction) {\n    return (\n      <Button kind=\"secondary\" size={isCompact ? \"small\" : \"medium\"} {...mainAction}>\n        {mainAction.text}\n      </Button>\n    );\n  }\n\n  return mainAction;\n}\n\nfunction renderSupportingAction(supportingAction: EmptyStateProps[\"supportingAction\"], isCompact: boolean) {\n  if (typeof supportingAction === \"object\") {\n    if (\"text\" in supportingAction && \"href\" in supportingAction) {\n      const { text, ...linkProps } = supportingAction as LinkProps & { text: string };\n      return <Link text={text} {...linkProps} />;\n    }\n    if (\"text\" in supportingAction) {\n      const { text, ...buttonProps } = supportingAction as ButtonProps & { text: string };\n      return (\n        <Button kind=\"tertiary\" size={isCompact ? \"small\" : \"medium\"} {...buttonProps}>\n          {text}\n        </Button>\n      );\n    }\n  }\n\n  return supportingAction;\n}\n\nexport default EmptyState;\n"],"names":["EmptyState","forwardRef","_ref","ref","className","title","description","visual","mainAction","supportingAction","_ref$layout","layout","id","dataTestId","isCompact","React","createElement","Flex","direction","align","justify","gap","cx","styles","emptyState","getStyle","getTestId","ComponentDefaultTestId","EMPTY_STATE","content","Heading","type","weight","ellipsis","Text","actions","_typeof","Button","Object","assign","kind","size","text","renderMainAction","linkProps","__rest","Link","buttonProps","renderSupportingAction"],"mappings":"kiBAWMA,IAAAA,EAAaC,GACjB,SAAAC,EAYEC,GACE,IAXAC,EAASF,EAATE,UACAC,EAAKH,EAALG,MACAC,EAAWJ,EAAXI,YACAC,EAAML,EAANK,OACAC,EAAUN,EAAVM,WACAC,EAAgBP,EAAhBO,iBAAgBC,EAAAR,EAChBS,OAAAA,OAAS,IAAHD,EAAG,UAASA,EAClBE,EAAEV,EAAFU,GACeC,EAAUX,EAAzB,eAIIY,EAAuB,YAAXH,EAElB,OACEI,EAAAC,cAACC,EAAI,CACHC,UAAU,SACVC,MAAM,SACNC,QAAQ,SACRC,IAAKP,EAAY,QAAU,SAC3BV,UAAWkB,EAAGC,EAAOC,WAAYC,EAASF,EAAQZ,GAASP,GAC3DQ,GAAIA,EAAE,cACOC,GAAca,EAAUC,EAAuBC,YAAahB,GACzET,IAAKA,KAEFI,GAAUA,EAEbQ,EAACC,cAAAC,EAAK,CAAAC,UAAU,SAASC,MAAM,SAASE,IAAKP,EAAY,GAAK,SAAUV,UAAWmB,EAAOM,SACxFd,EAAAC,cAACC,EAAI,CAACC,UAAU,SAASC,MAAM,SAASE,IAAI,MACzChB,GACCU,EAACC,cAAAc,EAAQ,CAAAC,KAAK,KAAKC,OAAO,SAAS5B,UAAWmB,EAAOlB,MAAOc,MAAM,SAASc,UAAU,GAClF5B,GAImB,iBAAhBC,EACNS,EAACC,cAAAkB,EAAK,CAAA9B,UAAWmB,EAAOjB,YAAaa,MAAM,SAASc,UAAU,GAC3D3B,GAGHA,IAIFE,GAAcC,IACdM,EAACC,cAAAC,EAAK,CAAAC,UAAU,SAASC,MAAM,SAASE,IAAI,QAAQjB,UAAWmB,EAAOY,SAWlF,SAA0B3B,EAA2CM,GACnE,GAA0B,WAAtBsB,EAAO5B,IAA2B,SAAUA,EAC9C,OACEO,EAACC,cAAAqB,EAAOC,OAAAC,OAAA,CAAAC,KAAK,YAAYC,KAAM3B,EAAY,QAAU,UAAcN,GAChEA,EAAWkC,MAKlB,OAAOlC,CACT,CApBemC,CAAiBnC,EAAYM,GAsB5C,SAAgCL,EAAuDK,GACrF,GAAgC,WAA5BsB,EAAO3B,GAA+B,CACxC,GAAI,SAAUA,GAAoB,SAAUA,EAAkB,CACtD,IAAEiC,EAAuBjC,EAAvBiC,KAASE,EAASC,EAAKpC,EAAzB,CAAsB,SAC5B,OAAOM,EAAAC,cAAC8B,EAAKR,OAAAC,OAAA,CAAAG,KAAMA,GAAUE,GAC9B,CACD,GAAI,SAAUnC,EAAkB,CACxB,IAAEiC,EAAyBjC,EAAzBiC,KAASK,EAAWF,EAAKpC,EAA3B,CAAwB,SAC9B,OACEM,EAACC,cAAAqB,EAAOC,OAAAC,OAAA,CAAAC,KAAK,WAAWC,KAAM3B,EAAY,QAAU,UAAciC,GAC/DL,EAGN,CACF,CAED,OAAOjC,CACT,CAtCeuC,CAAuBvC,EAAkBK,KAMtD"}