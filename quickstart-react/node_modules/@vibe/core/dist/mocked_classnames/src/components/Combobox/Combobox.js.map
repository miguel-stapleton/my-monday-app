{"version":3,"file":"Combobox.js","sources":["../../../../../src/components/Combobox/Combobox.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport React, { useRef, useState, forwardRef, useMemo, useCallback } from \"react\";\nimport { isFunction, noop as NOOP } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Search from \"../Search/Search\";\nimport { BASE_SIZES } from \"../../constants\";\nimport Button from \"../Button/Button\";\nimport Text from \"../Text/Text\";\nimport ComboboxOption from \"./components/ComboboxOption/ComboboxOption\";\nimport { defaultFilter } from \"./ComboboxService\";\nimport { ComboboxItems } from \"./components/ComboboxItems/ComboboxItems\";\nimport { StickyCategoryHeader } from \"./components/StickyCategoryHeader/StickyCategoryHeader\";\nimport { useItemsData, useKeyboardNavigation } from \"./ComboboxHelpers/ComboboxHelpers\";\nimport { getOptionId } from \"./helpers\";\nimport { ElementContent, SubIcon, VibeComponentProps, withStaticProps } from \"../../types\";\nimport {\n  IComboboxCategoryMap,\n  IComboboxItem,\n  IComboboxOption,\n  COMBOBOX_LISTBOX_ID,\n  IComboboxCategory\n} from \"./components/ComboboxConstants\";\nimport styles from \"./Combobox.module.scss\";\nimport { ComboboxSizes } from \"./Combobox.types\";\nimport IconButton from \"../IconButton/IconButton\";\nimport MenuButton from \"../MenuButton/MenuButton\";\n\nexport interface ComboboxProps extends VibeComponentProps {\n  /**\n   * Class name applied to each option item.\n   */\n  optionClassName?: string;\n  /**\n   * Class name applied to the search wrapper.\n   */\n  searchWrapperClassName?: string;\n  /**\n   * Class name applied to the sticky category header.\n   */\n  stickyCategoryClassName?: string;\n  /**\n   * Placeholder text displayed in the search input.\n   */\n  placeholder?: string;\n  /**\n   * Message displayed when no results are found.\n   */\n  noResultsMessage?: string;\n  /**\n   * If true, the combobox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The list of available options.\n   */\n  options?: IComboboxOption[];\n  /**\n   * The list of available categories.\n   */\n  categories?: IComboboxCategoryMap;\n  /**\n   * If true, displays a divider between category sections.\n   */\n  withCategoriesDivider?: boolean;\n  /**\n   * The size of the combobox.\n   */\n  size?: ComboboxSizes;\n  /**\n   * The height of each option item.\n   */\n  optionLineHeight?: number;\n  /**\n   * The height of the options list.\n   */\n  optionsListHeight?: number;\n  /**\n   * If true, the search input is focused when the component mounts.\n   */\n  autoFocus?: boolean;\n  /**\n   * Callback fired when the \"Add new\" button is clicked.\n   */\n  onAddNew?: (value: string) => void;\n  /**\n   * Label displayed for the \"Add new\" button.\n   */\n  addNewLabel?: ((label: string) => ElementContent) | string;\n  /**\n   * Custom filter function for searching options.\n   */\n  filter?: (filterValue: string, options: IComboboxOption[]) => IComboboxOption[];\n  /**\n   * The default search input\n   */\n  defaultFilter?: string;\n  /**\n   * If true, disables filtering.\n   */\n  disableFilter?: boolean;\n  /**\n   * Controlled search input value.\n   */\n  filterValue?: string;\n  /**\n   * Callback fired when the search input value changes.\n   */\n  onFilterChanged?: (value: string) => void;\n  /**\n   * If true, displays a loading state.\n   */\n  loading?: boolean;\n  /**\n   * Callback fired when an option is hovered.\n   */\n  onOptionHover?: (event: React.MouseEvent, index: number, option: IComboboxOption) => void;\n  /**\n   * Callback fired when the mouse leaves an option.\n   */\n  onOptionLeave?: () => void;\n  /**\n   * If true, automatically scrolls to the selected option.\n   */\n  shouldScrollToSelectedItem?: boolean;\n  /**\n   * Custom renderer for when no results are found.\n   */\n  noResultsRenderer?: () => JSX.Element;\n  /**\n   * If true, keeps categories visible when scrolling.\n   */\n  stickyCategories?: boolean;\n  /**\n   * If true, visually focuses the first item by default.\n   */\n  defaultVisualFocusFirstIndex?: boolean;\n  /**\n   * If true, clears the search input when an option is selected.\n   */\n  clearFilterOnSelection?: boolean;\n  /**\n   * Custom renderer for options.\n   */\n  optionRenderer?: (option: IComboboxOption) => JSX.Element;\n  /**\n   * Maximum number of options displayed before scrolling.\n   */\n  maxOptionsWithoutScroll?: number;\n  /**\n   * If true, renders only visible options for performance optimization.\n   */\n  renderOnlyVisibleOptions?: boolean;\n  /**\n   * Callback fired when an option is clicked.\n   */\n  onClick?: (optionData: IComboboxOption) => void;\n  /**\n   * Custom search icon.\n   */\n  searchIcon?: SubIcon;\n  /**\n   * ARIA label for the search input.\n   */\n  searchInputAriaLabel?: string;\n  /**\n   * The debounce rate for filtering.\n   */\n  debounceRate?: number;\n  /**\n   * Ref for the search input element.\n   */\n  searchInputRef?: React.RefObject<HTMLInputElement>;\n  /**\n   * Additional action button inside the search input.\n   */\n  renderAction?: React.ReactElement<typeof IconButton | typeof MenuButton>;\n  /**\n   * If true, hides the additional action when the user types in the search input.\n   */\n  hideRenderActionOnInput?: boolean;\n}\n\nconst Combobox = forwardRef(\n  (\n    {\n      className = \"\",\n      optionClassName = \"\",\n      searchWrapperClassName,\n      stickyCategoryClassName,\n      searchIcon,\n      id = \"\",\n      placeholder = \"\",\n      size = \"medium\",\n      defaultVisualFocusFirstIndex,\n      optionLineHeight = 32,\n      optionsListHeight,\n      autoFocus = false,\n      disabled = false,\n      options = [],\n      categories,\n      withCategoriesDivider = false,\n      noResultsMessage = \"No results found\",\n      onAddNew,\n      addNewLabel = \"Add new\",\n      onClick = (_optionData: IComboboxOption) => {},\n      filter = defaultFilter,\n      disableFilter = false,\n      filterValue: filterValueProp,\n      onFilterChanged,\n      loading = false,\n      onOptionHover = NOOP,\n      onOptionLeave = NOOP,\n      shouldScrollToSelectedItem = true,\n      noResultsRenderer,\n      stickyCategories = false,\n      optionRenderer = null,\n      renderOnlyVisibleOptions = false,\n      clearFilterOnSelection = false,\n      maxOptionsWithoutScroll,\n      defaultFilter: defaultFilterValue = \"\",\n      searchInputAriaLabel = \"Search for content\",\n      \"data-testid\": dataTestId,\n      debounceRate,\n      searchInputRef,\n      renderAction: RenderAction,\n      hideRenderActionOnInput\n    }: ComboboxProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const componentRef = useRef(null);\n    const inputRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const mergedInputRef = useMergeRef(inputRef, searchInputRef);\n\n    const [filterValue, setFilterValue] = useState(filterValueProp || defaultFilterValue);\n\n    if (filterValueProp !== undefined && filterValueProp !== filterValue) {\n      setFilterValue(filterValueProp);\n    }\n\n    const onChangeCallback = useCallback(\n      (value: string) => {\n        setActiveOptionIndex(-1);\n        if (onFilterChanged) {\n          onFilterChanged(value);\n        }\n        setFilterValue(value);\n      },\n      [setFilterValue, onFilterChanged]\n    );\n\n    const onOptionHoverCB = useCallback(\n      (event: React.MouseEvent, index: number, option: IComboboxOption) => {\n        onOptionHover(event, index, option);\n      },\n      [onOptionHover]\n    );\n\n    const filteredOptions: IComboboxOption[] = useMemo(() => {\n      if (disableFilter) {\n        return options;\n      }\n      return filter(filterValue, options);\n    }, [options, filterValue, filter, disableFilter]);\n\n    const [activeOptionIndex, setActiveOptionIndex] = useState(-1);\n\n    const isChildSelectable = useCallback(\n      (index: number) => {\n        return index !== undefined && filteredOptions[index] && !filteredOptions[index].disabled;\n      },\n      [filteredOptions]\n    );\n\n    const onAddNewCallback = useCallback(() => {\n      onAddNew && onAddNew(filterValue);\n      // clear filter after adding\n      setFilterValue(\"\");\n    }, [onAddNew, filterValue, setFilterValue]);\n\n    const hasResults = filteredOptions.length > 0;\n    const hasFilter = filterValue.length > 0;\n\n    function getAddNewLabel() {\n      if (isFunction(addNewLabel)) {\n        return addNewLabel(filterValue);\n      }\n      return addNewLabel;\n    }\n\n    function renderNoResults() {\n      if (noResultsRenderer) {\n        return noResultsRenderer();\n      }\n\n      return (\n        <div className={styles.comboboxNoResults}>\n          <div className={styles.comboboxMessageWrapper}>\n            <span className={styles.comboboxMessage}>{noResultsMessage}</span>\n          </div>\n          {onAddNew && !disabled && (\n            <Button className={styles.addNewButton} size={size} kind=\"tertiary\" onClick={onAddNewCallback}>\n              <span className={styles.buttonLabel}>{getAddNewLabel()}</span>\n            </Button>\n          )}\n        </div>\n      );\n    }\n\n    const [activeCategory, setActiveCategory] = useState<IComboboxCategory>();\n\n    const onActiveCategoryChanged = useCallback(\n      (categoryData: IComboboxItem) => {\n        if (categoryData?.category?.label !== activeCategory?.label) {\n          setActiveCategory(categoryData?.category);\n        }\n      },\n      [activeCategory]\n    );\n\n    const { items, itemsMap, selectableItems } = useItemsData({\n      categories,\n      options: filteredOptions,\n      filterValue,\n      withCategoriesDivider,\n      optionLineHeight\n    });\n\n    const overrideOnClick = useCallback(\n      (_event: React.MouseEvent | React.KeyboardEvent, itemIndex: number) => {\n        onClick(selectableItems[itemIndex]);\n        if (isChildSelectable(itemIndex)) {\n          setActiveOptionIndex(itemIndex);\n        }\n        if (clearFilterOnSelection) {\n          // clear filter after adding\n          onChangeCallback(\"\");\n        }\n      },\n      [onClick, selectableItems, isChildSelectable, clearFilterOnSelection, onChangeCallback]\n    );\n\n    const {\n      visualFocusItemIndex,\n      visualFocusItemId,\n      onOptionClick: overrideOnOptionClick\n    } = useKeyboardNavigation({\n      getOptionId,\n      defaultVisualFocusFirstIndex,\n      onClick: overrideOnClick,\n      isChildSelectable,\n      options: selectableItems,\n      inputRef: mergedInputRef\n    });\n\n    return (\n      <Text\n        type=\"text2\"\n        ref={mergedRef}\n        className={cx(styles.combobox, className, getStyle(styles, camelCase(\"size-\" + size)), {\n          [styles.empty]: !hasResults,\n          [styles.stickyCategory]: stickyCategories\n        })}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.COMBOBOX, id)}\n        ellipsis={false}\n      >\n        <div className={styles.comboboxList} style={{ maxHeight: optionsListHeight }}>\n          <Search\n            ref={mergedInputRef}\n            value={filterValue}\n            className={cx(styles.comboboxSearchWrapper, searchWrapperClassName)}\n            inputAriaLabel={searchInputAriaLabel}\n            currentAriaResultId={visualFocusItemId}\n            id=\"combobox-search\"\n            placeholder={placeholder}\n            size={size}\n            disabled={disabled}\n            onChange={onChangeCallback}\n            autoFocus={autoFocus}\n            loading={loading}\n            searchIconName={searchIcon}\n            ariaExpanded={hasFilter || hasResults}\n            ariaHasPopup=\"listbox\"\n            searchResultsContainerId={id ? `${id}-listbox` : COMBOBOX_LISTBOX_ID}\n            debounceRate={debounceRate}\n            renderAction={RenderAction}\n            hideRenderActionOnInput={hideRenderActionOnInput}\n          />\n          {stickyCategories && (\n            <StickyCategoryHeader\n              label={activeCategory?.label}\n              color={activeCategory?.color}\n              className={stickyCategoryClassName}\n            />\n          )}\n          {hasResults && (\n            <ComboboxItems\n              stickyCategories={stickyCategories}\n              categories={categories}\n              options={items}\n              itemsMap={itemsMap}\n              optionClassName={optionClassName}\n              optionRenderer={optionRenderer}\n              activeItemIndex={activeOptionIndex}\n              onActiveCategoryChanged={onActiveCategoryChanged}\n              onOptionClick={overrideOnOptionClick}\n              onOptionEnter={onOptionHoverCB}\n              onOptionLeave={onOptionLeave}\n              optionLineHeight={optionLineHeight}\n              shouldScrollToSelectedItem={shouldScrollToSelectedItem}\n              renderOnlyVisibleOptions={renderOnlyVisibleOptions}\n              maxOptionsWithoutScroll={maxOptionsWithoutScroll}\n              visualFocusItemIndex={visualFocusItemIndex}\n              id={id ? `${id}-listbox` : COMBOBOX_LISTBOX_ID}\n            />\n          )}\n        </div>\n        {hasFilter && !hasResults && !loading && renderNoResults()}\n      </Text>\n    );\n  }\n);\n\n// Locate loading next to search icon\n// color it with --secondary-text-color\n// size it like the icon - we think it's 16px - make sure it's not fat\n\ninterface ComboboxStaticProps {\n  sizes: typeof BASE_SIZES;\n  iconTypes: typeof ComboboxOption.iconTypes;\n}\n\nexport default withStaticProps<ComboboxProps, ComboboxStaticProps>(Combobox, {\n  sizes: BASE_SIZES,\n  iconTypes: ComboboxOption.iconTypes\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","_ref$className","className","_ref$optionClassName","optionClassName","searchWrapperClassName","stickyCategoryClassName","searchIcon","_ref$id","id","_ref$placeholder","placeholder","_ref$size","size","defaultVisualFocusFirstIndex","_ref$optionLineHeight","optionLineHeight","optionsListHeight","_ref$autoFocus","autoFocus","_ref$disabled","disabled","_ref$options","options","categories","_ref$withCategoriesDi","withCategoriesDivider","_ref$noResultsMessage","noResultsMessage","onAddNew","_ref$addNewLabel","addNewLabel","_ref$onClick","onClick","_optionData","_ref$filter","filter","defaultFilter","_ref$disableFilter","disableFilter","filterValueProp","filterValue","onFilterChanged","_ref$loading","loading","_ref$onOptionHover","onOptionHover","NOOP","_ref$onOptionLeave","onOptionLeave","_ref$shouldScrollToSe","shouldScrollToSelectedItem","noResultsRenderer","_ref$stickyCategories","stickyCategories","_ref$optionRenderer","optionRenderer","_ref$renderOnlyVisibl","renderOnlyVisibleOptions","_ref$clearFilterOnSel","clearFilterOnSelection","maxOptionsWithoutScroll","_ref$defaultFilter","defaultFilterValue","_ref$searchInputAriaL","searchInputAriaLabel","dataTestId","debounceRate","searchInputRef","RenderAction","renderAction","hideRenderActionOnInput","componentRef","useRef","inputRef","mergedRef","useMergeRef","mergedInputRef","_useState","useState","_useState2","_slicedToArray","setFilterValue","undefined","onChangeCallback","useCallback","value","setActiveOptionIndex","onOptionHoverCB","event","index","option","filteredOptions","useMemo","_useState3","_useState4","activeOptionIndex","isChildSelectable","onAddNewCallback","hasResults","length","hasFilter","_useState5","_useState6","activeCategory","setActiveCategory","onActiveCategoryChanged","categoryData","category","_a","label","_useItemsData","useItemsData","items","itemsMap","selectableItems","overrideOnClick","_event","itemIndex","_useKeyboardNavigatio","useKeyboardNavigation","getOptionId","visualFocusItemIndex","visualFocusItemId","overrideOnOptionClick","onOptionClick","React","createElement","Text","type","cx","styles","combobox","getStyle","camelCase","_defineProperty","empty","stickyCategory","getTestId","ComponentDefaultTestId","COMBOBOX","ellipsis","comboboxList","style","maxHeight","Search","comboboxSearchWrapper","inputAriaLabel","currentAriaResultId","onChange","searchIconName","ariaExpanded","ariaHasPopup","searchResultsContainerId","concat","COMBOBOX_LISTBOX_ID","StickyCategoryHeader","color","ComboboxItems","activeItemIndex","onOptionEnter","comboboxNoResults","comboboxMessageWrapper","comboboxMessage","Button","addNewButton","kind","buttonLabel","isFunction","sizes","BASE_SIZES","iconTypes","ComboboxOption"],"mappings":"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"}