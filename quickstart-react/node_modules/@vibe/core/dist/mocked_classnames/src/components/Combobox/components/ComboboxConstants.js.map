{"version":3,"file":"ComboboxConstants.js","sources":["../../../../../../src/components/Combobox/components/ComboboxConstants.ts"],"sourcesContent":["import { SubIcon } from \"../../../types\";\nimport React from \"react\";\n\nexport const COMBOBOX_DIVIDER_ITEM = \"combobox-divider\";\nexport const COMBOBOX_CATEGORY_ITEM = \"combobox-category\";\nexport const COMBOBOX_OPTION_ITEM = \"combobox-option\";\nexport const COMBOBOX_LISTBOX_ID = \"combobox-listbox\";\n\n/**\n * @deprecated\n */\nexport enum ComboboxOptionIconType {\n  DEFAULT = \"default\",\n  RENDERER = \"renderer\"\n}\n\nexport interface IComboboxCategoryMap {\n  /**\n   * A mapping of category IDs to category details.\n   */\n  [key: string]: IComboboxCategory;\n}\n\nexport interface IComboboxCategory {\n  /**\n   * The display label of the category.\n   */\n  label: string;\n  /**\n   * The unique ID of the category.\n   */\n  id: string;\n  /**\n   * The ARIA label for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * If true, the category is only shown when searching.\n   */\n  onlyShowOnSearch?: boolean;\n  /**\n   * The color associated with the category.\n   */\n  color?: string;\n}\n\nexport interface IComboboxOption {\n  /**\n   * The unique ID of the option.\n   */\n  id: string;\n  /**\n   * The ID of the category the option belongs to.\n   */\n  categoryId?: string;\n  /**\n   * The icon displayed on the left side.\n   */\n  leftIcon?: SubIcon | ((className: string) => JSX.Element);\n  /**\n   * The icon displayed on the right side.\n   */\n  rightIcon?: SubIcon | ((className: string) => JSX.Element);\n  /**\n   * The type of the left icon.\n   */\n  leftIconType?: ComboboxOptionIconType;\n  /**\n   * The type of the right icon.\n   */\n  rightIconType?: ComboboxOptionIconType;\n  /**\n   * The display label of the option.\n   */\n  label: string;\n  /**\n   * The size of the icons.\n   */\n  iconSize?: number;\n  /**\n   * If true, the option is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If true, the option is selected.\n   */\n  selected?: boolean;\n  /**\n   * The ARIA label for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * If true, the option belongs to a category.\n   */\n  belongToCategory?: boolean;\n  /**\n   * The tooltip content displayed on hover.\n   */\n  tooltipContent?: string;\n}\n\nexport interface IComboboxItem {\n  /**\n   * The height of the item.\n   */\n  height?: number;\n  /**\n   * The type of the item.\n   */\n  type?: string;\n  /**\n   * The category details if the item is a category.\n   */\n  category?: IComboboxCategory;\n  /**\n   * The ID of the category the item belongs to.\n   */\n  categoryId?: string;\n  /**\n   * The unique ID of the item.\n   */\n  id?: string;\n  /**\n   * The index of the item in the list.\n   */\n  index?: number;\n  /**\n   * If true, a divider is displayed before this item.\n   */\n  withDivider?: boolean;\n  /**\n   * Class name applied to the item.\n   */\n  className?: string;\n  /**\n   * If true, the item belongs to a category.\n   */\n  belongToCategory?: boolean;\n  /**\n   * The option details if the item is an option.\n   */\n  option?: IComboboxOption;\n  /**\n   * Custom renderer for the option.\n   */\n  optionRenderer?: (option: IComboboxOption) => JSX.Element;\n  /**\n   * If true, the item is currently active.\n   */\n  isActive?: boolean;\n  /**\n   * The height of the option item.\n   */\n  optionLineHeight?: number;\n  /**\n   * If true, the selected item is automatically scrolled into view.\n   */\n  shouldScrollToSelectedItem?: boolean;\n}\n\nexport interface IComboboxOptionEvents {\n  /**\n   * Callback fired when an option is clicked.\n   */\n  onOptionClick: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    index: number,\n    option: IComboboxOption,\n    mouseTriggered: boolean\n  ) => void;\n  /**\n   * Callback fired when the mouse leaves an option.\n   */\n  onOptionLeave: (event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void;\n  /**\n   * Callback fired when the mouse enters an option.\n   */\n  onOptionEnter: (event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void;\n  /**\n   * Callback fired when hovering over an option.\n   */\n  onOptionHover?: (event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void;\n}\n\nexport interface IOptionItemRendererArgs extends IComboboxOptionEvents {\n  /**\n   * The unique ID of the option item.\n   */\n  id?: string;\n  /**\n   * The index of the option item.\n   */\n  index?: number;\n  /**\n   * The option details.\n   */\n  option?: IComboboxOption;\n  /**\n   * Class name applied to the option item.\n   */\n  className?: string;\n  /**\n   * If true, the option is currently active.\n   */\n  isActive?: boolean;\n  /**\n   * If true, the option has visual focus.\n   */\n  visualFocus?: boolean;\n  /**\n   * A reference to the scroll container.\n   */\n  scrollRef?: React.MutableRefObject<HTMLElement>;\n  /**\n   * The amount of offset when scrolling to the active item.\n   */\n  scrollOffset?: number;\n  /**\n   * The height of the option item.\n   */\n  optionLineHeight?: number;\n  /**\n   * If true, the selected item is automatically scrolled into view.\n   */\n  shouldScrollToSelectedItem?: boolean;\n  /**\n   * If true, scrolls to the active option when it is selected.\n   */\n  shouldScrollWhenActive?: boolean;\n  /**\n   * If true, the option belongs to a category.\n   */\n  belongToCategory?: boolean;\n  /**\n   * The index of the item with visual focus.\n   */\n  visualFocusItemIndex?: number;\n  /**\n   * The index of the currently active item.\n   */\n  activeItemIndex?: number;\n  /**\n   * Custom renderer for the option content.\n   */\n  optionRenderer?: (option: IComboboxOption) => JSX.Element;\n}\n"],"names":["ComboboxOptionIconType","COMBOBOX_DIVIDER_ITEM","COMBOBOX_CATEGORY_ITEM","COMBOBOX_OPTION_ITEM","COMBOBOX_LISTBOX_ID"],"mappings":"AAGO,IAQKA,EARCC,EAAwB,mBACxBC,EAAyB,oBACzBC,EAAuB,kBACvBC,EAAsB,oBAKnC,SAAYJ,GACVA,EAAA,QAAA,UACAA,EAAA,SAAA,UACD,CAHD,CAAYA,IAAAA,EAGX,CAAA"}