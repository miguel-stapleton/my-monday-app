{"version":3,"file":"ButtonGroup.js","sources":["../../../../../src/components/ButtonGroup/ButtonGroup.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport Button from \"../Button/Button\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { ButtonValue } from \"./ButtonGroupConstants\";\nimport { ButtonWrapper } from \"./ButtonWrapper\";\nimport { SIZES } from \"../../constants\";\nimport { ButtonType as ButtonTypeEnum } from \"../Button/ButtonConstants\";\nimport { ButtonType, ButtonSize } from \"../Button\";\nimport { SubIcon, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId, ComponentVibeId } from \"../../tests/constants\";\nimport styles from \"./ButtonGroup.module.scss\";\nimport { TooltipPositions } from \"../Tooltip\";\n\ntype ButtonGroupOption = {\n  icon?: SubIcon;\n  leftIcon?: SubIcon;\n  ariaLabel?: string;\n  subText?: string;\n  value: ButtonValue;\n  text: string;\n  disabled?: boolean;\n  tooltipContent?: string;\n};\n\nexport interface ButtonGroupProps extends VibeComponentProps {\n  /**\n   * The list of button options.\n   */\n  options: Array<ButtonGroupOption>;\n  /**\n   * The currently selected button value.\n   */\n  value?: ButtonValue;\n  /**\n   * Callback fired when a button is selected.\n   */\n  onSelect?: (value: ButtonValue, name: string) => void;\n  /**\n   * The size of the buttons.\n   */\n  size?: ButtonSize;\n  /**\n   * The style variant of the buttons.\n   */\n  kind?: Extract<ButtonType, \"secondary\" | \"tertiary\">;\n  /**\n   * The name of the button group.\n   */\n  name?: string;\n  /**\n   * If true, disables all buttons in the group.\n   */\n  disabled?: boolean;\n  /**\n   * The label of the button group for accessibility.\n   */\n  groupAriaLabel?: string;\n  /**\n   * The position of the tooltip relative to the button.\n   */\n  tooltipPosition?: TooltipPositions;\n  /**\n   * The delay in milliseconds before the tooltip hides.\n   */\n  tooltipHideDelay?: number;\n  /**\n   * The delay in milliseconds before the tooltip shows.\n   */\n  tooltipShowDelay?: number;\n  /**\n   * CSS selector for the tooltip container.\n   */\n  tooltipContainerSelector?: string;\n  /**\n   * Adjusts the tooltip position.\n   */\n  tooltipMoveBy?: MoveBy;\n  /**\n   * The content inside the button group.\n   */\n  children?: React.ReactNode;\n  /**\n   * If true, makes the button group take the full width of its container.\n   */\n  fullWidth?: boolean;\n  /**\n   * If true, removes focus from the button after clicking.\n   */\n  blurOnMouseUp?: boolean;\n}\n\nconst ButtonGroup = forwardRef(\n  (\n    {\n      className,\n      options,\n      name = \"\",\n      disabled = false,\n      value = \"\",\n      onSelect,\n      size = \"small\",\n      kind = \"secondary\",\n      groupAriaLabel = \"\",\n      tooltipPosition,\n      tooltipHideDelay,\n      tooltipShowDelay,\n      tooltipContainerSelector,\n      tooltipMoveBy,\n      blurOnMouseUp = true,\n      id,\n      \"data-testid\": dataTestId,\n      fullWidth = false\n    }: ButtonGroupProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const inputRef = useRef();\n    const mergedRef = useMergeRef(ref, inputRef);\n\n    const [valueState, setValueState] = useState(value);\n    const prevValue = usePrevious(value);\n\n    const onClick = useCallback(\n      (option: ButtonGroupOption) => {\n        const isDisabled = disabled || option.disabled;\n        if (!isDisabled) {\n          setValueState(option.value);\n          if (onSelect) {\n            onSelect(option.value, name);\n          }\n        }\n      },\n      [onSelect, disabled, name]\n    );\n\n    const isOptionActive = (option?: ButtonGroupOption) => option?.value === valueState;\n\n    const selectedOption = useMemo(() => {\n      return options.find(option => isOptionActive(option));\n    }, [options, valueState]);\n\n    const Buttons = useMemo(() => {\n      return options.map((option, index) => {\n        const isSelected = isOptionActive(option);\n        const isFirst = index === 0;\n        const isLast = index === options.length - 1;\n        const isNextOptionActive = isOptionActive(options[index + 1]);\n\n        return (\n          <ButtonWrapper\n            key={option.value}\n            size={size}\n            onClick={() => onClick(option)}\n            rightIcon={option.icon}\n            leftIcon={option.leftIcon}\n            active={isSelected}\n            rightFlat={index !== options.length - 1}\n            leftFlat={index !== 0}\n            kind=\"tertiary\"\n            preventClickAnimation\n            ariaLabel={option.ariaLabel}\n            tooltipContent={option.tooltipContent}\n            tooltipPosition={tooltipPosition}\n            tooltipHideDelay={tooltipHideDelay}\n            tooltipShowDelay={tooltipShowDelay}\n            tooltipContainerSelector={tooltipContainerSelector}\n            tooltipMoveBy={tooltipMoveBy}\n            blurOnMouseUp={blurOnMouseUp}\n            className={cx(styles.button, styles.optionText, {\n              [styles.selected]: isSelected,\n              [styles.disabled]: disabled,\n              [styles.buttonDisabled]: option.disabled,\n              [styles.fullWidth]: fullWidth,\n              [styles.startBorder]: isFirst,\n              [styles.endBorder]: isLast || !isNextOptionActive\n            })}\n            activeButtonClassName={styles.activeButton}\n          >\n            {option.text}\n          </ButtonWrapper>\n        );\n      });\n    }, [\n      options,\n      valueState,\n      size,\n      tooltipPosition,\n      tooltipHideDelay,\n      tooltipShowDelay,\n      tooltipContainerSelector,\n      tooltipMoveBy,\n      blurOnMouseUp,\n      disabled,\n      fullWidth,\n      onClick\n    ]);\n\n    // Effects\n    useEffect(() => {\n      // Update value if changed from props\n      if (value !== prevValue && value !== valueState) {\n        setValueState(value);\n      }\n    }, [value, prevValue, valueState, setValueState]);\n\n    return (\n      <div\n        className={cx(styles.buttonGroup, className, getStyle(styles, camelCase(\"kind-\" + kind)), {\n          [styles.disabled]: disabled\n        })}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.BUTTON_GROUP, id)}\n        data-vibe={ComponentVibeId.BUTTON_GROUP}\n        ref={mergedRef}\n      >\n        <div role=\"group\" aria-label={groupAriaLabel} className={cx(styles.buttonsContainer)} aria-disabled={disabled}>\n          {Buttons}\n        </div>\n        {selectedOption && selectedOption.subText && (\n          <div className={cx(styles.subTextContainer)}>{selectedOption.subText}</div>\n        )}\n      </div>\n    );\n  }\n);\n\ninterface ButtonGroupStaticProps {\n  sizes: typeof SIZES;\n  kinds: typeof ButtonTypeEnum;\n}\n\nexport default withStaticProps<ButtonGroupProps, ButtonGroupStaticProps>(ButtonGroup, {\n  sizes: Button.sizes,\n  kinds: Button.kinds\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","options","_ref$name","name","_ref$disabled","disabled","_ref$value","value","onSelect","_ref$size","size","_ref$kind","kind","_ref$groupAriaLabel","groupAriaLabel","tooltipPosition","tooltipHideDelay","tooltipShowDelay","tooltipContainerSelector","tooltipMoveBy","_ref$blurOnMouseUp","blurOnMouseUp","id","dataTestId","_ref$fullWidth","fullWidth","inputRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","valueState","setValueState","prevValue","usePrevious","onClick","useCallback","option","isOptionActive","selectedOption","useMemo","find","Buttons","map","index","isSelected","isFirst","isLast","length","isNextOptionActive","React","createElement","ButtonWrapper","key","rightIcon","icon","leftIcon","active","rightFlat","leftFlat","preventClickAnimation","ariaLabel","tooltipContent","cx","styles","button","optionText","_defineProperty","selected","buttonDisabled","startBorder","endBorder","activeButtonClassName","activeButton","text","useEffect","buttonGroup","getStyle","camelCase","getTestId","ComponentDefaultTestId","BUTTON_GROUP","ComponentVibeId","role","buttonsContainer","subText","subTextContainer","sizes","Button","kinds"],"mappings":"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"}