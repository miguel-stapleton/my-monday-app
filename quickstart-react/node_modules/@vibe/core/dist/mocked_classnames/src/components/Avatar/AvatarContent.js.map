{"version":3,"file":"AvatarContent.js","sources":["../../../../../src/components/Avatar/AvatarContent.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React from \"react\";\nimport { AvatarSize as AvatarSizeEnum, AvatarType as AvatarTypeEnum } from \"./AvatarConstants\";\nimport { AvatarSize, AvatarType } from \"./Avatar.types\";\nimport Icon from \"../Icon/Icon\";\nimport { SubIcon, VibeComponentProps, withStaticProps } from \"../../types\";\nimport styles from \"./AvatarContent.module.scss\";\n\nexport interface AvatarContentProps extends VibeComponentProps {\n  /**\n   * The image source when the type is set to `img`.\n   */\n  src?: string;\n  /**\n   * The type of content displayed inside the avatar.\n   */\n  type?: AvatarType;\n  /**\n   * The size of the avatar content.\n   */\n  size?: AvatarSize;\n  /**\n   * The ARIA role of the content.\n   */\n  role?: string;\n  /**\n   * The label of the content for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * The icon displayed when the type is set to `icon`.\n   */\n  icon?: SubIcon;\n  /**\n   * Class name applied to the text content.\n   */\n  textClassName?: string;\n  /**\n   * The text displayed when the type is set to `text`.\n   */\n  text?: string;\n}\n\nconst AvatarContent = ({\n  type = \"text\",\n  src,\n  icon,\n  text,\n  ariaLabel,\n  role,\n  size = \"large\",\n  textClassName = \"\",\n  id,\n  \"data-testid\": dataTestId\n}: AvatarContentProps) => {\n  const className = cx(\n    getStyle(styles, camelCase(\"content_\" + type)),\n    getStyle(styles, camelCase(\"content_\" + type + \"--\" + size))\n  );\n  switch (type) {\n    case \"img\":\n      return (\n        <img\n          role={role}\n          alt={ariaLabel}\n          src={src}\n          className={className}\n          id={id}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.AVATAR_CONTENT, id)}\n        />\n      );\n    case \"icon\":\n      return (\n        <Icon\n          icon={icon}\n          aria-label={ariaLabel}\n          // role={role}\n          className={className}\n          ariaHidden={false}\n          id={id}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.AVATAR_CONTENT, id)}\n        />\n      );\n    case \"text\":\n      return (\n        <span\n          aria-label={ariaLabel}\n          role={role}\n          className={cx(className, textClassName)}\n          id={id}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.AVATAR_CONTENT, id)}\n        >\n          {text}\n        </span>\n      );\n    default:\n      return null;\n  }\n};\n\ninterface AvatarContentStaticProps {\n  sizes: typeof AvatarSizeEnum;\n  types: typeof AvatarTypeEnum;\n}\n\nexport default withStaticProps<AvatarContentProps, AvatarContentStaticProps>(AvatarContent, {\n  sizes: AvatarSizeEnum,\n  types: AvatarTypeEnum\n});\n"],"names":["withStaticProps","_ref","_ref$type","type","src","icon","text","ariaLabel","role","_ref$size","size","_ref$textClassName","textClassName","id","dataTestId","className","cx","getStyle","styles","camelCase","React","createElement","alt","getTestId","ComponentDefaultTestId","AVATAR_CONTENT","Icon","ariaHidden","sizes","AvatarSizeEnum","types","AvatarTypeEnum"],"mappings":"ieA8CA,IA8DeA,EAAAA,GA9DO,SAAHC,GAWM,IAAAC,EAAAD,EAVvBE,KAAAA,OAAO,IAAHD,EAAG,OAAMA,EACbE,EAAGH,EAAHG,IACAC,EAAIJ,EAAJI,KACAC,EAAIL,EAAJK,KACAC,EAASN,EAATM,UACAC,EAAIP,EAAJO,KAAIC,EAAAR,EACJS,KAAAA,OAAO,IAAHD,EAAG,QAAOA,EAAAE,EAAAV,EACdW,cAAAA,OAAgB,IAAHD,EAAG,GAAEA,EAClBE,EAAEZ,EAAFY,GACeC,EAAUb,EAAzB,eAEMc,EAAYC,EAChBC,EAASC,EAAQC,EAAU,WAAahB,IACxCc,EAASC,EAAQC,EAAU,WAAahB,EAAO,KAAOO,KAExD,OAAQP,GACN,IAAK,MACH,OACEiB,EAAAC,cAAA,MAAA,CACEb,KAAMA,EACNc,IAAKf,EACLH,IAAKA,EACLW,UAAWA,EACXF,GAAIA,EACS,cAAAC,GAAcS,EAAUC,EAAuBC,eAAgBZ,KAGlF,IAAK,OACH,OACEO,gBAACM,EAAI,CACHrB,KAAMA,eACME,EAEZQ,UAAWA,EACXY,YAAY,EACZd,GAAIA,EAAE,cACOC,GAAcS,EAAUC,EAAuBC,eAAgBZ,KAGlF,IAAK,OACH,OACEO,EAAAC,cAAA,OAAA,CAAA,aACcd,EACZC,KAAMA,EACNO,UAAWC,EAAGD,EAAWH,GACzBC,GAAIA,EACS,cAAAC,GAAcS,EAAUC,EAAuBC,eAAgBZ,IAE3EP,GAGP,QACE,OAAO,KAEb,GAO4F,CAC1FsB,MAAOC,EACPC,MAAOC"}