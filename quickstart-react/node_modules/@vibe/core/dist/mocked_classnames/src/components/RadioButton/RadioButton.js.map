{"version":3,"file":"RadioButton.js","sources":["../../../../../src/components/RadioButton/RadioButton.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { forwardRef, useCallback, useMemo, useRef } from \"react\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Clickable from \"../Clickable/Clickable\";\nimport Text from \"../Text/Text\";\nimport { VibeComponentProps } from \"../../types\";\nimport Tooltip from \"../Tooltip/Tooltip\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport styles from \"./RadioButton.module.scss\";\n\nexport interface RadioButtonProps extends VibeComponentProps {\n  /**\n   * Class name applied to the label text.\n   */\n  labelClassName?: string;\n  /**\n   * Class name applied to the radio button element.\n   */\n  radioButtonClassName?: string;\n  /**\n   * The label text displayed next to the radio button.\n   */\n  text?: string;\n  /**\n   * The value associated with the radio button.\n   */\n  value?: string;\n  /**\n   * The name of the radio button group.\n   */\n  name?: string;\n  /**\n   * If true, the radio button automatically receives focus on mount.\n   */\n  autoFocus?: boolean;\n  /**\n   * If true, the radio button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The reason why the radio button is disabled, displayed in a tooltip.\n   */\n  disabledReason?: string;\n  /**\n   * If true, the radio button is checked by default.\n   */\n  defaultChecked?: boolean;\n  /**\n   * The child elements inside the radio button.\n   */\n  children?: React.ReactNode;\n  /**\n   * Callback fired when the radio button selection changes.\n   */\n  onSelect?: (event: React.ChangeEvent<HTMLInputElement | null>) => void;\n  /**\n   * If provided, controls the checked state of the radio button.\n   */\n  checked?: boolean;\n  /**\n   * If true, clicking on children will trigger selection.\n   */\n  retainChildClick?: boolean;\n  /**\n   * The tab index applied to the children.\n   */\n  childrenTabIndex?: string;\n  /**\n   * If true, disables the label animation.\n   */\n  noLabelAnimation?: boolean;\n}\n\nconst RadioButton = forwardRef(\n  (\n    {\n      className,\n      text = \"\",\n      value = \"\",\n      name = \"\",\n      /**\n       * Radio button label class name\n       */\n      labelClassName,\n      /**\n       * Radio button marker class name\n       */\n      radioButtonClassName,\n      disabled = false,\n      autoFocus,\n      disabledReason,\n      defaultChecked = false,\n      children,\n      onSelect,\n      checked,\n      retainChildClick = true,\n      childrenTabIndex = \"0\",\n      noLabelAnimation = false,\n      id,\n      \"data-testid\": dataTestId\n    }: RadioButtonProps,\n    ref: React.ForwardedRef<HTMLInputElement>\n  ) => {\n    const inputRef = useRef<HTMLInputElement | null>();\n    const mergedRef = useMergeRef(ref, inputRef);\n\n    const onChildClick = useCallback(() => {\n      if (disabled || !retainChildClick) return;\n      if (inputRef.current) {\n        inputRef.current.checked = true;\n      }\n      if (onSelect) {\n        onSelect(null);\n      }\n    }, [onSelect, inputRef, disabled, retainChildClick]);\n\n    const checkedProps = useMemo(() => {\n      if (checked !== undefined) {\n        return { checked };\n      }\n      return { defaultChecked };\n    }, [checked, defaultChecked]);\n\n    const tooltipContent = disabled ? disabledReason : null;\n\n    return (\n      <Tooltip content={tooltipContent}>\n        <label\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.RADIO_BUTTON, id)}\n          className={cx(styles.radioButton, className, {\n            [styles.disabled]: disabled,\n            disabled: disabled\n          })}\n        >\n          <span className={cx(styles.inputContainer)}>\n            <input\n              className={cx(styles.input)}\n              type=\"radio\"\n              value={value}\n              name={name}\n              autoFocus={autoFocus}\n              disabled={disabled}\n              {...checkedProps}\n              onChange={onSelect}\n              ref={mergedRef}\n            />\n            <span\n              data-testid={getTestId(ComponentDefaultTestId.RADIO_BUTTON_CONTROL, id)}\n              className={cx(styles.control, radioButtonClassName, {\n                [styles.labelAnimation]: !noLabelAnimation\n              })}\n            />\n          </span>\n          {text && (\n            <Text\n              element=\"span\"\n              type=\"text2\"\n              className={labelClassName}\n              data-testid={getTestId(ComponentDefaultTestId.RADIO_BUTTON_LABEL, id)}\n            >\n              {text}\n            </Text>\n          )}\n          {children && (\n            <Clickable onClick={onChildClick} tabIndex={childrenTabIndex}>\n              {children}\n            </Clickable>\n          )}\n        </label>\n      </Tooltip>\n    );\n  }\n);\n\nexport default RadioButton;\n"],"names":["RadioButton","forwardRef","_ref","ref","className","_ref$text","text","_ref$value","value","_ref$name","name","labelClassName","radioButtonClassName","_ref$disabled","disabled","autoFocus","disabledReason","_ref$defaultChecked","defaultChecked","children","onSelect","checked","_ref$retainChildClick","retainChildClick","_ref$childrenTabIndex","childrenTabIndex","_ref$noLabelAnimation","noLabelAnimation","id","dataTestId","inputRef","useRef","mergedRef","useMergeRef","onChildClick","useCallback","current","checkedProps","useMemo","undefined","React","createElement","Tooltip","content","getTestId","ComponentDefaultTestId","RADIO_BUTTON","cx","styles","radioButton","_defineProperty","inputContainer","Object","assign","input","type","onChange","RADIO_BUTTON_CONTROL","control","labelAnimation","Text","element","RADIO_BUTTON_LABEL","Clickable","onClick","tabIndex"],"mappings":"4cAyEMA,IAAAA,EAAcC,GAClB,SAAAC,EA2BEC,GACE,IA1BAC,EAASF,EAATE,UAASC,EAAAH,EACTI,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EAAAE,EAAAL,EACTM,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EAAAE,EAAAP,EACVQ,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EAITE,EAAcT,EAAdS,eAIAC,EAAoBV,EAApBU,qBAAoBC,EAAAX,EACpBY,SAAAA,OAAW,IAAHD,GAAQA,EAChBE,EAASb,EAATa,UACAC,EAAcd,EAAdc,eAAcC,EAAAf,EACdgB,eAAAA,OAAiB,IAAHD,GAAQA,EACtBE,EAAQjB,EAARiB,SACAC,EAAQlB,EAARkB,SACAC,EAAOnB,EAAPmB,QAAOC,EAAApB,EACPqB,iBAAAA,OAAmB,IAAHD,GAAOA,EAAAE,EAAAtB,EACvBuB,iBAAAA,OAAmB,IAAHD,EAAG,IAAGA,EAAAE,EAAAxB,EACtByB,iBAAAA,OAAmB,IAAHD,GAAQA,EACxBE,EAAE1B,EAAF0B,GACeC,EAAU3B,EAAzB,eAII4B,EAAWC,IACXC,EAAYC,EAAY9B,EAAK2B,GAE7BI,EAAeC,GAAY,YAC3BrB,GAAaS,IACbO,EAASM,UACXN,EAASM,QAAQf,SAAU,GAEzBD,GACFA,EAAS,MAEZ,GAAE,CAACA,EAAUU,EAAUhB,EAAUS,IAE5Bc,EAAeC,GAAQ,WAC3B,YAAgBC,IAAZlB,EACK,CAAEA,QAAAA,GAEJ,CAAEH,eAAAA,EACX,GAAG,CAACG,EAASH,IAIb,OACEsB,EAACC,cAAAC,EAAQ,CAAAC,QAHY7B,EAAWE,EAAiB,MAI/CwB,EACeC,cAAA,QAAA,CAAA,cAAAZ,GAAce,EAAUC,EAAuBC,aAAclB,GAC1ExB,UAAW2C,EAAGC,EAAOC,YAAa7C,EAAS8C,EAAAA,EAAA,CAAA,EACxCF,EAAOlC,SAAWA,GAAQ,WACjBA,KAGZ0B,EAAAC,cAAA,OAAA,CAAMrC,UAAW2C,EAAGC,EAAOG,iBACzBX,EAAAC,cAAA,QAAAW,OAAAC,OAAA,CACEjD,UAAW2C,EAAGC,EAAOM,OACrBC,KAAK,QACL/C,MAAOA,EACPE,KAAMA,EACNK,UAAWA,EACXD,SAAUA,GACNuB,EAAY,CAChBmB,SAAUpC,EACVjB,IAAK6B,KAEPQ,EAAAC,cAAA,OAAA,CAAA,cACeG,EAAUC,EAAuBY,qBAAsB7B,GACpExB,UAAW2C,EAAGC,EAAOU,QAAS9C,EAAoBsC,KAC/CF,EAAOW,gBAAkBhC,OAI/BrB,GACCkC,EAACC,cAAAmB,EACC,CAAAC,QAAQ,OACRN,KAAK,QACLnD,UAAWO,EACE,cAAAiC,EAAUC,EAAuBiB,mBAAoBlC,IAEjEtB,GAGJa,GACCqB,EAAAC,cAACsB,EAAU,CAAAC,QAAS9B,EAAc+B,SAAUxC,GACzCN,IAMb"}