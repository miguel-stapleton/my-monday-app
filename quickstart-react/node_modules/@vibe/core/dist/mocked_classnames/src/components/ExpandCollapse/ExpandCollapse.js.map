{"version":3,"file":"ExpandCollapse.js","sources":["../../../../../src/components/ExpandCollapse/ExpandCollapse.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { FC, forwardRef, ReactElement, useCallback, useRef, useState } from \"react\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Icon from \"../Icon/Icon\";\nimport Text from \"../Text/Text\";\nimport { DropdownChevronDown } from \"@vibe/icons\";\nimport { VibeComponentProps, ElementContent } from \"../../types\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport styles from \"./ExpandCollapse.module.scss\";\nimport { ExpandCollapseIconPosition } from \"./ExpandCollapse.types\";\n\nexport interface ExpandCollapseProps extends VibeComponentProps {\n  /**\n   * Custom renderer for the header component.\n   */\n  headerComponentRenderer?: () => ReactElement;\n  /**\n   * Class name applied to the header.\n   */\n  headerClassName?: string;\n  /**\n   * Class name applied to the content.\n   */\n  contentClassName?: string;\n  /**\n   * Class name applied to the root component.\n   */\n  componentClassName?: string;\n  /**\n   * The title displayed in the header.\n   */\n  title?: ElementContent;\n  /**\n   * The content inside the expandable section.\n   */\n  children?: ElementContent;\n  /**\n   * The size of the expand/collapse icon.\n   */\n  iconSize?: number | string;\n  /**\n   * The position of the icon.\n   */\n  iconPosition?: ExpandCollapseIconPosition;\n  /**\n   * If true, the section is open by default when rendered.\n   */\n  defaultOpenState?: boolean;\n  /**\n   * Controls the open state of the section.\n   */\n  open?: boolean;\n  /**\n   * Callback fired when the header is clicked.\n   */\n  onClick?: (event: React.MouseEvent) => void;\n  /**\n   * If true, hides the border around the component.\n   */\n  hideBorder?: boolean;\n  /**\n   * If true, captures the click event on the button.\n   */\n  captureOnClick?: boolean;\n}\n\nconst ExpandCollapse: FC<ExpandCollapseProps> = forwardRef(\n  (\n    {\n      children,\n      headerComponentRenderer = null,\n      title = \"\",\n      className,\n      defaultOpenState = false,\n      iconSize = 24,\n      iconPosition = \"right\",\n      id = \"\",\n      open,\n      onClick = null,\n      hideBorder = false,\n      headerClassName,\n      contentClassName,\n      componentClassName,\n      \"data-testid\": dataTestId,\n      captureOnClick = true\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [isOpen, setIsOpen] = useState(defaultOpenState);\n    const isExpanded = open === undefined ? isOpen : open;\n\n    const toggleExpand = () => {\n      setIsOpen(!isOpen);\n    };\n    const renderHeader = useCallback(() => {\n      return typeof title === \"string\" ? (\n        <Text type=\"text1\" className={cx(styles.headerContent)}>\n          {title}\n        </Text>\n      ) : (\n        title\n      );\n    }, [title]);\n\n    const renderIcon = () => (\n      <Icon\n        className={cx(styles.iconComponent, {\n          [styles.animateIconOpen]: isExpanded,\n          [styles.animateIconClose]: !isExpanded\n        })}\n        iconType=\"svg\"\n        icon={DropdownChevronDown}\n        iconSize={iconSize}\n      />\n    );\n\n    return (\n      <div\n        ref={mergedRef}\n        className={className}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.EXPAND_COLLAPSE, id)}\n      >\n        <div\n          className={cx(\n            styles.expandCollapse,\n            {\n              [styles.hideBorder]: hideBorder,\n              [styles.showBorder]: !hideBorder\n            },\n            componentClassName\n          )}\n        >\n          <button\n            type=\"button\"\n            className={cx(styles.header, styles.section, headerClassName, {\n              [styles.headerOpen]: isExpanded,\n              [styles.hideBorderBottom]: hideBorder,\n              [styles.leftIcon]: iconPosition === \"left\"\n            })}\n            onClickCapture={captureOnClick ? onClick || toggleExpand : undefined}\n            onClick={!captureOnClick ? onClick || toggleExpand : undefined}\n            aria-expanded={isExpanded}\n            aria-controls={`${id}-controls`}\n          >\n            {iconPosition === \"left\" && renderIcon()}\n            {typeof title !== \"string\" || title.length !== 0\n              ? renderHeader()\n              : headerComponentRenderer && headerComponentRenderer()}\n            {iconPosition === \"right\" && renderIcon()}\n          </button>\n          {isExpanded && (\n            <div\n              className={cx(styles.content, styles.section, contentClassName, {\n                [styles.animateExpandCollapseContent]: isExpanded\n              })}\n              id={`${id}-controls`}\n              role=\"region\"\n            >\n              {children}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default ExpandCollapse;\n"],"names":["ExpandCollapse","forwardRef","_ref","ref","children","_ref$headerComponentR","headerComponentRenderer","_ref$title","title","className","_ref$defaultOpenState","defaultOpenState","_ref$iconSize","iconSize","_ref$iconPosition","iconPosition","_ref$id","id","open","_ref$onClick","onClick","_ref$hideBorder","hideBorder","headerClassName","contentClassName","componentClassName","dataTestId","_ref$captureOnClick","captureOnClick","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","isExpanded","undefined","toggleExpand","renderHeader","useCallback","React","createElement","Text","type","cx","styles","headerContent","renderIcon","Icon","iconComponent","_defineProperty","animateIconOpen","animateIconClose","iconType","icon","DropdownChevronDown","getTestId","ComponentDefaultTestId","EXPAND_COLLAPSE","expandCollapse","showBorder","header","section","headerOpen","hideBorderBottom","leftIcon","onClickCapture","concat","length","content","animateExpandCollapseContent","role"],"mappings":"ofAkEMA,IAAAA,EAA0CC,GAC9C,SAAAC,EAmBEC,GACE,IAlBAC,EAAQF,EAARE,SAAQC,EAAAH,EACRI,wBAAAA,OAA0B,IAAHD,EAAG,KAAIA,EAAAE,EAAAL,EAC9BM,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EACVE,EAASP,EAATO,UAASC,EAAAR,EACTS,iBAAAA,OAAmB,IAAHD,GAAQA,EAAAE,EAAAV,EACxBW,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EAAAE,EAAAZ,EACba,aAAAA,OAAe,IAAHD,EAAG,QAAOA,EAAAE,EAAAd,EACtBe,GAAAA,OAAK,IAAHD,EAAG,GAAEA,EACPE,EAAIhB,EAAJgB,KAAIC,EAAAjB,EACJkB,QAAAA,OAAU,IAAHD,EAAG,KAAIA,EAAAE,EAAAnB,EACdoB,WAAAA,OAAa,IAAHD,GAAQA,EAClBE,EAAerB,EAAfqB,gBACAC,EAAgBtB,EAAhBsB,iBACAC,EAAkBvB,EAAlBuB,mBACeC,EAAUxB,EAAzB,eAAayB,EAAAzB,EACb0B,eAAAA,OAAiB,IAAHD,GAAOA,EAIjBE,EAAeC,EAAO,MACtBC,EAAYC,EAAY7B,EAAK0B,GAEnCI,EAA4BC,EAASvB,GAAiBwB,EAAAC,EAAAH,EAAA,GAA/CI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAClBI,OAAsBC,IAATtB,EAAqBmB,EAASnB,EAE3CuB,EAAe,WACnBH,GAAWD,IAEPK,EAAeC,GAAY,WAC/B,MAAwB,iBAAVnC,EACZoC,EAAAC,cAACC,EAAI,CAACC,KAAK,QAAQtC,UAAWuC,EAAGC,EAAOC,gBACrC1C,GAGHA,CAEJ,GAAG,CAACA,IAEE2C,EAAa,WAAH,OACdP,EAACC,cAAAO,EACC,CAAA3C,UAAWuC,EAAGC,EAAOI,cAAaC,EAAAA,EAC/BL,CAAAA,EAAAA,EAAOM,gBAAkBhB,GACzBU,EAAOO,kBAAoBjB,IAE9BkB,SAAS,MACTC,KAAMC,EACN9C,SAAUA,KAId,OACE+B,uBACEzC,IAAK4B,EACLtB,UAAWA,EACXQ,GAAIA,EAAE,cACOS,GAAckC,EAAUC,EAAuBC,gBAAiB7C,IAE7E2B,EAAAC,cAAA,MAAA,CACEpC,UAAWuC,EACTC,EAAOc,eAAcT,EAAAA,EAElBL,GAAAA,EAAO3B,WAAaA,GACpB2B,EAAOe,YAAc1C,GAExBG,IAGFmB,EAAAC,cAAA,SAAA,CACEE,KAAK,SACLtC,UAAWuC,EAAGC,EAAOgB,OAAQhB,EAAOiB,QAAS3C,EAAe+B,EAAAA,EAAAA,EAAA,CAAA,EACzDL,EAAOkB,WAAa5B,GACpBU,EAAOmB,iBAAmB9C,GAC1B2B,EAAOoB,SAA4B,SAAjBtD,IAErBuD,eAAgB1C,EAAiBR,GAAWqB,OAAeD,EAC3DpB,QAAUQ,OAA2CY,EAA1BpB,GAAWqB,EACvB,gBAAAF,EACA,gBAAA,GAAAgC,OAAGtD,EAAE,cAEF,SAAjBF,GAA2BoC,IACV,iBAAV3C,GAAuC,IAAjBA,EAAMgE,OAChC9B,IACApC,GAA2BA,IACb,UAAjBS,GAA4BoC,KAE9BZ,GACCK,EAAAC,cAAA,MAAA,CACEpC,UAAWuC,EAAGC,EAAOwB,QAASxB,EAAOiB,QAAS1C,EAAgB8B,EAC3DL,CAAAA,EAAAA,EAAOyB,6BAA+BnC,IAEzCtB,GAAEsD,GAAAA,OAAKtD,EAAa,aACpB0D,KAAK,UAEJvE,IAMb"}