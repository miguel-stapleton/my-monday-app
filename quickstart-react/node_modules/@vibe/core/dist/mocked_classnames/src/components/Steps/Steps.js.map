{"version":3,"file":"Steps.js","sources":["../../../../../src/components/Steps/Steps.tsx"],"sourcesContent":["import React, { forwardRef, ReactElement, useRef } from \"react\";\nimport cx from \"classnames\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { StepsHeader } from \"./StepsHeader\";\nimport { StepsColor as StepsColorEnum, StepsType as StepsTypeEnum } from \"./StepsConstants\";\nimport { StepsColor, StepsType } from \"./Steps.types\";\nimport { ButtonProps } from \"../Button\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { withStaticProps, VibeComponentProps } from \"../../types\";\nimport styles from \"./Steps.module.scss\";\n\nexport interface StepsProps extends VibeComponentProps {\n  /**\n   * The index of the currently active step.\n   */\n  activeStepIndex?: number;\n  /**\n   * Callback fired when the active step changes.\n   */\n  onChangeActiveStep?: (e: React.MouseEvent, stepIndex: number) => void;\n  /**\n   * If true, hides the navigation buttons.\n   */\n  areNavigationButtonsHidden?: boolean;\n  /**\n   * The list of steps in the steps component.\n   */\n  steps?: ReactElement[];\n  /**\n   * The visual style of the steps component.\n   */\n  type?: StepsType;\n  /**\n   * The color theme of the steps component.\n   */\n  color?: StepsColor;\n  /**\n   * If true, the content is displayed above the step navigation.\n   */\n  isContentOnTop?: boolean;\n  /**\n   * If true, hides the icons in the navigation buttons.\n   */\n  areButtonsIconsHidden?: boolean;\n  /**\n   * Props applied to the back button.\n   */\n  backButtonProps?: Partial<ButtonProps>;\n  /**\n   * Props applied to the next button.\n   */\n  nextButtonProps?: Partial<ButtonProps>;\n  /**\n   * Props applied to the finish button.\n   */\n  finishButtonProps?: Partial<ButtonProps>;\n  /**\n   * Callback fired when the finish button is clicked.\n   */\n  onFinish?: (e: React.MouseEvent | React.KeyboardEvent) => void;\n}\n\nconst Steps = forwardRef(\n  (\n    {\n      className,\n      id,\n      \"data-testid\": dataTestId,\n      steps = [],\n      activeStepIndex = 0,\n      type = \"gallery\",\n      onChangeActiveStep = NOOP,\n      onFinish,\n      color,\n      areNavigationButtonsHidden = false,\n      isContentOnTop = false,\n      backButtonProps = {},\n      nextButtonProps = {},\n      finishButtonProps = {},\n      areButtonsIconsHidden = false\n    }: StepsProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    return (\n      <div\n        ref={mergedRef}\n        className={cx(styles.steps, className)}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.STEPS, id)}\n      >\n        {isContentOnTop && steps[activeStepIndex]}\n        <StepsHeader\n          onChangeActiveStep={onChangeActiveStep}\n          type={type}\n          activeStepIndex={activeStepIndex}\n          stepsCount={steps.length}\n          areNavigationButtonsHidden={areNavigationButtonsHidden}\n          color={color}\n          backButtonProps={backButtonProps}\n          nextButtonProps={nextButtonProps}\n          finishButtonProps={finishButtonProps}\n          areButtonsIconsHidden={areButtonsIconsHidden}\n          onFinish={onFinish}\n          className={cx({\n            [styles.contentOnTop]: isContentOnTop,\n            [styles.contentOnBottom]: !isContentOnTop\n          })}\n        />\n        {!isContentOnTop && steps[activeStepIndex]}\n      </div>\n    );\n  }\n);\n\ninterface StepsStaticProps {\n  types: typeof StepsTypeEnum;\n  colors: typeof StepsColorEnum;\n}\n\nexport default withStaticProps<StepsProps, StepsStaticProps>(Steps, {\n  types: StepsTypeEnum,\n  colors: StepsColorEnum\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","id","dataTestId","_ref$steps","steps","_ref$activeStepIndex","activeStepIndex","_ref$type","type","_ref$onChangeActiveSt","onChangeActiveStep","NOOP","onFinish","color","_ref$areNavigationBut","areNavigationButtonsHidden","_ref$isContentOnTop","isContentOnTop","_ref$backButtonProps","backButtonProps","_ref$nextButtonProps","nextButtonProps","_ref$finishButtonProp","finishButtonProps","_ref$areButtonsIconsH","areButtonsIconsHidden","componentRef","useRef","mergedRef","useMergeRef","React","createElement","cx","styles","getTestId","ComponentDefaultTestId","STEPS","StepsHeader","stepsCount","length","_defineProperty","contentOnTop","contentOnBottom","types","StepsTypeEnum","colors","StepsColorEnum"],"mappings":"ukBA+DA,IA4DeA,EAAAA,EA5DDC,GACZ,SAAAC,EAkBEC,GACE,IAjBAC,EAASF,EAATE,UACAC,EAAEH,EAAFG,GACeC,EAAUJ,EAAzB,eAAaK,EAAAL,EACbM,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EAAAE,EAAAP,EACVQ,gBAAAA,OAAkB,IAAHD,EAAG,EAACA,EAAAE,EAAAT,EACnBU,KAAAA,OAAO,IAAHD,EAAG,UAASA,EAAAE,EAAAX,EAChBY,mBAAAA,OAAqBC,IAAHF,EAAGE,EAAIF,EACzBG,EAAQd,EAARc,SACAC,EAAKf,EAALe,MAAKC,EAAAhB,EACLiB,2BAAAA,OAA6B,IAAHD,GAAQA,EAAAE,EAAAlB,EAClCmB,eAAAA,OAAiB,IAAHD,GAAQA,EAAAE,EAAApB,EACtBqB,gBAAAA,OAAe,IAAAD,EAAG,CAAE,EAAAA,EAAAE,EAAAtB,EACpBuB,gBAAAA,OAAe,IAAAD,EAAG,CAAE,EAAAA,EAAAE,EAAAxB,EACpByB,kBAAAA,OAAiB,IAAAD,EAAG,CAAE,EAAAA,EAAAE,EAAA1B,EACtB2B,sBAAAA,OAAwB,IAAHD,GAAQA,EAIzBE,EAAeC,EAAO,MACtBC,EAAYC,EAAY9B,EAAK2B,GAEnC,OACEI,EAAAC,cAAA,MAAA,CACEhC,IAAK6B,EACL5B,UAAWgC,EAAGC,EAAO7B,MAAOJ,GAC5BC,GAAIA,EAAE,cACOC,GAAcgC,EAAUC,EAAuBC,MAAOnC,IAElEgB,GAAkBb,EAAME,GACzBwB,EAACC,cAAAM,GACC3B,mBAAoBA,EACpBF,KAAMA,EACNF,gBAAiBA,EACjBgC,WAAYlC,EAAMmC,OAClBxB,2BAA4BA,EAC5BF,MAAOA,EACPM,gBAAiBA,EACjBE,gBAAiBA,EACjBE,kBAAmBA,EACnBE,sBAAuBA,EACvBb,SAAUA,EACVZ,UAAWgC,EAAEQ,EAAAA,KACVP,EAAOQ,aAAexB,GACtBgB,EAAOS,iBAAmBzB,OAG7BA,GAAkBb,EAAME,GAGhC,IAQkE,CAClEqC,MAAOC,EACPC,OAAQC"}