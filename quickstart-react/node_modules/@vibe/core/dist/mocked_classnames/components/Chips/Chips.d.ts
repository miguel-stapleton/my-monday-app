import React from "react";
import { ElementAllowedColor } from "../../types/Colors";
import { AvatarType as AvatarTypeEnum } from "../Avatar/AvatarConstants";
import { AvatarType } from "../Avatar";
import { ElementContent, SubIcon, VibeComponentProps } from "../../types";
export interface ChipsProps extends VibeComponentProps {
    /**
     * The text or content displayed inside the chip.
     */
    label?: ElementContent;
    /**
     * If true, the chip is disabled.
     */
    disabled?: boolean;
    /**
     * If true, the chip is read-only and cannot be deleted.
     */
    readOnly?: boolean;
    /**
     * A React element displayed on the right side.
     */
    rightRenderer?: ElementContent;
    /**
     * A React element displayed on the left side.
     */
    leftRenderer?: ElementContent;
    /**
     * Icon displayed on the right side.
     */
    rightIcon?: SubIcon;
    /**
     * Icon displayed on the left side.
     */
    leftIcon?: SubIcon;
    /**
     * Image URL or text for an avatar displayed on the right.
     */
    rightAvatar?: string;
    /**
     * The type of avatar displayed on the right.
     */
    rightAvatarType?: AvatarType;
    /**
     * Image URL or text for an avatar displayed on the left.
     */
    leftAvatar?: string;
    /**
     * The type of avatar displayed on the left.
     */
    leftAvatarType?: AvatarType;
    /**
     * Class name applied to left or right icons.
     */
    iconClassName?: string;
    /**
     * Class name applied to left or right avatars.
     */
    avatarClassName?: string;
    /**
     * The background color of the chip.
     */
    color?: Exclude<ElementAllowedColor, "dark_indigo" | "blackish">;
    /**
     * The size of the icons inside the chip.
     */
    iconSize?: number | string;
    /**
     * Callback fired when the chip is deleted.
     */
    onDelete?: (id: string, event: React.MouseEvent<HTMLSpanElement>) => void;
    /**
     * If true, disables the chip's entry animation.
     */
    noAnimation?: boolean;
    /**
     * If true, allows the user to select text inside the chip.
     */
    allowTextSelection?: boolean;
    /**
     * Callback fired when the mouse button is pressed on the chip.
     */
    onMouseDown?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    /**
     * Callback fired when the chip is clicked.
     */
    onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    /**
     * The label of the chip for accessibility.
     */
    ariaLabel?: string;
    /**
     * If true, disables all click behaviors.
     */
    disableClickableBehavior?: boolean;
    /**
     * If true, displays a border around the chip.
     */
    showBorder?: boolean;
    /**
     * The label for the close button.
     */
    closeButtonAriaLabel?: string;
}
declare const _default: (React.FC<ChipsProps> | React.ForwardRefExoticComponent<ChipsProps & React.RefAttributes<HTMLElement>>) & {
    colors: {
        POSITIVE: import("../../utils/colors-vars-map").StateSelectedHoverColor.POSITIVE;
        NEGATIVE: import("../../utils/colors-vars-map").StateSelectedHoverColor.NEGATIVE;
        PRIMARY: import("../../utils/colors-vars-map").StateSelectedHoverColor.PRIMARY;
        WARNING: import("../../utils/colors-vars-map").StateSelectedColor.WARNING;
        GRASS_GREEN: import("../../utils/colors-vars-map").ContentColorByName.GRASS_GREEN;
        DONE_GREEN: import("../../utils/colors-vars-map").ContentColorByName.DONE_GREEN;
        BRIGHT_GREEN: import("../../utils/colors-vars-map").ContentColorByName.BRIGHT_GREEN;
        SALADISH: import("../../utils/colors-vars-map").ContentColorByName.SALADISH;
        EGG_YOLK: import("../../utils/colors-vars-map").ContentColorByName.EGG_YOLK;
        WORKING_ORANGE: import("../../utils/colors-vars-map").ContentColorByName.WORKING_ORANGE;
        DARK_ORANGE: import("../../utils/colors-vars-map").ContentColorByName.DARK_ORANGE;
        PEACH: import("../../utils/colors-vars-map").ContentColorByName.PEACH;
        SUNSET: import("../../utils/colors-vars-map").ContentColorByName.SUNSET;
        STUCK_RED: import("../../utils/colors-vars-map").ContentColorByName.STUCK_RED;
        DARK_RED: import("../../utils/colors-vars-map").ContentColorByName.DARK_RED;
        SOFIA_PINK: import("../../utils/colors-vars-map").ContentColorByName.SOFIA_PINK;
        LIPSTICK: import("../../utils/colors-vars-map").ContentColorByName.LIPSTICK;
        BUBBLE: import("../../utils/colors-vars-map").ContentColorByName.BUBBLE;
        PURPLE: import("../../utils/colors-vars-map").ContentColorByName.PURPLE;
        DARK_PURPLE: import("../../utils/colors-vars-map").ContentColorByName.DARK_PURPLE;
        BERRY: import("../../utils/colors-vars-map").ContentColorByName.BERRY;
        DARK_INDIGO: import("../../utils/colors-vars-map").ContentColorByName.DARK_INDIGO;
        INDIGO: import("../../utils/colors-vars-map").ContentColorByName.INDIGO;
        NAVY: import("../../utils/colors-vars-map").ContentColorByName.NAVY;
        BRIGHT_BLUE: import("../../utils/colors-vars-map").ContentColorByName.BRIGHT_BLUE;
        DARK_BLUE: import("../../utils/colors-vars-map").ContentColorByName.DARK_BLUE;
        AQUAMARINE: import("../../utils/colors-vars-map").ContentColorByName.AQUAMARINE;
        CHILI_BLUE: import("../../utils/colors-vars-map").ContentColorByName.CHILI_BLUE;
        RIVER: import("../../utils/colors-vars-map").ContentColorByName.RIVER;
        WINTER: import("../../utils/colors-vars-map").ContentColorByName.WINTER;
        EXPLOSIVE: import("../../utils/colors-vars-map").ContentColorByName.EXPLOSIVE;
        AMERICAN_GRAY: import("../../utils/colors-vars-map").ContentColorByName.AMERICAN_GRAY;
        BLACKISH: import("../../utils/colors-vars-map").ContentColorByName.BLACKISH;
        BROWN: import("../../utils/colors-vars-map").ContentColorByName.BROWN;
        ORCHID: import("../../utils/colors-vars-map").ContentColorByName.ORCHID;
        TAN: import("../../utils/colors-vars-map").ContentColorByName.TAN;
        SKY: import("../../utils/colors-vars-map").ContentColorByName.SKY;
        COFFEE: import("../../utils/colors-vars-map").ContentColorByName.COFFEE;
        ROYAL: import("../../utils/colors-vars-map").ContentColorByName.ROYAL;
        TEAL: import("../../utils/colors-vars-map").ContentColorByName.TEAL;
        LAVENDER: import("../../utils/colors-vars-map").ContentColorByName.LAVENDER;
        STEEL: import("../../utils/colors-vars-map").ContentColorByName.STEEL;
        LILAC: import("../../utils/colors-vars-map").ContentColorByName.LILAC;
        PECAN: import("../../utils/colors-vars-map").ContentColorByName.PECAN;
    };
    avatarTypes: typeof AvatarTypeEnum;
};
export default _default;
