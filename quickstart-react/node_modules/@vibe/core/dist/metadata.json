[
  {
    "filePath": "src/components/Accordion/Accordion/Accordion.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Accordion",
      "AccordionProps"
    ],
    "displayName": "Accordion",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of the accordion (`AccordionItem` components).",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Accordion/Accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Accordion/Accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"
        }
      },
      "allowMultiple": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, multiple accordion items can be expanded at the same time.",
        "name": "allowMultiple",
        "parent": {
          "fileName": "core/src/components/Accordion/Accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Accordion/Accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultIndex": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "An array of initially expanded item indexes.",
        "name": "defaultIndex",
        "parent": {
          "fileName": "core/src/components/Accordion/Accordion/Accordion.tsx",
          "name": "AccordionProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Accordion/Accordion/Accordion.tsx",
            "name": "AccordionProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number[]"
        }
      },
      "className": {
        "defaultValue": {
          "value": ""
        },
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Accordion } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/AlertBanner/AlertBannerButton/AlertBannerButton.tsx",
    "aggregator": "core",
    "symbols": [
      "default as AlertBannerButton",
      "AlertBannerButtonProps"
    ],
    "displayName": "AlertBannerButton",
    "description": "",
    "props": {
      "isDarkBackground": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, the button is displayed on a dark background.",
        "name": "isDarkBackground",
        "parent": {
          "fileName": "core/src/components/AlertBanner/AlertBannerButton/AlertBannerButton.tsx",
          "name": "AlertBannerButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/AlertBanner/AlertBannerButton/AlertBannerButton.tsx",
            "name": "AlertBannerButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "Custom class names to pass to the component",
        "name": "className",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeButtonClassName": {
        "defaultValue": null,
        "description": "",
        "name": "activeButtonClassName",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "kind": {
        "defaultValue": null,
        "description": "The button's kind",
        "name": "kind",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ButtonType",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"tertiary\""
            }
          ]
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback function to run when the button is clicked",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent<HTMLButtonElement>) => void"
        }
      },
      "onMouseDown": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDown",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent<HTMLButtonElement>) => void"
        }
      },
      "blurOnMouseUp": {
        "defaultValue": null,
        "description": "Blur on button click",
        "name": "blurOnMouseUp",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the button - for form submit usages",
        "name": "name",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The button's size",
        "name": "size",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ButtonSize",
          "value": [
            {
              "value": "\"xxs\""
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"large\""
            }
          ]
        }
      },
      "color": {
        "defaultValue": null,
        "description": "The button's color",
        "name": "color",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ButtonColor",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"positive\""
            },
            {
              "value": "\"negative\""
            },
            {
              "value": "\"inverted\""
            },
            {
              "value": "\"on-primary-color\""
            },
            {
              "value": "\"on-inverted-background\""
            },
            {
              "value": "\"brand\""
            },
            {
              "value": "\"fixed-light\""
            },
            {
              "value": "\"fixed-dark\""
            }
          ]
        }
      },
      "type": {
        "defaultValue": null,
        "description": "The button's type",
        "name": "type",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ButtonInputType",
          "value": [
            {
              "value": "\"button\""
            },
            {
              "value": "\"submit\""
            },
            {
              "value": "\"reset\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the button should be disabled or not",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightIcon": {
        "defaultValue": null,
        "description": "Icon to place on the right",
        "name": "rightIcon",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "leftIcon": {
        "defaultValue": null,
        "description": "Icon to place on the left",
        "name": "leftIcon",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "success": {
        "defaultValue": null,
        "description": "the success props are used when you have async action and wants to display a success message",
        "name": "success",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "successIcon": {
        "defaultValue": null,
        "description": "Success icon name",
        "name": "successIcon",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "successText": {
        "defaultValue": null,
        "description": "Success text",
        "name": "successText",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "loading boolean which switches the text to a loader",
        "name": "loading",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loaderClassName": {
        "defaultValue": null,
        "description": "className which is applied to loader container *",
        "name": "loaderClassName",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "active": {
        "defaultValue": null,
        "description": "displays the active state",
        "name": "active",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to pass to the button",
        "name": "id",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "marginRight": {
        "defaultValue": null,
        "description": "adds 8px margin to the right",
        "name": "marginRight",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "marginLeft": {
        "defaultValue": {
          "value": "false"
        },
        "description": "adds 8px margin to the left",
        "name": "marginLeft",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaLabeledBy": {
        "defaultValue": null,
        "description": "element id to describe the button accordingly",
        "name": "ariaLabeledBy",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "aria label to provide important when providing only Icon",
        "name": "ariaLabel",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaHasPopup": {
        "defaultValue": null,
        "description": "aria for a button popup",
        "name": "ariaHasPopup",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.HTMLProps<HTMLButtonElement>"
        }
      },
      "ariaExpanded": {
        "defaultValue": null,
        "description": "aria to be set if the popup is open",
        "name": "ariaExpanded",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaControls": {
        "defaultValue": null,
        "description": "aria controls - receives id for the controlled region",
        "name": "ariaControls",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-describedby",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-hidden": {
        "defaultValue": null,
        "description": "aria to be used for screen reader to know if the button is hidden",
        "name": "aria-hidden",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-pressed": {
        "defaultValue": null,
        "description": "Indicates the current \"pressed\" state of toggle buttons",
        "name": "aria-pressed",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"mixed\""
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "On Button Focus callback",
        "name": "onFocus",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.FocusEvent<HTMLButtonElement>) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "On Button Blur callback",
        "name": "onBlur",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.FocusEvent<HTMLButtonElement>) => void"
        }
      },
      "rightFlat": {
        "defaultValue": null,
        "description": "",
        "name": "rightFlat",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "leftFlat": {
        "defaultValue": null,
        "description": "",
        "name": "leftFlat",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "preventClickAnimation": {
        "defaultValue": null,
        "description": "",
        "name": "preventClickAnimation",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "noSidePadding": {
        "defaultValue": null,
        "description": "",
        "name": "noSidePadding",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultTextColorOnPrimaryColor": {
        "defaultValue": null,
        "description": "default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...)",
        "name": "defaultTextColorOnPrimaryColor",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "insetFocus": {
        "defaultValue": null,
        "description": "Change the focus indicator from around the button to within it",
        "name": "insetFocus",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "Specifies the tab order of an element",
        "name": "tabIndex",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    },
    "import": "import { AlertBannerButton } from \"@vibe/core\"",
    "parentComponent": "AlertBanner",
    "subComponents": []
  },
  {
    "filePath": "src/components/AlertBanner/AlertBannerLink/AlertBannerLink.tsx",
    "aggregator": "core",
    "symbols": [
      "default as AlertBannerLink",
      "AlertBannerLinkProps"
    ],
    "displayName": "AlertBannerLink",
    "description": "",
    "props": {
      "marginLeft": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, a left margin is applied to the link.",
        "name": "marginLeft",
        "parent": {
          "fileName": "core/src/components/AlertBanner/AlertBannerLink/AlertBannerLink.tsx",
          "name": "AlertBannerLinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/AlertBanner/AlertBannerLink/AlertBannerLink.tsx",
            "name": "AlertBannerLinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "textClassName": {
        "defaultValue": null,
        "description": "Class name applied to the link text.",
        "name": "textClassName",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "href": {
        "defaultValue": null,
        "description": "The URL the link points to.",
        "name": "href",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "text": {
        "defaultValue": null,
        "description": "The text content of the link.",
        "name": "text",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "Specifies the relationship between the current document and the linked resource.",
        "name": "rel",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when the link is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Specifies where to open the linked document.",
        "name": "target",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkTarget",
          "value": [
            {
              "value": "\"_blank\""
            },
            {
              "value": "\"_self\""
            },
            {
              "value": "\"_parent\""
            },
            {
              "value": "\"_top\""
            }
          ]
        }
      },
      "ariaLabelDescription": {
        "defaultValue": null,
        "description": "The ARIA label description for accessibility.",
        "name": "ariaLabelDescription",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaDescribedby": {
        "defaultValue": null,
        "description": "The ID of the element that describes this link.",
        "name": "ariaDescribedby",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabeledBy": {
        "defaultValue": null,
        "description": "The ID of the element labeling this link.",
        "name": "ariaLabeledBy",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon displayed next to the link text.",
        "name": "icon",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "iconPosition": {
        "defaultValue": null,
        "description": "The position of the icon relative to the text.",
        "name": "iconPosition",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkIconPosition",
          "value": [
            {
              "value": "\"start\""
            },
            {
              "value": "\"end\""
            }
          ]
        }
      },
      "disableNavigation": {
        "defaultValue": null,
        "description": "If true, disables navigation when the link is clicked.",
        "name": "disableNavigation",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inheritFontSize": {
        "defaultValue": null,
        "description": "If true, the link inherits the surrounding text's font size.",
        "name": "inheritFontSize",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inlineText": {
        "defaultValue": null,
        "description": "If true, the link is styled to fit within inline text content.",
        "name": "inlineText",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "The link's color style",
        "name": "color",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkColor",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"onPrimary\""
            },
            {
              "value": "\"onInverted\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { AlertBannerLink } from \"@vibe/core\"",
    "parentComponent": "AlertBanner",
    "subComponents": []
  },
  {
    "filePath": "src/components/AlertBanner/AlertBannerText/AlertBannerText.tsx",
    "aggregator": "core",
    "symbols": [
      "default as AlertBannerText",
      "AlertBannerTextProps"
    ],
    "displayName": "AlertBannerText",
    "description": "",
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text content displayed within the alert banner.",
        "name": "text",
        "parent": {
          "fileName": "core/src/components/AlertBanner/AlertBannerText/AlertBannerText.tsx",
          "name": "AlertBannerTextProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/AlertBanner/AlertBannerText/AlertBannerText.tsx",
            "name": "AlertBannerTextProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "marginLeft": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, a left margin is applied to the alert banner text.",
        "name": "marginLeft",
        "parent": {
          "fileName": "core/src/components/AlertBanner/AlertBannerText/AlertBannerText.tsx",
          "name": "AlertBannerTextProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/AlertBanner/AlertBannerText/AlertBannerText.tsx",
            "name": "AlertBannerTextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { AlertBannerText } from \"@vibe/core\"",
    "parentComponent": "AlertBanner",
    "subComponents": []
  },
  {
    "filePath": "src/components/AttentionBox/AttentionBoxLink/AttentionBoxLink.tsx",
    "aggregator": "core",
    "symbols": [
      "default as AttentionBoxLink",
      "AttentionBoxLinkProps"
    ],
    "displayName": "AttentionBoxLink",
    "description": "",
    "props": {
      "textClassName": {
        "defaultValue": null,
        "description": "Class name applied to the link text.",
        "name": "textClassName",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "href": {
        "defaultValue": null,
        "description": "The URL the link points to.",
        "name": "href",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "text": {
        "defaultValue": null,
        "description": "The text content of the link.",
        "name": "text",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "Specifies the relationship between the current document and the linked resource.",
        "name": "rel",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when the link is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "target": {
        "defaultValue": {
          "value": "_self"
        },
        "description": "Specifies where to open the linked document.",
        "name": "target",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkTarget",
          "value": [
            {
              "value": "\"_blank\""
            },
            {
              "value": "\"_self\""
            },
            {
              "value": "\"_parent\""
            },
            {
              "value": "\"_top\""
            }
          ]
        }
      },
      "ariaLabelDescription": {
        "defaultValue": null,
        "description": "The ARIA label description for accessibility.",
        "name": "ariaLabelDescription",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaDescribedby": {
        "defaultValue": null,
        "description": "The ID of the element that describes this link.",
        "name": "ariaDescribedby",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabeledBy": {
        "defaultValue": null,
        "description": "The ID of the element labeling this link.",
        "name": "ariaLabeledBy",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon displayed next to the link text.",
        "name": "icon",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "iconPosition": {
        "defaultValue": null,
        "description": "The position of the icon relative to the text.",
        "name": "iconPosition",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkIconPosition",
          "value": [
            {
              "value": "\"start\""
            },
            {
              "value": "\"end\""
            }
          ]
        }
      },
      "disableNavigation": {
        "defaultValue": null,
        "description": "If true, disables navigation when the link is clicked.",
        "name": "disableNavigation",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inheritFontSize": {
        "defaultValue": null,
        "description": "If true, the link inherits the surrounding text's font size.",
        "name": "inheritFontSize",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inlineText": {
        "defaultValue": null,
        "description": "If true, the link is styled to fit within inline text content.",
        "name": "inlineText",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "The link's color style",
        "name": "color",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkColor",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"onPrimary\""
            },
            {
              "value": "\"onInverted\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { AttentionBoxLink } from \"@vibe/core\"",
    "parentComponent": "AttentionBox",
    "subComponents": []
  },
  {
    "filePath": "src/components/BreadcrumbsBar/BreadcrumbMenu/BreadcrumbMenu.tsx",
    "aggregator": "core",
    "symbols": [
      "default as BreadcrumbMenu",
      "BreadcrumbMenuProps"
    ],
    "displayName": "BreadcrumbMenu",
    "description": "",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { BreadcrumbMenu } from \"@vibe/core\"",
    "parentComponent": "BreadcrumbsBar",
    "subComponents": []
  },
  {
    "filePath": "src/components/Checkbox/Checkbox.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Checkbox",
      "CheckBoxProps as CheckboxProps"
    ],
    "displayName": "Checkbox",
    "description": "",
    "props": {
      "checkboxClassName": {
        "defaultValue": null,
        "description": "Class name applied to the checkbox element.",
        "name": "checkboxClassName",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "labelClassName": {
        "defaultValue": null,
        "description": "Class name applied to the label element.",
        "name": "labelClassName",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "The label of the checkbox for accessibility.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "The content displayed next to the checkbox.",
        "name": "label",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "ariaLabelledBy": {
        "defaultValue": null,
        "description": "The ID of an element describing the checkbox.",
        "name": "ariaLabelledBy",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback fired when the checkbox value changes.",
        "name": "onChange",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "checked": {
        "defaultValue": null,
        "description": "If true, controls the checked state of the checkbox.",
        "name": "checked",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "indeterminate": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, displays an indeterminate state.",
        "name": "indeterminate",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "If true, the checkbox automatically receives focus.",
        "name": "autoFocus",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, the checkbox is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultChecked": {
        "defaultValue": null,
        "description": "The initial checked state of the checkbox.",
        "name": "defaultChecked",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": {
          "value": ""
        },
        "description": "The value submitted with the form when checked.",
        "name": "value",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": {
          "value": ""
        },
        "description": "The name of the checkbox, used for form submission.",
        "name": "name",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "The tab order of the checkbox.",
        "name": "tabIndex",
        "parent": {
          "fileName": "core/src/components/Checkbox/Checkbox.tsx",
          "name": "CheckBoxProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Checkbox/Checkbox.tsx",
            "name": "CheckBoxProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Checkbox } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Clickable/Clickable.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Clickable",
      "ClickableProps"
    ],
    "displayName": "Clickable",
    "description": "",
    "props": {
      "elementType": {
        "defaultValue": {
          "value": "div"
        },
        "description": "The HTML element or custom component used as the root.",
        "name": "elementType",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The content inside the clickable element.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "role": {
        "defaultValue": {
          "value": "button"
        },
        "description": "The ARIA role of the element.",
        "name": "role",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when the element is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "enableTextSelection": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, allows text selection inside the element.",
        "name": "enableTextSelection",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onMouseDown": {
        "defaultValue": null,
        "description": "Callback fired when the mouse button is pressed down on the element.",
        "name": "onMouseDown",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "onMouseEnter": {
        "defaultValue": null,
        "description": "Callback fired when the mouse enters the element.",
        "name": "onMouseEnter",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "onMouseLeave": {
        "defaultValue": null,
        "description": "Callback fired when the mouse leaves the element.",
        "name": "onMouseLeave",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "The label of the element for accessibility.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "If true, hides the element from assistive technologies.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaHasPopup": {
        "defaultValue": null,
        "description": "Indicates the presence of a popup associated with the element.",
        "name": "ariaHasPopup",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | boolean"
        }
      },
      "ariaExpanded": {
        "defaultValue": null,
        "description": "If true, indicates that the associated popup is open.",
        "name": "ariaExpanded",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "tabIndex": {
        "defaultValue": {
          "value": "0"
        },
        "description": "The tab order of the element.",
        "name": "tabIndex",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, the element is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Inline styles applied to the element.",
        "name": "style",
        "parent": {
          "fileName": "core/src/components/Clickable/Clickable.tsx",
          "name": "ClickableProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Clickable/Clickable.tsx",
            "name": "ClickableProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "className": {
        "defaultValue": {
          "value": ""
        },
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Clickable } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/DatePicker/DatePicker.tsx",
    "aggregator": "core",
    "symbols": [
      "default as DatePicker",
      "DatePickerProps"
    ],
    "displayName": "DatePicker",
    "description": "",
    "props": {
      "firstDayOfWeek": {
        "defaultValue": {
          "value": "1"
        },
        "description": "The first day of the week to display.",
        "name": "firstDayOfWeek",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "DayOfWeekShape",
          "value": [
            {
              "value": "0"
            },
            {
              "value": "1"
            },
            {
              "value": "2"
            },
            {
              "value": "3"
            },
            {
              "value": "4"
            },
            {
              "value": "5"
            },
            {
              "value": "6"
            }
          ]
        }
      },
      "date": {
        "defaultValue": null,
        "description": "The currently selected date.",
        "name": "date",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "moment.Moment"
        }
      },
      "endDate": {
        "defaultValue": null,
        "description": "The end date for range selection mode.",
        "name": "endDate",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "moment.Moment"
        }
      },
      "onPickDate": {
        "defaultValue": null,
        "description": "Callback fired when a date is selected.",
        "name": "onPickDate",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(date: any) => void"
        }
      },
      "hideNavigationKeys": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, hides the navigation buttons.",
        "name": "hideNavigationKeys",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "enableOutsideDays": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, allows selecting days outside the current month.",
        "name": "enableOutsideDays",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showWeekNumber": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, displays a column with week numbers.",
        "name": "showWeekNumber",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "daySize": {
        "defaultValue": {
          "value": "40"
        },
        "description": "The size of a single day cell.",
        "name": "daySize",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "shouldBlockDay": {
        "defaultValue": null,
        "description": "Function to determine if a specific day should be disabled.",
        "name": "shouldBlockDay",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(date: moment.Moment) => boolean"
        }
      },
      "range": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, enables date range selection mode.",
        "name": "range",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "numberOfMonths": {
        "defaultValue": {
          "value": "1"
        },
        "description": "The number of months displayed in the calendar.",
        "name": "numberOfMonths",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "shouldBlockYear": {
        "defaultValue": null,
        "description": "Function to determine if a specific year should be disabled.",
        "name": "shouldBlockYear",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(year: number) => boolean"
        }
      },
      "shouldBlockRange": {
        "defaultValue": null,
        "description": "Function to determine if a specific date range should be disabled.",
        "name": "shouldBlockRange",
        "parent": {
          "fileName": "core/src/components/DatePicker/DatePicker.tsx",
          "name": "DatePickerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/DatePicker/DatePicker.tsx",
            "name": "DatePickerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(date: moment.Moment) => boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { DatePicker } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Dialog/Dialog.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Dialog",
      "DialogProps",
      "DialogType",
      "DialogSize",
      "DialogPosition",
      "DialogTriggerEvent",
      "DialogAnimationType",
      "DialogOffset"
    ],
    "displayName": "Dialog",
    "description": "",
    "props": {
      "referenceWrapperClassName": {
        "defaultValue": null,
        "description": "Class name applied to the reference wrapper element.",
        "name": "referenceWrapperClassName",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "position": {
        "defaultValue": {
          "value": "top"
        },
        "description": "The placement of the dialog relative to the reference element.",
        "name": "position",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "DialogPosition",
          "value": [
            {
              "value": "\"top\""
            },
            {
              "value": "\"left\""
            },
            {
              "value": "\"left-start\""
            },
            {
              "value": "\"left-end\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"right-start\""
            },
            {
              "value": "\"right-end\""
            },
            {
              "value": "\"top-start\""
            },
            {
              "value": "\"top-end\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"bottom-start\""
            },
            {
              "value": "\"bottom-end\""
            }
          ]
        }
      },
      "modifiers": {
        "defaultValue": {
          "value": "[] as Modifier<any>[]"
        },
        "description": "Custom Popper.js modifiers.\nhttps://popper.js.org/docs/v2/modifiers/",
        "name": "modifiers",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(StrictModifier<any> | Partial<Modifier<any, object>>)[]"
        }
      },
      "startingEdge": {
        "defaultValue": null,
        "description": "The starting edge of the dialog.",
        "name": "startingEdge",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "moveBy": {
        "defaultValue": {
          "value": "{ main: 0, secondary: 0 }"
        },
        "description": "Offset values for positioning adjustments.\n`main` - horizontal offset\n`secondary` - vertical offset",
        "name": "moveBy",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "{ main?: number; secondary?: number; }"
        }
      },
      "showDelay": {
        "defaultValue": {
          "value": "100"
        },
        "description": "Delay in milliseconds before showing the dialog.",
        "name": "showDelay",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "hideDelay": {
        "defaultValue": {
          "value": "100"
        },
        "description": "Delay in milliseconds before hiding the dialog.",
        "name": "hideDelay",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showTrigger": {
        "defaultValue": {
          "value": "Dialog.hideShowTriggers.MOUSE_ENTER"
        },
        "description": "Events that trigger showing the dialog.",
        "name": "showTrigger",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogTriggerEvent | DialogTriggerEvent[]"
        }
      },
      "hideTrigger": {
        "defaultValue": {
          "value": "Dialog.hideShowTriggers.MOUSE_LEAVE"
        },
        "description": "Events that trigger hiding the dialog.",
        "name": "hideTrigger",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogTriggerEvent | DialogTriggerEvent[]"
        }
      },
      "showOnDialogEnter": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, prevents closing the dialog when the mouse enters it.",
        "name": "showOnDialogEnter",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shouldShowOnMount": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, shows the dialog when the component mounts.",
        "name": "shouldShowOnMount",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disable": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, disables opening the dialog.",
        "name": "disable",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "open": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Controls the open state of the dialog.",
        "name": "open",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isOpen": {
        "defaultValue": null,
        "description": "Derived state control for managing dialog visibility.",
        "name": "isOpen",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showTriggerIgnoreClass": {
        "defaultValue": null,
        "description": "Classes that prevent showing the dialog when present.",
        "name": "showTriggerIgnoreClass",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | string[]"
        }
      },
      "hideTriggerIgnoreClass": {
        "defaultValue": null,
        "description": "Classes that prevent hiding the dialog when present.",
        "name": "hideTriggerIgnoreClass",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | string[]"
        }
      },
      "animationType": {
        "defaultValue": {
          "value": "Dialog.animationTypes.EXPAND"
        },
        "description": "The animation type used for the dialog.",
        "name": "animationType",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "DialogAnimationType",
          "value": [
            {
              "value": "\"opacity-and-slide\""
            },
            {
              "value": "\"expand\""
            }
          ]
        }
      },
      "wrapperClassName": {
        "defaultValue": null,
        "description": "Class name applied to the dialog content container.",
        "name": "wrapperClassName",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "preventAnimationOnMount": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, prevents animation when mounting.",
        "name": "preventAnimationOnMount",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "containerSelector": {
        "defaultValue": null,
        "description": "The CSS selector of the container where the dialog is rendered.",
        "name": "containerSelector",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tooltip": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, positions the tooltip element.",
        "name": "tooltip",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "tooltipClassName": {
        "defaultValue": null,
        "description": "Class name applied to the tooltip element.",
        "name": "tooltipClassName",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onDialogDidShow": {
        "defaultValue": null,
        "description": "Callback fired when the dialog is shown.",
        "name": "onDialogDidShow",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event?: any, eventName?: string) => void"
        }
      },
      "onDialogDidHide": {
        "defaultValue": null,
        "description": "Callback fired when the dialog is hidden.",
        "name": "onDialogDidHide",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any, eventName: string) => void"
        }
      },
      "onClickOutside": {
        "defaultValue": null,
        "description": "Callback fired when clicking outside the dialog.",
        "name": "onClickOutside",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "onContentClick": {
        "defaultValue": null,
        "description": "Callback fired when clicking inside the dialog content.",
        "name": "onContentClick",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "The z-index applied to the dialog.",
        "name": "zIndex",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "useDerivedStateFromProps": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, uses derived state from props.",
        "name": "useDerivedStateFromProps",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideWhenReferenceHidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, makes the dialog disappear when the reference element is hidden.",
        "name": "hideWhenReferenceHidden",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shouldCallbackOnMount": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, triggers the callback when the dialog mounts.",
        "name": "shouldCallbackOnMount",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "instantShowAndHide": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, instantly shows and hides the dialog without delay.",
        "name": "instantShowAndHide",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "getDynamicShowDelay": {
        "defaultValue": null,
        "description": "Callback to dynamically adjust show delay and animation behavior.",
        "name": "getDynamicShowDelay",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => { showDelay: number; preventAnimation: boolean; }"
        }
      },
      "content": {
        "defaultValue": null,
        "description": "The content displayed inside the dialog.",
        "name": "content",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(() => Element) | Element"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The element to position the dialog beside.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"
        }
      },
      "addKeyboardHideShowTriggersByDefault": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, keyboard focus/blur events behave like mouse enter/leave.",
        "name": "addKeyboardHideShowTriggersByDefault",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disableContainerScroll": {
        "defaultValue": null,
        "description": "If true, disables scrolling for the container element.",
        "name": "disableContainerScroll",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | boolean"
        }
      },
      "observeContentResize": {
        "defaultValue": {
          "value": "false"
        },
        "description": "Enables the observation of content resize for the popper element.\nWhen set to `true`, a ResizeObserver is attached to the popper content,\nautomatically triggering repositioning when the size of the content changes.\n\nThis is useful for dialogs, tooltips, or popovers with dynamic content\nthat may grow or shrink without a re-render being triggered.",
        "name": "observeContentResize",
        "parent": {
          "fileName": "core/src/components/Dialog/Dialog.tsx",
          "name": "DialogProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Dialog/Dialog.tsx",
            "name": "DialogProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Dialog } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/EmptyState/EmptyState.tsx",
    "aggregator": "core",
    "symbols": [
      "default as EmptyState",
      "EmptyStateLayout",
      "EmptyStateProps"
    ],
    "displayName": "EmptyState",
    "description": "",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "Optional title for the empty state",
        "name": "title",
        "parent": {
          "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
          "name": "EmptyStateProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
            "name": "EmptyStateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Required description text explaining the empty state",
        "name": "description",
        "parent": {
          "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
          "name": "EmptyStateProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
            "name": "EmptyStateProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "visual": {
        "defaultValue": null,
        "description": "Optional visual element like image, animation, video, or illustration to display",
        "name": "visual",
        "parent": {
          "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
          "name": "EmptyStateProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
            "name": "EmptyStateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "mainAction": {
        "defaultValue": null,
        "description": "Main action button configuration",
        "name": "mainAction",
        "parent": {
          "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
          "name": "EmptyStateProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
            "name": "EmptyStateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "supportingAction": {
        "defaultValue": null,
        "description": "Supporting action (link or tertiary button) configuration",
        "name": "supportingAction",
        "parent": {
          "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
          "name": "EmptyStateProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
            "name": "EmptyStateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "layout": {
        "defaultValue": {
          "value": "default"
        },
        "description": "Layout style of the empty state",
        "name": "layout",
        "parent": {
          "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
          "name": "EmptyStateProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/EmptyState/EmptyState.types.ts",
            "name": "EmptyStateProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "EmptyStateLayout",
          "value": [
            {
              "value": "\"default\""
            },
            {
              "value": "\"compact\""
            }
          ]
        }
      }
    },
    "import": "import { EmptyState } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/ExpandCollapse/ExpandCollapse.tsx",
    "aggregator": "core",
    "symbols": [
      "default as ExpandCollapse",
      "ExpandCollapseProps"
    ],
    "displayName": "ExpandCollapse",
    "description": "",
    "props": {
      "headerComponentRenderer": {
        "defaultValue": {
          "value": "null"
        },
        "description": "Custom renderer for the header component.",
        "name": "headerComponentRenderer",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "headerClassName": {
        "defaultValue": null,
        "description": "Class name applied to the header.",
        "name": "headerClassName",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "contentClassName": {
        "defaultValue": null,
        "description": "Class name applied to the content.",
        "name": "contentClassName",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "componentClassName": {
        "defaultValue": null,
        "description": "Class name applied to the root component.",
        "name": "componentClassName",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "title": {
        "defaultValue": {
          "value": ""
        },
        "description": "The title displayed in the header.",
        "name": "title",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ElementContent"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The content inside the expandable section.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ElementContent"
        }
      },
      "iconSize": {
        "defaultValue": {
          "value": "24"
        },
        "description": "The size of the expand/collapse icon.",
        "name": "iconSize",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | number"
        }
      },
      "iconPosition": {
        "defaultValue": {
          "value": "right"
        },
        "description": "The position of the icon.",
        "name": "iconPosition",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ExpandCollapseIconPosition",
          "value": [
            {
              "value": "\"left\""
            },
            {
              "value": "\"right\""
            }
          ]
        }
      },
      "defaultOpenState": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, the section is open by default when rendered.",
        "name": "defaultOpenState",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "open": {
        "defaultValue": null,
        "description": "Controls the open state of the section.",
        "name": "open",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClick": {
        "defaultValue": {
          "value": "null"
        },
        "description": "Callback fired when the header is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "hideBorder": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, hides the border around the component.",
        "name": "hideBorder",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "captureOnClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, captures the click event on the button.",
        "name": "captureOnClick",
        "parent": {
          "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
          "name": "ExpandCollapseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/ExpandCollapse/ExpandCollapse.tsx",
            "name": "ExpandCollapseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": {
          "value": ""
        },
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ExpandCollapse } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/HiddenText/HiddenText.tsx",
    "aggregator": "core",
    "symbols": [
      "default as HiddenText",
      "HiddenTextProps"
    ],
    "displayName": "HiddenText",
    "description": "",
    "props": {
      "text": {
        "defaultValue": null,
        "description": "The text content that is hidden but available for assistive technologies.",
        "name": "text",
        "parent": {
          "fileName": "core/src/components/HiddenText/HiddenText.tsx",
          "name": "HiddenTextProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/HiddenText/HiddenText.tsx",
            "name": "HiddenTextProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": {
          "value": ""
        },
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": {
          "value": "hiddenText"
        },
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { HiddenText } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
    "aggregator": "core",
    "symbols": [
      "default as CustomSvgIcon",
      "CustomSvgIconProps"
    ],
    "displayName": "CustomSvgIcon",
    "description": "",
    "props": {
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when the icon is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "src": {
        "defaultValue": null,
        "description": "The source URL or object of the SVG icon.",
        "name": "src",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string | object"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "The accessible label for the icon.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "The tab index of the icon for keyboard navigation.",
        "name": "tabIndex",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role of the icon.",
        "name": "role",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "AriaRole"
        }
      },
      "ariaHidden": {
        "defaultValue": null,
        "description": "If true, hides the icon from screen readers.",
        "name": "ariaHidden",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "clickable": {
        "defaultValue": null,
        "description": "If true, makes the icon clickable.",
        "name": "clickable",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "replaceToCurrentColor": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, replaces the `fill` attribute in the SVG with `currentColor`.",
        "name": "replaceToCurrentColor",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "customColor": {
        "defaultValue": null,
        "description": "Overrides the default color of the icon.",
        "name": "customColor",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ref": {
        "defaultValue": null,
        "description": "Reference to the SVG element.",
        "name": "ref",
        "parent": {
          "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
          "name": "CustomSvgIconProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx",
            "name": "CustomSvgIconProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Ref<SVGElement>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { CustomSvgIcon } from \"@vibe/core\"",
    "parentComponent": "Icon",
    "subComponents": []
  },
  {
    "filePath": "src/components/LayerProvider/LayerProvider.tsx",
    "aggregator": "core",
    "symbols": [
      "default as LayerProvider",
      "LayerProviderType"
    ],
    "displayName": "LayerProvider",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The child elements.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/LayerProvider/LayerProvider.tsx",
          "name": "LayerProviderType"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LayerProvider/LayerProvider.tsx",
            "name": "LayerProviderType"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode | ReactNode[]"
        }
      },
      "layerRef": {
        "defaultValue": null,
        "description": "A reference to the layer container element.",
        "name": "layerRef",
        "parent": {
          "fileName": "core/src/components/LayerProvider/LayerProvider.tsx",
          "name": "LayerProviderType"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LayerProvider/LayerProvider.tsx",
            "name": "LayerProviderType"
          }
        ],
        "required": true,
        "type": {
          "name": "RefObject<HTMLElement>"
        }
      }
    },
    "import": "import { LayerProvider } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Menu/MenuDivider/MenuDivider.tsx",
    "aggregator": "core",
    "symbols": [
      "default as MenuDivider",
      "MenuDividerProps"
    ],
    "displayName": "MenuDivider",
    "description": "",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { MenuDivider } from \"@vibe/core\"",
    "parentComponent": "Menu",
    "subComponents": []
  },
  {
    "filePath": "src/components/Menu/MenuGridItem/MenuGridItem.tsx",
    "aggregator": "core",
    "symbols": [
      "default as MenuGridItem",
      "MenuGridItemProps"
    ],
    "displayName": "MenuGridItem",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of the menu grid item.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, keyboard navigation will skip this item. This prop is also passed to the child.",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "closeMenu": {
        "defaultValue": null,
        "description": "A callback function to close the wrapping menu.",
        "name": "closeMenu",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(option: CloseMenuOption) => void"
        }
      },
      "activeItemIndex": {
        "defaultValue": {
          "value": "-1"
        },
        "description": "The currently active index of the wrapping menu.",
        "name": "activeItemIndex",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "setActiveItemIndex": {
        "defaultValue": null,
        "description": "Callback function to set the active item index.",
        "name": "setActiveItemIndex",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(index: number) => void"
        }
      },
      "getNextSelectableIndex": {
        "defaultValue": null,
        "description": "Function to get the next selectable index.",
        "name": "getNextSelectableIndex",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(activeItemIndex: number) => number"
        }
      },
      "getPreviousSelectableIndex": {
        "defaultValue": null,
        "description": "Function to get the previous selectable index.",
        "name": "getPreviousSelectableIndex",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(activeItemIndex: number) => number"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "The index of this menu grid item.",
        "name": "index",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isUnderSubMenu": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, this item is under a submenu instead of a top-level menu.",
        "name": "isUnderSubMenu",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "setSubMenuIsOpenByIndex": {
        "defaultValue": null,
        "description": "Callback function to open or close a submenu by its index.",
        "name": "setSubMenuIsOpenByIndex",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(index: number, isOpen: boolean) => void"
        }
      },
      "useDocumentEventListeners": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, event listeners will be attached to the document.",
        "name": "useDocumentEventListeners",
        "parent": {
          "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
          "name": "MenuGridItemProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/MenuGridItem/MenuGridItem.tsx",
            "name": "MenuGridItemProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { MenuGridItem } from \"@vibe/core\"",
    "parentComponent": "Menu",
    "subComponents": []
  },
  {
    "filePath": "src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
    "aggregator": "core",
    "symbols": [
      "default as ModalHeader",
      "LegacyModalHeaderProps as ModalHeaderProps"
    ],
    "displayName": "LegacyModalHeader",
    "description": "",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "",
        "name": "title",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "LegacyModalHeaderWithOnlyTitle"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "LegacyModalHeaderWithOnlyTitle"
          },
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "LegacyModalHeaderWithOnlyChildren"
          }
        ],
        "required": false,
        "type": {
          "name": "ElementContent"
        }
      },
      "description": {
        "defaultValue": {
          "value": ""
        },
        "description": "Description of the modal - pure string description is a recommended standard, use JSX ability only if there is a need to add links",
        "name": "description",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "BaseLegacyModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "BaseLegacyModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ElementContent"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon to be rendered before the title",
        "name": "icon",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "BaseLegacyModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "BaseLegacyModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "titleClassName": {
        "defaultValue": null,
        "description": "Class name for the title",
        "name": "titleClassName",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "BaseLegacyModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "BaseLegacyModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeModal": {
        "defaultValue": null,
        "description": "closes the Modal. No need to provide it, it is being provided by the modal",
        "name": "closeModal",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "BaseLegacyModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "BaseLegacyModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "descriptionClassName": {
        "defaultValue": null,
        "description": "Class name for the description",
        "name": "descriptionClassName",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "BaseLegacyModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "BaseLegacyModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "iconSize": {
        "defaultValue": {
          "value": "24"
        },
        "description": "Size of the icon",
        "name": "iconSize",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "BaseLegacyModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "BaseLegacyModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "iconClassName": {
        "defaultValue": null,
        "description": "class name for the icon",
        "name": "iconClassName",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "BaseLegacyModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "BaseLegacyModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "closeButtonAriaLabel": {
        "defaultValue": {
          "value": "close"
        },
        "description": "Aria label for the close button",
        "name": "closeButtonAriaLabel",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
          "name": "BaseLegacyModalHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalHeader/LegacyModalHeader.tsx",
            "name": "BaseLegacyModalHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { LegacyModalHeader } from \"@vibe/core\"",
    "parentComponent": "LegacyModal",
    "subComponents": []
  },
  {
    "filePath": "src/components/LegacyModal/LegacyModalContent/LegacyModalContent.tsx",
    "aggregator": "core",
    "symbols": [
      "default as ModalContent",
      "LegacyModalContentProps as ModalContentProps"
    ],
    "displayName": "LegacyModalContent",
    "description": "",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { LegacyModalContent } from \"@vibe/core\"",
    "parentComponent": "LegacyModal",
    "subComponents": []
  },
  {
    "filePath": "src/components/LegacyModal/LegacyModalFooter/LegacyModalFooter.tsx",
    "aggregator": "core",
    "symbols": [
      "default as ModalFooter",
      "LegacyModalFooterProps as ModalFooterProps"
    ],
    "displayName": "LegacyModalFooter",
    "description": "",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { LegacyModalFooter } from \"@vibe/core\"",
    "parentComponent": "LegacyModal",
    "subComponents": []
  },
  {
    "filePath": "src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
    "aggregator": "core",
    "symbols": [
      "default as ModalFooterButtons",
      "LegacyModalFooterButtonsProps as ModalFooterButtonsProps"
    ],
    "displayName": "LegacyModalFooterButtons",
    "description": "",
    "props": {
      "primaryButtonText": {
        "defaultValue": null,
        "description": "",
        "name": "primaryButtonText",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
          "name": "LegacyModalFooterButtonsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
            "name": "LegacyModalFooterButtonsProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "secondaryButtonText": {
        "defaultValue": null,
        "description": "",
        "name": "secondaryButtonText",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
          "name": "LegacyModalFooterButtonsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
            "name": "LegacyModalFooterButtonsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disablePrimaryButton": {
        "defaultValue": null,
        "description": "",
        "name": "disablePrimaryButton",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
          "name": "LegacyModalFooterButtonsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
            "name": "LegacyModalFooterButtonsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onPrimaryButtonClick": {
        "defaultValue": null,
        "description": "",
        "name": "onPrimaryButtonClick",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
          "name": "LegacyModalFooterButtonsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
            "name": "LegacyModalFooterButtonsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onSecondaryButtonClick": {
        "defaultValue": null,
        "description": "",
        "name": "onSecondaryButtonClick",
        "parent": {
          "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
          "name": "LegacyModalFooterButtonsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/LegacyModal/LegacyModalFooter/LegacyModalFooterButtons/LegacyModalFooterButtons.tsx",
            "name": "LegacyModalFooterButtonsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { LegacyModalFooterButtons } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/RadioButton/RadioButton.tsx",
    "aggregator": "core",
    "symbols": [
      "default as RadioButton",
      "RadioButtonProps"
    ],
    "displayName": "RadioButton",
    "description": "",
    "props": {
      "labelClassName": {
        "defaultValue": null,
        "description": "Class name applied to the label text.",
        "name": "labelClassName",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "radioButtonClassName": {
        "defaultValue": null,
        "description": "Class name applied to the radio button element.",
        "name": "radioButtonClassName",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "text": {
        "defaultValue": {
          "value": ""
        },
        "description": "The label text displayed next to the radio button.",
        "name": "text",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": {
          "value": ""
        },
        "description": "The value associated with the radio button.",
        "name": "value",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": {
          "value": ""
        },
        "description": "The name of the radio button group.",
        "name": "name",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "If true, the radio button automatically receives focus on mount.",
        "name": "autoFocus",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, the radio button is disabled.",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabledReason": {
        "defaultValue": null,
        "description": "The reason why the radio button is disabled, displayed in a tooltip.",
        "name": "disabledReason",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "defaultChecked": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, the radio button is checked by default.",
        "name": "defaultChecked",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The child elements inside the radio button.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "onSelect": {
        "defaultValue": null,
        "description": "Callback fired when the radio button selection changes.",
        "name": "onSelect",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "checked": {
        "defaultValue": null,
        "description": "If provided, controls the checked state of the radio button.",
        "name": "checked",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "retainChildClick": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, clicking on children will trigger selection.",
        "name": "retainChildClick",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "childrenTabIndex": {
        "defaultValue": {
          "value": "0"
        },
        "description": "The tab index applied to the children.",
        "name": "childrenTabIndex",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "noLabelAnimation": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, disables the label animation.",
        "name": "noLabelAnimation",
        "parent": {
          "fileName": "core/src/components/RadioButton/RadioButton.tsx",
          "name": "RadioButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/RadioButton/RadioButton.tsx",
            "name": "RadioButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { RadioButton } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Search/Search.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Search",
      "SearchProps"
    ],
    "displayName": "Search",
    "description": "",
    "props": {
      "searchIconName": {
        "defaultValue": null,
        "description": "The icon used for the search button.",
        "name": "searchIconName",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "clearIconName": {
        "defaultValue": null,
        "description": "The icon used for the clear button.",
        "name": "clearIconName",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "clearIconLabel": {
        "defaultValue": {
          "value": "Clear"
        },
        "description": "The label for the clear button, for accessibility purposes.",
        "name": "clearIconLabel",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "renderAction": {
        "defaultValue": null,
        "description": "Renders an additional action button in the search input.",
        "name": "renderAction",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactElement<any>"
        }
      },
      "hideRenderActionOnInput": {
        "defaultValue": null,
        "description": "If true, hides the additional action button when input has text.",
        "name": "hideRenderActionOnInput",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The current value of the search input.",
        "name": "value",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "The placeholder text displayed when the input is empty.",
        "name": "placeholder",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size of the search input, affecting padding and font size.",
        "name": "size",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "InputSize",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"large\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "If true, disables the search input.",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "If true, displays a loading indicator inside the input.",
        "name": "loading",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "autoFocus": {
        "defaultValue": null,
        "description": "If true, automatically focuses the search input on mount.",
        "name": "autoFocus",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "autoComplete": {
        "defaultValue": {
          "value": "off"
        },
        "description": "Configures the browser's autocomplete behavior.",
        "name": "autoComplete",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "inputAriaLabel": {
        "defaultValue": null,
        "description": "The ARIA label for the search input.",
        "name": "inputAriaLabel",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.AriaAttributes"
        }
      },
      "ariaExpanded": {
        "defaultValue": null,
        "description": "If true, indicates that a popup is open.",
        "name": "ariaExpanded",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.AriaAttributes"
        }
      },
      "ariaHasPopup": {
        "defaultValue": null,
        "description": "Specifies the type of popup associated with the search input.",
        "name": "ariaHasPopup",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.AriaAttributes"
        }
      },
      "debounceRate": {
        "defaultValue": {
          "value": "400"
        },
        "description": "The debounce rate for input value changes.",
        "name": "debounceRate",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "searchResultsContainerId": {
        "defaultValue": null,
        "description": "The ID of the container where search results are displayed.",
        "name": "searchResultsContainerId",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "currentAriaResultId": {
        "defaultValue": null,
        "description": "ARIA property indicating the currently active search result.",
        "name": "currentAriaResultId",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.AriaAttributes"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback fired when the search input value changes.",
        "name": "onChange",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: string) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "Callback fired when the search input loses focus.",
        "name": "onBlur",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.FocusEvent) => void"
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "Callback fired when the search input gains focus.",
        "name": "onFocus",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.FocusEvent) => void"
        }
      },
      "onClear": {
        "defaultValue": null,
        "description": "Callback fired when the clear button is clicked.",
        "name": "onClear",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onKeyDown": {
        "defaultValue": null,
        "description": "Callback fired when a key is pressed inside the input.",
        "name": "onKeyDown",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.KeyboardEvent<HTMLInputElement>) => void"
        }
      },
      "showClearIcon": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, displays a clear button inside the search input.",
        "name": "showClearIcon",
        "parent": {
          "fileName": "core/src/components/Search/Search.types.ts",
          "name": "SearchProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Search/Search.types.ts",
            "name": "SearchProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Search } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/SplitButton/SplitButtonMenu/SplitButtonMenu.tsx",
    "aggregator": "core",
    "symbols": [
      "default as SplitButtonMenu",
      "SplitButtonMenuProps"
    ],
    "displayName": "SplitButtonMenu",
    "description": "",
    "props": {
      "size": {
        "defaultValue": null,
        "description": "Size of the menu.",
        "name": "size",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"xxs\" | \"xs\" | \"small\" | \"medium\" | \"large\"",
          "value": [
            {
              "value": "\"xxs\""
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"large\""
            }
          ]
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "The tab index of the menu.",
        "name": "tabIndex",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "ARIA label for accessibility.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaDescribedBy": {
        "defaultValue": null,
        "description": "ARIA description ID.",
        "name": "ariaDescribedBy",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "focusOnMount": {
        "defaultValue": null,
        "description": "If true, the menu will automatically focus on mount.",
        "name": "focusOnMount",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onItemFocus": {
        "defaultValue": null,
        "description": "Callback when a menu item gains focus.",
        "name": "onItemFocus",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(index: number) => void"
        }
      },
      "isVisible": {
        "defaultValue": null,
        "description": "Controls the visibility of the menu.",
        "name": "isVisible",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onClose": {
        "defaultValue": null,
        "description": "Callback triggered when the menu closes.",
        "name": "onClose",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(option: CloseMenuOption) => void"
        }
      },
      "focusItemIndex": {
        "defaultValue": null,
        "description": "Index of the focused menu item.",
        "name": "focusItemIndex",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "isSubMenu": {
        "defaultValue": null,
        "description": "If true, this menu is a submenu.",
        "name": "isSubMenu",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "useDocumentEventListeners": {
        "defaultValue": null,
        "description": "If true, event listeners will be attached to the document.",
        "name": "useDocumentEventListeners",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shouldScrollMenu": {
        "defaultValue": null,
        "description": "If true, enables scrolling within the menu.",
        "name": "shouldScrollMenu",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The menu items.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Menu/Menu/Menu.tsx",
          "name": "MenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Menu/Menu/Menu.tsx",
            "name": "MenuProps"
          },
          {
            "fileName": "core/src/components/SplitButton/SplitButtonMenu/SplitButtonMenu.tsx",
            "name": "TypeLiteral"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { SplitButtonMenu } from \"@vibe/core\"",
    "parentComponent": "SplitButton",
    "subComponents": []
  },
  {
    "filePath": "src/components/Table/TableContainer/TableContainer.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TableContainer",
      "TableContainerProps"
    ],
    "displayName": "TableContainer",
    "description": "",
    "props": {
      "style": {
        "defaultValue": null,
        "description": "Custom styles for the table container.",
        "name": "style",
        "parent": {
          "fileName": "core/src/components/Table/TableContainer/TableContainer.types.ts",
          "name": "TableContainerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableContainer/TableContainer.types.ts",
            "name": "TableContainerProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The child elements inside the table container.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Table/TableContainer/TableContainer.types.ts",
          "name": "TableContainerProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableContainer/TableContainer.types.ts",
            "name": "TableContainerProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TableContainer } from \"@vibe/core\"",
    "parentComponent": "Table",
    "subComponents": []
  },
  {
    "filePath": "src/components/Table/TableHeader/TableHeader.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TableHeader",
      "TableHeaderProps"
    ],
    "displayName": "TableHeader",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The child elements inside the table header, typically `<TableHeaderCell />` components.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Table/TableHeader/TableHeader.tsx",
          "name": "TableHeaderProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableHeader/TableHeader.tsx",
            "name": "TableHeaderProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TableHeader } from \"@vibe/core\"",
    "parentComponent": "Table",
    "subComponents": []
  },
  {
    "filePath": "src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TableHeaderCell",
      "TableHeaderCellProps"
    ],
    "displayName": "TableHeaderCell",
    "description": "",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title of the column, displayed inside the header cell.",
        "name": "title",
        "parent": {
          "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
          "name": "TableHeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
            "name": "TableHeaderCellProps"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon displayed next to the column title.",
        "name": "icon",
        "parent": {
          "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
          "name": "TableHeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
            "name": "TableHeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "infoContent": {
        "defaultValue": null,
        "description": "Tooltip content for additional information about the column.",
        "name": "infoContent",
        "parent": {
          "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
          "name": "TableHeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
            "name": "TableHeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sortState": {
        "defaultValue": {
          "value": "none"
        },
        "description": "Current sorting state of the column.",
        "name": "sortState",
        "parent": {
          "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
          "name": "TableHeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
            "name": "TableHeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"asc\" | \"desc\" | \"none\"",
          "value": [
            {
              "value": "\"asc\""
            },
            {
              "value": "\"desc\""
            },
            {
              "value": "\"none\""
            }
          ]
        }
      },
      "onSortClicked": {
        "defaultValue": null,
        "description": "Callback fired when the column header is clicked to change sorting.",
        "name": "onSortClicked",
        "parent": {
          "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
          "name": "TableHeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
            "name": "TableHeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(direction: \"asc\" | \"desc\" | \"none\") => void"
        }
      },
      "sortButtonAriaLabel": {
        "defaultValue": {
          "value": "Sort"
        },
        "description": "ARIA label for the sort button.",
        "name": "sortButtonAriaLabel",
        "parent": {
          "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
          "name": "TableHeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
            "name": "TableHeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "sticky": {
        "defaultValue": null,
        "description": "If true, the header cell remains visible while scrolling horizontally.",
        "name": "sticky",
        "parent": {
          "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
          "name": "TableHeaderCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableHeaderCell/TableHeaderCell.tsx",
            "name": "TableHeaderCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TableHeaderCell } from \"@vibe/core\"",
    "parentComponent": "Table",
    "subComponents": []
  },
  {
    "filePath": "src/components/Table/TableBody/TableBody.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TableBody",
      "TableBodyProps"
    ],
    "displayName": "TableBody",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The child components inside the table body, such as `<TableRow />` elements.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Table/TableBody/TableBody.tsx",
          "name": "TableBodyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableBody/TableBody.tsx",
            "name": "TableBodyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TableRowProps, string | JSXElementConstructor<any>> | ReactElement<TableRowProps, string | JSXElementConstructor<...>>[] | ReactElement<...>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TableBody } from \"@vibe/core\"",
    "parentComponent": "Table",
    "subComponents": []
  },
  {
    "filePath": "src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TableVirtualizedBody",
      "TableVirtualizedBodyProps",
      "TableVirtualizedRow"
    ],
    "displayName": "TableVirtualizedBody",
    "description": "",
    "props": {
      "items": {
        "defaultValue": null,
        "description": "The list of items to render in the virtualized table.",
        "name": "items",
        "parent": {
          "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
          "name": "TableVirtualizedBodyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
            "name": "TableVirtualizedBodyProps"
          }
        ],
        "required": true,
        "type": {
          "name": "TableVirtualizedRow[]"
        }
      },
      "rowRenderer": {
        "defaultValue": null,
        "description": "Function to render a row in the table.",
        "name": "rowRenderer",
        "parent": {
          "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
          "name": "TableVirtualizedBodyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
            "name": "TableVirtualizedBodyProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(item: TableVirtualizedRow) => Element"
        }
      },
      "onScroll": {
        "defaultValue": null,
        "description": "Callback function triggered on scroll.",
        "name": "onScroll",
        "parent": {
          "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
          "name": "TableVirtualizedBodyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
            "name": "TableVirtualizedBodyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void"
        }
      },
      "columns": {
        "defaultValue": null,
        "description": "The columns configuration for the table.",
        "name": "columns",
        "parent": {
          "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
          "name": "TableVirtualizedBodyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
            "name": "TableVirtualizedBodyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "TableColumn[]"
        }
      },
      "headerRenderer": {
        "defaultValue": null,
        "description": "Function to render the table header.",
        "name": "headerRenderer",
        "parent": {
          "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
          "name": "TableVirtualizedBodyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
            "name": "TableVirtualizedBodyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(columns: TableColumn[]) => Element"
        }
      },
      "overscanCount": {
        "defaultValue": {
          "value": "1"
        },
        "description": "Number of rows to render above/below the visible area.",
        "name": "overscanCount",
        "parent": {
          "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
          "name": "TableVirtualizedBodyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx",
            "name": "TableVirtualizedBodyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TableVirtualizedBody } from \"@vibe/core\"",
    "parentComponent": "Table",
    "subComponents": []
  },
  {
    "filePath": "src/components/Table/TableRow/TableRow.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TableRow",
      "TableRowProps"
    ],
    "displayName": "TableRow",
    "description": "",
    "props": {
      "highlighted": {
        "defaultValue": null,
        "description": "If true, applies a highlighted style to the row.",
        "name": "highlighted",
        "parent": {
          "fileName": "core/src/components/Table/TableRow/TableRow.tsx",
          "name": "TableRowProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableRow/TableRow.tsx",
            "name": "TableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The child components inside the table row, typically `<TableCell />` elements.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Table/TableRow/TableRow.tsx",
          "name": "TableRowProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableRow/TableRow.tsx",
            "name": "TableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Custom styles applied to the table row.",
        "name": "style",
        "parent": {
          "fileName": "core/src/components/Table/TableRow/TableRow.tsx",
          "name": "TableRowProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableRow/TableRow.tsx",
            "name": "TableRowProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TableRow } from \"@vibe/core\"",
    "parentComponent": "Table",
    "subComponents": []
  },
  {
    "filePath": "src/components/Table/TableRowMenu/TableRowMenu.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TableRowMenu",
      "TableMenuProps"
    ],
    "displayName": "TableRowMenu",
    "description": "",
    "props": {
      "rowId": {
        "defaultValue": null,
        "description": "The ID of the row that the menu is associated with.",
        "name": "rowId",
        "parent": {
          "fileName": "core/src/components/Table/TableRowMenu/TableRowMenu.types.ts",
          "name": "TableMenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableRowMenu/TableRowMenu.types.ts",
            "name": "TableMenuProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The child elements inside the table menu.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Table/TableRowMenu/TableRowMenu.types.ts",
          "name": "TableMenuProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableRowMenu/TableRowMenu.types.ts",
            "name": "TableMenuProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TableRowMenu } from \"@vibe/core\"",
    "parentComponent": "Table",
    "subComponents": []
  },
  {
    "filePath": "src/components/Table/TableCell/TableCell.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TableCell",
      "TableCellProps"
    ],
    "displayName": "TableCell",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content inside the table cell.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Table/TableCell/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableCell/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "sticky": {
        "defaultValue": null,
        "description": "If true, makes the cell sticky (typically used for frozen columns).",
        "name": "sticky",
        "parent": {
          "fileName": "core/src/components/Table/TableCell/TableCell.tsx",
          "name": "TableCellProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Table/TableCell/TableCell.tsx",
            "name": "TableCellProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TableCell } from \"@vibe/core\"",
    "parentComponent": "Table",
    "subComponents": []
  },
  {
    "filePath": "src/components/Tabs/Tab/Tab.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Tab",
      "TabProps"
    ],
    "displayName": "Tab",
    "description": "",
    "props": {
      "tabInnerClassName": {
        "defaultValue": null,
        "description": "Class name applied to the inner tab content.",
        "name": "tabInnerClassName",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "value": {
        "defaultValue": {
          "value": "0"
        },
        "description": "The index value of the tab.",
        "name": "value",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "disabled": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, disables the tab.",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "active": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, marks the tab as active.",
        "name": "active",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "focus": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, applies focus styles to the tab.",
        "name": "focus",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon displayed in the tab.",
        "name": "icon",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "iconType": {
        "defaultValue": null,
        "description": "The type of icon.",
        "name": "iconType",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "IconType",
          "value": [
            {
              "value": "\"svg\""
            },
            {
              "value": "\"font\""
            },
            {
              "value": "\"src\""
            }
          ]
        }
      },
      "iconSide": {
        "defaultValue": {
          "value": "left"
        },
        "description": "The position of the icon relative to the text.",
        "name": "iconSide",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when the tab is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: number) => void"
        }
      },
      "tooltipProps": {
        "defaultValue": {
          "value": "{} as TooltipProps"
        },
        "description": "Props passed to the tab's tooltip.",
        "name": "tooltipProps",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<TooltipProps>"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The content displayed inside the tab.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
          "name": "TabProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/Tab/Tab.tsx",
            "name": "TabProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Tab } from \"@vibe/core\"",
    "parentComponent": "Tabs",
    "subComponents": []
  },
  {
    "filePath": "src/components/Tabs/TabList/TabList.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TabList",
      "TabListProps"
    ],
    "displayName": "TabList",
    "description": "",
    "props": {
      "onTabChange": {
        "defaultValue": null,
        "description": "Callback fired when the active tab changes.",
        "name": "onTabChange",
        "parent": {
          "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(tabId: number) => void"
        }
      },
      "activeTabId": {
        "defaultValue": {
          "value": "0"
        },
        "description": "The index of the currently active tab.",
        "name": "activeTabId",
        "parent": {
          "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tabType": {
        "defaultValue": {
          "value": "Compact"
        },
        "description": "The type of tab style.",
        "name": "tabType",
        "parent": {
          "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The size of the tab list.",
        "name": "size",
        "parent": {
          "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The child elements representing tabs.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
          "name": "TabListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabList/TabList.tsx",
            "name": "TabListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<TabProps, string | JSXElementConstructor<any>>[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TabList } from \"@vibe/core\"",
    "parentComponent": "Tabs",
    "subComponents": []
  },
  {
    "filePath": "src/components/Tabs/TabPanel/TabPanel.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TabPanel",
      "TabPanelProps"
    ],
    "displayName": "TabPanel",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content inside the tab panel.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Tabs/TabPanel/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabPanel/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string | ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"
        }
      },
      "index": {
        "defaultValue": null,
        "description": "The index of the tab panel.",
        "name": "index",
        "parent": {
          "fileName": "core/src/components/Tabs/TabPanel/TabPanel.tsx",
          "name": "TabPanelProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabPanel/TabPanel.tsx",
            "name": "TabPanelProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TabPanel } from \"@vibe/core\"",
    "parentComponent": "Tabs",
    "subComponents": []
  },
  {
    "filePath": "src/components/Tabs/TabsContext/TabsContext.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TabsContext",
      "TabsContextProps"
    ],
    "displayName": "TabsContext",
    "description": "",
    "props": {
      "activeTabId": {
        "defaultValue": {
          "value": "0"
        },
        "description": "The index of the currently active tab.",
        "name": "activeTabId",
        "parent": {
          "fileName": "core/src/components/Tabs/TabsContext/TabsContext.tsx",
          "name": "TabsContextProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabsContext/TabsContext.tsx",
            "name": "TabsContextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The child elements representing the tab list and tab panels.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Tabs/TabsContext/TabsContext.tsx",
          "name": "TabsContextProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tabs/TabsContext/TabsContext.tsx",
            "name": "TabsContextProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TabsContext } from \"@vibe/core\"",
    "parentComponent": "Tabs",
    "subComponents": []
  },
  {
    "filePath": "src/components/TextArea/TextArea.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TextArea",
      "TextAreaSize",
      "TextAreaProps"
    ],
    "displayName": "TextArea",
    "description": "",
    "props": {
      "value": {
        "defaultValue": null,
        "description": "The current value of the textarea.",
        "name": "value",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "small"
        },
        "description": "Determines the size of the textarea text as well as the default row count.",
        "name": "size",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TextAreaSize",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"large\""
            }
          ]
        }
      },
      "success": {
        "defaultValue": null,
        "description": "If true, applies success styling to the textarea.",
        "name": "success",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "error": {
        "defaultValue": null,
        "description": "If true, applies error styling to the textarea.",
        "name": "error",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "label": {
        "defaultValue": null,
        "description": "The label associated with the textarea.",
        "name": "label",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback fired when the textarea value changes.",
        "name": "onChange",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: ChangeEvent<HTMLTextAreaElement>) => void"
        }
      },
      "helpText": {
        "defaultValue": null,
        "description": "Help text displayed below the textarea.",
        "name": "helpText",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-label": {
        "defaultValue": null,
        "description": "The accessibility label for the textarea.",
        "name": "aria-label",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "resize": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the textarea can be resized vertically.",
        "name": "resize",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "placeholder": {
        "defaultValue": null,
        "description": "The placeholder text displayed when the textarea is empty.",
        "name": "placeholder",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "maxLength": {
        "defaultValue": null,
        "description": "The maximum number of characters allowed.",
        "name": "maxLength",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "allowExceedingMaxLength": {
        "defaultValue": null,
        "description": "If true, allows the user to exceed the character limit set by `maxLength`.",
        "name": "allowExceedingMaxLength",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "showCharCount": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, displays the character count below the textarea.",
        "name": "showCharCount",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "If true, disables the textarea.",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "readOnly": {
        "defaultValue": null,
        "description": "If true, makes the textarea read-only.",
        "name": "readOnly",
        "parent": {
          "fileName": "core/src/components/TextArea/TextArea.types.ts",
          "name": "TextAreaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TextArea/TextArea.types.ts",
            "name": "TextAreaProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TextArea } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Tipseen/TipseenContent.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TipseenContent",
      "TipseenContentProps"
    ],
    "displayName": "TipseenContent",
    "description": "",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title text displayed in the Tipseen content.",
        "name": "title",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "titleClassName": {
        "defaultValue": null,
        "description": "Class name applied to the Tipseen title.",
        "name": "titleClassName",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "hideDismiss": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, hides the dismiss button.",
        "name": "hideDismiss",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": {
          "value": "null"
        },
        "description": "The content inside the Tipseen.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ElementContent"
        }
      },
      "hideSubmit": {
        "defaultValue": null,
        "description": "If true, hides the submit button.",
        "name": "hideSubmit",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "submitButtonText": {
        "defaultValue": {
          "value": "Submit"
        },
        "description": "The text displayed on the submit button.",
        "name": "submitButtonText",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "submitButtonIcon": {
        "defaultValue": null,
        "description": "Icon to display in the submit button",
        "name": "submitButtonIcon",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "onSubmit": {
        "defaultValue": null,
        "description": "Callback fired when the submit button is clicked.",
        "name": "onSubmit",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "dismissButtonText": {
        "defaultValue": {
          "value": "Dismiss"
        },
        "description": "The text displayed on the dismiss button.",
        "name": "dismissButtonText",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onDismiss": {
        "defaultValue": null,
        "description": "Callback fired when the dismiss button is clicked.",
        "name": "onDismiss",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
          "name": "TipseenContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenContent.tsx",
            "name": "TipseenContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TipseenContent } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Tipseen/TipseenWizard.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TipseenWizard",
      "TipseenWizardProps"
    ],
    "displayName": "TipseenWizard",
    "description": "",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "The title text displayed in the Tipseen Wizard.",
        "name": "title",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenWizard.tsx",
          "name": "TipseenWizardProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenWizard.tsx",
            "name": "TipseenWizardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "titleClassName": {
        "defaultValue": null,
        "description": "Class name applied to the Tipseen title.",
        "name": "titleClassName",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenWizard.tsx",
          "name": "TipseenWizardProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenWizard.tsx",
            "name": "TipseenWizardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onFinish": {
        "defaultValue": null,
        "description": "Callback fired when the wizard is completed.",
        "name": "onFinish",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenWizard.tsx",
          "name": "TipseenWizardProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenWizard.tsx",
            "name": "TipseenWizardProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: any) => void"
        }
      },
      "activeStepIndex": {
        "defaultValue": null,
        "description": "The index of the currently active step.",
        "name": "activeStepIndex",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onChangeActiveStep": {
        "defaultValue": null,
        "description": "Callback fired when the active step changes.",
        "name": "onChangeActiveStep",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(e: React.MouseEvent, stepIndex: number) => void"
        }
      },
      "areNavigationButtonsHidden": {
        "defaultValue": null,
        "description": "If true, hides the navigation buttons.",
        "name": "areNavigationButtonsHidden",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "steps": {
        "defaultValue": null,
        "description": "The list of steps in the steps component.",
        "name": "steps",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>>[]"
        }
      },
      "type": {
        "defaultValue": null,
        "description": "The visual style of the steps component.",
        "name": "type",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "StepsType",
          "value": [
            {
              "value": "\"numbers\""
            },
            {
              "value": "\"gallery\""
            }
          ]
        }
      },
      "color": {
        "defaultValue": null,
        "description": "The color theme of the steps component.",
        "name": "color",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "StepsColor",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"on-primary-color\""
            },
            {
              "value": "\"on-inverted-background\""
            }
          ]
        }
      },
      "isContentOnTop": {
        "defaultValue": null,
        "description": "If true, the content is displayed above the step navigation.",
        "name": "isContentOnTop",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "areButtonsIconsHidden": {
        "defaultValue": null,
        "description": "If true, hides the icons in the navigation buttons.",
        "name": "areButtonsIconsHidden",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "backButtonProps": {
        "defaultValue": null,
        "description": "Props applied to the back button.",
        "name": "backButtonProps",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<ButtonProps>"
        }
      },
      "nextButtonProps": {
        "defaultValue": null,
        "description": "Props applied to the next button.",
        "name": "nextButtonProps",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<ButtonProps>"
        }
      },
      "finishButtonProps": {
        "defaultValue": null,
        "description": "Props applied to the finish button.",
        "name": "finishButtonProps",
        "parent": {
          "fileName": "core/src/components/Steps/Steps.tsx",
          "name": "StepsProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Steps/Steps.tsx",
            "name": "StepsProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<ButtonProps>"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TipseenWizard } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Tipseen/TipseenMedia/TipseenMedia.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TipseenMedia",
      "TipseenMediaProps"
    ],
    "displayName": "TipseenMedia",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The media content displayed inside the Tipseen.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Tipseen/TipseenMedia/TipseenMedia.tsx",
          "name": "TipseenMediaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tipseen/TipseenMedia/TipseenMedia.tsx",
            "name": "TipseenMediaProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TipseenMedia } from \"@vibe/core\"",
    "parentComponent": "Tipseen",
    "subComponents": []
  },
  {
    "filePath": "src/components/Toast/ToastButton/ToastButton.tsx",
    "aggregator": "core",
    "symbols": [
      "default as ToastButton",
      "ToastButtonProps"
    ],
    "displayName": "ToastButton",
    "description": "",
    "props": {
      "className": {
        "defaultValue": null,
        "description": "Custom class names to pass to the component",
        "name": "className",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "activeButtonClassName": {
        "defaultValue": null,
        "description": "",
        "name": "activeButtonClassName",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "kind": {
        "defaultValue": null,
        "description": "The button's kind",
        "name": "kind",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ButtonType",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"tertiary\""
            }
          ]
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback function to run when the button is clicked",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent<HTMLButtonElement>) => void"
        }
      },
      "onMouseDown": {
        "defaultValue": null,
        "description": "",
        "name": "onMouseDown",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent<HTMLButtonElement>) => void"
        }
      },
      "blurOnMouseUp": {
        "defaultValue": null,
        "description": "Blur on button click",
        "name": "blurOnMouseUp",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "Name of the button - for form submit usages",
        "name": "name",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": null,
        "description": "The button's size",
        "name": "size",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ButtonSize",
          "value": [
            {
              "value": "\"xxs\""
            },
            {
              "value": "\"xs\""
            },
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"large\""
            }
          ]
        }
      },
      "color": {
        "defaultValue": null,
        "description": "The button's color",
        "name": "color",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ButtonColor",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"positive\""
            },
            {
              "value": "\"negative\""
            },
            {
              "value": "\"inverted\""
            },
            {
              "value": "\"on-primary-color\""
            },
            {
              "value": "\"on-inverted-background\""
            },
            {
              "value": "\"brand\""
            },
            {
              "value": "\"fixed-light\""
            },
            {
              "value": "\"fixed-dark\""
            }
          ]
        }
      },
      "type": {
        "defaultValue": null,
        "description": "The button's type",
        "name": "type",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ButtonInputType",
          "value": [
            {
              "value": "\"button\""
            },
            {
              "value": "\"submit\""
            },
            {
              "value": "\"reset\""
            }
          ]
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "Whether the button should be disabled or not",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "rightIcon": {
        "defaultValue": null,
        "description": "Icon to place on the right",
        "name": "rightIcon",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "leftIcon": {
        "defaultValue": null,
        "description": "Icon to place on the left",
        "name": "leftIcon",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "success": {
        "defaultValue": null,
        "description": "the success props are used when you have async action and wants to display a success message",
        "name": "success",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "successIcon": {
        "defaultValue": null,
        "description": "Success icon name",
        "name": "successIcon",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "successText": {
        "defaultValue": null,
        "description": "Success text",
        "name": "successText",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "loading": {
        "defaultValue": null,
        "description": "loading boolean which switches the text to a loader",
        "name": "loading",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "loaderClassName": {
        "defaultValue": null,
        "description": "className which is applied to loader container *",
        "name": "loaderClassName",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "",
        "name": "style",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "active": {
        "defaultValue": null,
        "description": "displays the active state",
        "name": "active",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "id to pass to the button",
        "name": "id",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "marginRight": {
        "defaultValue": null,
        "description": "adds 8px margin to the right",
        "name": "marginRight",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "marginLeft": {
        "defaultValue": null,
        "description": "adds 8px margin to the left",
        "name": "marginLeft",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaLabeledBy": {
        "defaultValue": null,
        "description": "element id to describe the button accordingly",
        "name": "ariaLabeledBy",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "aria label to provide important when providing only Icon",
        "name": "ariaLabel",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaHasPopup": {
        "defaultValue": null,
        "description": "aria for a button popup",
        "name": "ariaHasPopup",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.HTMLProps<HTMLButtonElement>"
        }
      },
      "ariaExpanded": {
        "defaultValue": null,
        "description": "aria to be set if the popup is open",
        "name": "ariaExpanded",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "ariaControls": {
        "defaultValue": null,
        "description": "aria controls - receives id for the controlled region",
        "name": "ariaControls",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "",
        "name": "aria-describedby",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-hidden": {
        "defaultValue": null,
        "description": "aria to be used for screen reader to know if the button is hidden",
        "name": "aria-hidden",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Booleanish"
        }
      },
      "aria-pressed": {
        "defaultValue": null,
        "description": "Indicates the current \"pressed\" state of toggle buttons",
        "name": "aria-pressed",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean | \"true\" | \"false\" | \"mixed\""
        }
      },
      "onFocus": {
        "defaultValue": null,
        "description": "On Button Focus callback",
        "name": "onFocus",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.FocusEvent<HTMLButtonElement>) => void"
        }
      },
      "onBlur": {
        "defaultValue": null,
        "description": "On Button Blur callback",
        "name": "onBlur",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.FocusEvent<HTMLButtonElement>) => void"
        }
      },
      "rightFlat": {
        "defaultValue": null,
        "description": "",
        "name": "rightFlat",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "leftFlat": {
        "defaultValue": null,
        "description": "",
        "name": "leftFlat",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "preventClickAnimation": {
        "defaultValue": null,
        "description": "",
        "name": "preventClickAnimation",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "noSidePadding": {
        "defaultValue": null,
        "description": "",
        "name": "noSidePadding",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "defaultTextColorOnPrimaryColor": {
        "defaultValue": null,
        "description": "default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...)",
        "name": "defaultTextColorOnPrimaryColor",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "insetFocus": {
        "defaultValue": null,
        "description": "Change the focus indicator from around the button to within it",
        "name": "insetFocus",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "tabIndex": {
        "defaultValue": null,
        "description": "Specifies the tab order of an element",
        "name": "tabIndex",
        "parent": {
          "fileName": "core/src/components/Button/Button.tsx",
          "name": "ButtonProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Button/Button.tsx",
            "name": "ButtonProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      }
    },
    "import": "import { ToastButton } from \"@vibe/core\"",
    "parentComponent": "Toast",
    "subComponents": []
  },
  {
    "filePath": "src/components/Toast/ToastLink/ToastLink.tsx",
    "aggregator": "core",
    "symbols": [
      "default as ToastLink",
      "ToastLinkProps"
    ],
    "displayName": "ToastLink",
    "description": "",
    "props": {
      "textClassName": {
        "defaultValue": null,
        "description": "Class name applied to the link text.",
        "name": "textClassName",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "href": {
        "defaultValue": null,
        "description": "The URL the link points to.",
        "name": "href",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "text": {
        "defaultValue": null,
        "description": "The text content of the link.",
        "name": "text",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "rel": {
        "defaultValue": null,
        "description": "Specifies the relationship between the current document and the linked resource.",
        "name": "rel",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClick": {
        "defaultValue": null,
        "description": "Callback fired when the link is clicked.",
        "name": "onClick",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: React.MouseEvent) => void"
        }
      },
      "target": {
        "defaultValue": null,
        "description": "Specifies where to open the linked document.",
        "name": "target",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkTarget",
          "value": [
            {
              "value": "\"_blank\""
            },
            {
              "value": "\"_self\""
            },
            {
              "value": "\"_parent\""
            },
            {
              "value": "\"_top\""
            }
          ]
        }
      },
      "ariaLabelDescription": {
        "defaultValue": null,
        "description": "The ARIA label description for accessibility.",
        "name": "ariaLabelDescription",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaDescribedby": {
        "defaultValue": null,
        "description": "The ID of the element that describes this link.",
        "name": "ariaDescribedby",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabeledBy": {
        "defaultValue": null,
        "description": "The ID of the element labeling this link.",
        "name": "ariaLabeledBy",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "Icon displayed next to the link text.",
        "name": "icon",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "iconPosition": {
        "defaultValue": null,
        "description": "The position of the icon relative to the text.",
        "name": "iconPosition",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkIconPosition",
          "value": [
            {
              "value": "\"start\""
            },
            {
              "value": "\"end\""
            }
          ]
        }
      },
      "disableNavigation": {
        "defaultValue": null,
        "description": "If true, disables navigation when the link is clicked.",
        "name": "disableNavigation",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inheritFontSize": {
        "defaultValue": null,
        "description": "If true, the link inherits the surrounding text's font size.",
        "name": "inheritFontSize",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "inlineText": {
        "defaultValue": null,
        "description": "If true, the link is styled to fit within inline text content.",
        "name": "inlineText",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "color": {
        "defaultValue": null,
        "description": "The link's color style",
        "name": "color",
        "parent": {
          "fileName": "core/src/components/Link/Link.tsx",
          "name": "LinkProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Link/Link.tsx",
            "name": "LinkProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "LinkColor",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"onPrimary\""
            },
            {
              "value": "\"onInverted\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ToastLink } from \"@vibe/core\"",
    "parentComponent": "Toast",
    "subComponents": []
  },
  {
    "filePath": "src/components/Toggle/Toggle.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Toggle",
      "ToggleProps"
    ],
    "displayName": "Toggle",
    "description": "",
    "props": {
      "toggleSelectedClassName": {
        "defaultValue": null,
        "description": "Class name applied when the toggle is selected.",
        "name": "toggleSelectedClassName",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "isDefaultSelected": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, the toggle is selected by default.",
        "name": "isDefaultSelected",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "isSelected": {
        "defaultValue": null,
        "description": "Controls the selected state of the toggle.",
        "name": "isSelected",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onChange": {
        "defaultValue": null,
        "description": "Callback fired when the toggle state changes.",
        "name": "onChange",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: boolean, event: ChangeEvent<HTMLInputElement>) => void"
        }
      },
      "value": {
        "defaultValue": null,
        "description": "The value associated with the toggle.",
        "name": "value",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "name": {
        "defaultValue": null,
        "description": "The name attribute of the toggle input.",
        "name": "name",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "disabled": {
        "defaultValue": null,
        "description": "If true, disables the toggle.",
        "name": "disabled",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "areLabelsHidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, hides the on/off labels.",
        "name": "areLabelsHidden",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onOverrideText": {
        "defaultValue": {
          "value": "On"
        },
        "description": "The text displayed when the toggle is in the \"on\" position.",
        "name": "onOverrideText",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "offOverrideText": {
        "defaultValue": {
          "value": "Off"
        },
        "description": "The text displayed when the toggle is in the \"off\" position.",
        "name": "offOverrideText",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "The ARIA label for accessibility.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaControls": {
        "defaultValue": null,
        "description": "The ID of the element controlled by the toggle.",
        "name": "ariaControls",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "The size of the toggle.",
        "name": "size",
        "parent": {
          "fileName": "core/src/components/Toggle/Toggle.tsx",
          "name": "ToggleProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Toggle/Toggle.tsx",
            "name": "ToggleProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ToggleSize",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Toggle } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Tooltip/Tooltip.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Tooltip",
      "TooltipProps",
      "TooltipPositions",
      "TooltipTheme"
    ],
    "displayName": "Tooltip",
    "description": "",
    "props": {
      "content": {
        "defaultValue": null,
        "description": "The content displayed inside the tooltip.",
        "name": "content",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ElementContent"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Inline styles applied to the tooltip container.",
        "name": "style",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "arrowClassName": {
        "defaultValue": null,
        "description": "Class name applied to the tooltip arrow.",
        "name": "arrowClassName",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "moveBy": {
        "defaultValue": {
          "value": "{ main: 4, secondary: 0 }"
        },
        "description": "Offset values for positioning adjustments.",
        "name": "moveBy",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "MoveBy"
        }
      },
      "theme": {
        "defaultValue": {
          "value": "dark"
        },
        "description": "The theme of the tooltip.",
        "name": "theme",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TooltipTheme",
          "value": [
            {
              "value": "\"dark\""
            },
            {
              "value": "\"primary\""
            }
          ]
        }
      },
      "getContainer": {
        "defaultValue": null,
        "description": "Function to get the container where the tooltip should be rendered.",
        "name": "getContainer",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => HTMLElement"
        }
      },
      "hideDelay": {
        "defaultValue": {
          "value": "100"
        },
        "description": "Delay in milliseconds before hiding the tooltip.",
        "name": "hideDelay",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "showDelay": {
        "defaultValue": {
          "value": "300"
        },
        "description": "Delay in milliseconds before showing the tooltip.",
        "name": "showDelay",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "disableDialogSlide": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, disables the slide animation of the tooltip.",
        "name": "disableDialogSlide",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "animationType": {
        "defaultValue": {
          "value": "AnimationTypeEnum.EXPAND"
        },
        "description": "The animation type used for showing/hiding the tooltip.",
        "name": "animationType",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "DialogAnimationType",
          "value": [
            {
              "value": "\"opacity-and-slide\""
            },
            {
              "value": "\"expand\""
            }
          ]
        }
      },
      "withoutDialog": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, renders the tooltip without a dialog.",
        "name": "withoutDialog",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "containerSelector": {
        "defaultValue": null,
        "description": "The CSS selector of the container where the tooltip should be rendered.",
        "name": "containerSelector",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "immediateShowDelay": {
        "defaultValue": null,
        "description": "Delay in milliseconds before showing the tooltip immediately.",
        "name": "immediateShowDelay",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tip": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If false, hides the arrow of the tooltip.",
        "name": "tip",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "shouldShowOnMount": {
        "defaultValue": null,
        "description": "If true, the tooltip is shown when the component mounts.",
        "name": "shouldShowOnMount",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "hideWhenReferenceHidden": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, hides the tooltip when the reference element is hidden.",
        "name": "hideWhenReferenceHidden",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onTooltipHide": {
        "defaultValue": null,
        "description": "Callback fired when the tooltip is hidden.",
        "name": "onTooltipHide",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onTooltipShow": {
        "defaultValue": null,
        "description": "Callback fired when the tooltip is shown.",
        "name": "onTooltipShow",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "modifiers": {
        "defaultValue": {
          "value": "new Array<Modifier<unknown>>()"
        },
        "description": "Custom Popper.js modifiers.\nhttps://popper.js.org/docs/v2/modifiers/",
        "name": "modifiers",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<Modifier<unknown, object>>[]"
        }
      },
      "position": {
        "defaultValue": {
          "value": "top"
        },
        "description": "The placement of the tooltip relative to the reference element.",
        "name": "position",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TooltipPositions",
          "value": [
            {
              "value": "\"top\""
            },
            {
              "value": "\"right\""
            },
            {
              "value": "\"bottom\""
            },
            {
              "value": "\"left\""
            }
          ]
        }
      },
      "showTrigger": {
        "defaultValue": {
          "value": "Tooltip.hideShowTriggers.MOUSE_ENTER"
        },
        "description": "Events that trigger showing the tooltip.",
        "name": "showTrigger",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogTriggerEvent | DialogTriggerEvent[]"
        }
      },
      "hideTrigger": {
        "defaultValue": {
          "value": "Tooltip.hideShowTriggers.MOUSE_LEAVE"
        },
        "description": "Events that trigger hiding the tooltip.",
        "name": "hideTrigger",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "DialogTriggerEvent | DialogTriggerEvent[]"
        }
      },
      "showOnDialogEnter": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, prevents closing the tooltip when the mouse enters it.",
        "name": "showOnDialogEnter",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "referenceWrapperClassName": {
        "defaultValue": {
          "value": ""
        },
        "description": "Class name applied to the reference wrapper element.",
        "name": "referenceWrapperClassName",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "addKeyboardHideShowTriggersByDefault": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, keyboard focus/blur events behave like mouse enter/leave.",
        "name": "addKeyboardHideShowTriggersByDefault",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "open": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, controls the open state of the tooltip.",
        "name": "open",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "The z-index applied to the tooltip.",
        "name": "zIndex",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "title": {
        "defaultValue": null,
        "description": "The title of the tooltip.",
        "name": "title",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "image": {
        "defaultValue": null,
        "description": "The image displayed inside the tooltip.",
        "name": "image",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "icon": {
        "defaultValue": null,
        "description": "The icon displayed next to the title.",
        "name": "icon",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "maxWidth": {
        "defaultValue": null,
        "description": "The maximum width of the tooltip.",
        "name": "maxWidth",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "dir": {
        "defaultValue": null,
        "description": "The text direction of the tooltip: \"ltr\", \"rtl\", or \"auto\".",
        "name": "dir",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "\"ltr\" | \"rtl\" | \"auto\"",
          "value": [
            {
              "value": "\"ltr\""
            },
            {
              "value": "\"rtl\""
            },
            {
              "value": "\"auto\""
            }
          ]
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          },
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          },
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          },
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "forceRenderWithoutChildren": {
        "defaultValue": null,
        "description": "If true, the tooltip will be rendered even if there are no children.",
        "name": "forceRenderWithoutChildren",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipWithChildrenProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipWithChildrenProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipWithoutChildrenProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The children elements that the tooltip is attached to.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Tooltip/Tooltip.tsx",
          "name": "TooltipWithChildrenProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipWithChildrenProps"
          },
          {
            "fileName": "core/src/components/Tooltip/Tooltip.tsx",
            "name": "TooltipWithoutChildrenProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"
        }
      }
    },
    "import": "import { Tooltip } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/TransitionView/TransitionView.tsx",
    "aggregator": "core",
    "symbols": [
      "default as TransitionView",
      "TransitionViewProps",
      "TransitionViewDirection"
    ],
    "displayName": "TransitionView",
    "description": "",
    "props": {
      "activeStep": {
        "defaultValue": null,
        "description": "The index of the currently active step.",
        "name": "activeStep",
        "parent": {
          "fileName": "core/src/components/TransitionView/TransitionView.types.ts",
          "name": "TransitionViewProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TransitionView/TransitionView.types.ts",
            "name": "TransitionViewProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "direction": {
        "defaultValue": null,
        "description": "The direction of the transition between steps.",
        "name": "direction",
        "parent": {
          "fileName": "core/src/components/TransitionView/TransitionView.types.ts",
          "name": "TransitionViewProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TransitionView/TransitionView.types.ts",
            "name": "TransitionViewProps"
          }
        ],
        "required": true,
        "type": {
          "name": "enum",
          "raw": "SlideDirection",
          "value": [
            {
              "value": "\"forward\""
            },
            {
              "value": "\"backward\""
            }
          ]
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The child elements representing the steps in the transition.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/TransitionView/TransitionView.types.ts",
          "name": "TransitionViewProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/TransitionView/TransitionView.types.ts",
            "name": "TransitionViewProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode[]"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { TransitionView } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/VirtualizedGrid/VirtualizedGrid.tsx",
    "aggregator": "core",
    "symbols": [
      "default as VirtualizedGrid",
      "VirtualizedGridProps",
      "VirtualizedGridItemType"
    ],
    "displayName": "VirtualizedGrid",
    "description": "",
    "props": {
      "items": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "The list of items to be rendered in the grid.",
        "name": "items",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "VirtualizedGridItemType[]"
        }
      },
      "itemRenderer": {
        "defaultValue": {
          "value": "(item: ItemType, _index: number, _style: CSSProperties) => item"
        },
        "description": "Function that renders each item in the grid.",
        "name": "itemRenderer",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: VirtualizedGridItemType, index: number, style: CSSProperties) => VirtualizedGridItemType | GridChildComponentProps<VirtualizedGridItemType>"
        }
      },
      "getRowHeight": {
        "defaultValue": {
          "value": "() => 50"
        },
        "description": "Function that returns the row height.",
        "name": "getRowHeight",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => number"
        }
      },
      "getColumnWidth": {
        "defaultValue": {
          "value": "() => 100"
        },
        "description": "Function that returns the column width.",
        "name": "getColumnWidth",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => number"
        }
      },
      "getItemId": {
        "defaultValue": {
          "value": "(item: ItemType, _index: number) => item.id"
        },
        "description": "Function that returns the unique ID of an item.",
        "name": "getItemId",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: VirtualizedGridItemType, index: number) => string"
        }
      },
      "scrollToId": {
        "defaultValue": {
          "value": "null"
        },
        "description": "The index of the item to scroll to.",
        "name": "scrollToId",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onScroll": {
        "defaultValue": null,
        "description": "Callback fired when the grid is scrolled.",
        "name": "onScroll",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void"
        }
      },
      "onScrollToFinished": {
        "defaultValue": null,
        "description": "Callback fired when scrolling has finished.",
        "name": "onScrollToFinished",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "onItemsRendered": {
        "defaultValue": {
          "value": "null"
        },
        "description": "Callback fired when items are rendered in the grid.",
        "name": "onItemsRendered",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "({ firstItemId, secondItemId, lastItemId, centerItemId, firstItemOffsetEnd, currentOffsetTop }: { firstItemId: string; secondItemId: string; lastItemId: string; centerItemId: string; firstItemOffsetEnd: number; currentOffsetTop: number; }) => void"
        }
      },
      "onItemsRenderedThrottleMs": {
        "defaultValue": {
          "value": "200"
        },
        "description": "The delay (in ms) for throttling the `onItemsRendered` callback.",
        "name": "onItemsRenderedThrottleMs",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onSizeUpdate": {
        "defaultValue": null,
        "description": "Callback fired when the grid size is updated.",
        "name": "onSizeUpdate",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(width: number, height: number) => void"
        }
      },
      "onVerticalScrollbarVisiblityChange": {
        "defaultValue": {
          "value": "null"
        },
        "description": "Callback fired when the vertical scrollbar visibility changes.",
        "name": "onVerticalScrollbarVisiblityChange",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: boolean) => void"
        }
      },
      "scrollableClassName": {
        "defaultValue": null,
        "description": "Class name applied to the scrollable container.",
        "name": "scrollableClassName",
        "parent": {
          "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
          "name": "VirtualizedGridProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedGrid/VirtualizedGrid.tsx",
            "name": "VirtualizedGridProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { VirtualizedGrid } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/VirtualizedList/VirtualizedList.tsx",
    "aggregator": "core",
    "symbols": [
      "default as VirtualizedList",
      "VirtualizedListProps",
      "VirtualizedListItem",
      "VirtualizedListLayout",
      "VirtualizedListScrollDirection"
    ],
    "displayName": "VirtualizedList",
    "description": "",
    "props": {
      "scrollableClassName": {
        "defaultValue": null,
        "description": "Class name applied to the scrollable container.",
        "name": "scrollableClassName",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "layout": {
        "defaultValue": {
          "value": "vertical"
        },
        "description": "The orientation of the list.",
        "name": "layout",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "Layout",
          "value": [
            {
              "value": "\"vertical\""
            },
            {
              "value": "\"horizontal\""
            }
          ]
        }
      },
      "items": {
        "defaultValue": {
          "value": "[]"
        },
        "description": "The list of items to be rendered.",
        "name": "items",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "VirtualizedListItem[]"
        }
      },
      "itemRenderer": {
        "defaultValue": {
          "value": "(item: VirtualizedListItem, _index: number, _style: CSSProperties) => item as ReactElement"
        },
        "description": "Function to render each item in the list.",
        "name": "itemRenderer",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: VirtualizedListItem, index: number, style: CSSProperties) => Element | ReactElement<any, string | JSXElementConstructor<any>>"
        }
      },
      "getItemHeight": {
        "defaultValue": {
          "value": "(item: VirtualizedListItem, _index: number) => item.height"
        },
        "description": "@deprecated - use `getItemSize`.",
        "name": "getItemHeight",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: VirtualizedListItem, index: number) => number"
        }
      },
      "getItemSize": {
        "defaultValue": {
          "value": "null"
        },
        "description": "Function to get the size (height/width) of each item, based on layout.",
        "name": "getItemSize",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: VirtualizedListItem, index: number) => number"
        }
      },
      "getItemId": {
        "defaultValue": {
          "value": "(item: VirtualizedListItem, _index: number) => item.id"
        },
        "description": "Function to get the unique ID of an item.",
        "name": "getItemId",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(item: VirtualizedListItem, index: number) => string"
        }
      },
      "onScrollToFinished": {
        "defaultValue": null,
        "description": "Callback fired when the scroll animation is finished.",
        "name": "onScrollToFinished",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "() => void"
        }
      },
      "overscanCount": {
        "defaultValue": {
          "value": "0"
        },
        "description": "Number of items to render above and below the visible portion.",
        "name": "overscanCount",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "scrollDuration": {
        "defaultValue": {
          "value": "200"
        },
        "description": "The duration of the scroll animation in milliseconds.",
        "name": "scrollDuration",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onItemsRendered": {
        "defaultValue": null,
        "description": "Callback fired when items are rendered.",
        "name": "onItemsRendered",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "({ firstItemId, secondItemId, lastItemId, centerItemId, firstItemOffsetEnd, currentOffsetTop }: { firstItemId: string; secondItemId: string; lastItemId: string; centerItemId: string; firstItemOffsetEnd: number; currentOffsetTop: number; }) => void"
        }
      },
      "onItemsRenderedThrottleMs": {
        "defaultValue": {
          "value": "200"
        },
        "description": "The delay (in ms) for throttling the `onItemsRendered` callback.",
        "name": "onItemsRenderedThrottleMs",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "onSizeUpdate": {
        "defaultValue": null,
        "description": "Callback fired when the list size changes.",
        "name": "onSizeUpdate",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(width: number, height: number) => void"
        }
      },
      "onVerticalScrollbarVisiblityChange": {
        "defaultValue": {
          "value": "null"
        },
        "description": "@deprecated - use `onLayoutDirectionScrollbarVisibilityChange`.",
        "name": "onVerticalScrollbarVisiblityChange",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: boolean) => void"
        }
      },
      "onLayoutDirectionScrollbarVisibilityChange": {
        "defaultValue": {
          "value": "null"
        },
        "description": "Callback fired when the vertical or horizontal scrollbar visibility changes.",
        "name": "onLayoutDirectionScrollbarVisibilityChange",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(value: boolean) => void"
        }
      },
      "role": {
        "defaultValue": null,
        "description": "The ARIA role attribute applied to the list.",
        "name": "role",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "ariaLabel": {
        "defaultValue": null,
        "description": "The ARIA label for the list.",
        "name": "ariaLabel",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Custom inline styles applied to the list.",
        "name": "style",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "CSSProperties"
        }
      },
      "scrollToId": {
        "defaultValue": null,
        "description": "The ID of the item to scroll to.",
        "name": "scrollToId",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "virtualListRef": {
        "defaultValue": null,
        "description": "Reference to the virtualized list component.",
        "name": "virtualListRef",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ForwardedRef<HTMLElement>"
        }
      },
      "onScroll": {
        "defaultValue": null,
        "description": "Callback fired when the list is scrolled.",
        "name": "onScroll",
        "parent": {
          "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
          "name": "VirtualizedListProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/VirtualizedList/VirtualizedList.tsx",
            "name": "VirtualizedListProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { VirtualizedList } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Typography/Typography.tsx",
    "aggregator": "core",
    "symbols": [
      "default as Typography",
      "TypographyProps",
      "TypographyColor",
      "TypographyAlign"
    ],
    "displayName": "Typography",
    "description": "",
    "props": {
      "element": {
        "defaultValue": {
          "value": "span"
        },
        "description": "The HTML element tag used for the text component.",
        "name": "element",
        "parent": {
          "fileName": "core/src/components/Typography/Typography.tsx",
          "name": "TypographyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Typography/Typography.tsx",
            "name": "TypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "The content inside the typography component.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Typography/Typography.tsx",
          "name": "TypographyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Typography/Typography.tsx",
            "name": "TypographyProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ElementContent"
        }
      },
      "color": {
        "defaultValue": {
          "value": "primary"
        },
        "description": "The text color.",
        "name": "color",
        "parent": {
          "fileName": "core/src/components/Typography/Typography.tsx",
          "name": "TypographyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Typography/Typography.tsx",
            "name": "TypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TypographyColor",
          "value": [
            {
              "value": "\"primary\""
            },
            {
              "value": "\"secondary\""
            },
            {
              "value": "\"onPrimary\""
            },
            {
              "value": "\"onInverted\""
            },
            {
              "value": "\"fixedLight\""
            },
            {
              "value": "\"fixedDark\""
            },
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"negative\""
            }
          ]
        }
      },
      "align": {
        "defaultValue": {
          "value": "start"
        },
        "description": "The text alignment.",
        "name": "align",
        "parent": {
          "fileName": "core/src/components/Typography/Typography.tsx",
          "name": "TypographyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Typography/Typography.tsx",
            "name": "TypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "TypographyAlign",
          "value": [
            {
              "value": "\"inherit\""
            },
            {
              "value": "\"start\""
            },
            {
              "value": "\"center\""
            },
            {
              "value": "\"end\""
            }
          ]
        }
      },
      "ellipsis": {
        "defaultValue": {
          "value": "true"
        },
        "description": "If true, truncates overflowing text with an ellipsis.",
        "name": "ellipsis",
        "parent": {
          "fileName": "core/src/components/Typography/Typography.tsx",
          "name": "TypographyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Typography/Typography.tsx",
            "name": "TypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "maxLines": {
        "defaultValue": {
          "value": "1"
        },
        "description": "The maximum number of lines before truncating with an ellipsis.",
        "name": "maxLines",
        "parent": {
          "fileName": "core/src/components/Typography/Typography.tsx",
          "name": "TypographyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Typography/Typography.tsx",
            "name": "TypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "tooltipProps": {
        "defaultValue": null,
        "description": "Props passed to the tooltip displayed when hovering over the text.",
        "name": "tooltipProps",
        "parent": {
          "fileName": "core/src/components/Typography/Typography.tsx",
          "name": "TypographyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Typography/Typography.tsx",
            "name": "TypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "Partial<TooltipProps>"
        }
      },
      "withoutTooltip": {
        "defaultValue": {
          "value": "false"
        },
        "description": "If true, disables the tooltip that appears when text is truncated.",
        "name": "withoutTooltip",
        "parent": {
          "fileName": "core/src/components/Typography/Typography.tsx",
          "name": "TypographyProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Typography/Typography.tsx",
            "name": "TypographyProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Typography } from \"@vibe/core\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Modal/footers/ModalFooter/ModalFooter.tsx",
    "aggregator": "next",
    "symbols": [
      "default as ModalFooter",
      "ModalFooterProps"
    ],
    "displayName": "ModalFooter",
    "description": "",
    "props": {
      "renderSideAction": {
        "defaultValue": null,
        "description": "Content displayed on the left side of the footer.",
        "name": "renderSideAction",
        "parent": {
          "fileName": "core/src/components/Modal/footers/ModalFooter/ModalFooter.types.ts",
          "name": "ModalFooterProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/footers/ModalFooter/ModalFooter.types.ts",
            "name": "ModalFooterProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "primaryButton": {
        "defaultValue": null,
        "description": "Props for the primary action button.",
        "name": "primaryButton",
        "parent": {
          "fileName": "core/src/components/Modal/footers/ModalFooterBase/ModalFooterBase.types.ts",
          "name": "ModalFooterBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/footers/ModalFooterBase/ModalFooterBase.types.ts",
            "name": "ModalFooterBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ModalFooterActionProps"
        }
      },
      "secondaryButton": {
        "defaultValue": null,
        "description": "Props for the optional secondary action button.",
        "name": "secondaryButton",
        "parent": {
          "fileName": "core/src/components/Modal/footers/ModalFooterBase/ModalFooterBase.types.ts",
          "name": "ModalFooterBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/footers/ModalFooterBase/ModalFooterBase.types.ts",
            "name": "ModalFooterBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ModalFooterActionProps"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ModalFooter } from \"@vibe/core/next\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Modal/footers/ModalFooterWizard/ModalFooterWizard.tsx",
    "aggregator": "next",
    "symbols": [
      "default as ModalFooterWizard",
      "ModalFooterWizardProps"
    ],
    "displayName": "ModalFooterWizard",
    "description": "",
    "props": {
      "stepCount": {
        "defaultValue": null,
        "description": "The total number of steps in the wizard.\nRenders the corresponding number of step indicators (\"dots\") in the footer.",
        "name": "stepCount",
        "parent": {
          "fileName": "core/src/components/Modal/footers/ModalFooterWizard/ModalFooterWizard.types.ts",
          "name": "ModalFooterWizardProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/footers/ModalFooterWizard/ModalFooterWizard.types.ts",
            "name": "ModalFooterWizardProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "activeStep": {
        "defaultValue": null,
        "description": "The current active step (0-based index).\nHighlights the corresponding step indicator (\"dot\") in the footer.",
        "name": "activeStep",
        "parent": {
          "fileName": "core/src/components/Modal/footers/ModalFooterWizard/ModalFooterWizard.types.ts",
          "name": "ModalFooterWizardProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/footers/ModalFooterWizard/ModalFooterWizard.types.ts",
            "name": "ModalFooterWizardProps"
          }
        ],
        "required": true,
        "type": {
          "name": "number"
        }
      },
      "onStepClick": {
        "defaultValue": null,
        "description": "Callback fired when a step indicator (\"dot\") is clicked.",
        "name": "onStepClick",
        "parent": {
          "fileName": "core/src/components/Modal/footers/ModalFooterWizard/ModalFooterWizard.types.ts",
          "name": "ModalFooterWizardProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/footers/ModalFooterWizard/ModalFooterWizard.types.ts",
            "name": "ModalFooterWizardProps"
          }
        ],
        "required": true,
        "type": {
          "name": "(stepIndex: number) => void"
        }
      },
      "primaryButton": {
        "defaultValue": null,
        "description": "Props for the primary action button.",
        "name": "primaryButton",
        "parent": {
          "fileName": "core/src/components/Modal/footers/ModalFooterBase/ModalFooterBase.types.ts",
          "name": "ModalFooterBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/footers/ModalFooterBase/ModalFooterBase.types.ts",
            "name": "ModalFooterBaseProps"
          }
        ],
        "required": true,
        "type": {
          "name": "ModalFooterActionProps"
        }
      },
      "secondaryButton": {
        "defaultValue": null,
        "description": "Props for the optional secondary action button.",
        "name": "secondaryButton",
        "parent": {
          "fileName": "core/src/components/Modal/footers/ModalFooterBase/ModalFooterBase.types.ts",
          "name": "ModalFooterBaseProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/footers/ModalFooterBase/ModalFooterBase.types.ts",
            "name": "ModalFooterBaseProps"
          }
        ],
        "required": false,
        "type": {
          "name": "ModalFooterActionProps"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ModalFooterWizard } from \"@vibe/core/next\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Modal/layouts/ModalBasicLayout/ModalBasicLayout.tsx",
    "aggregator": "next",
    "symbols": [
      "default as ModalBasicLayout",
      "ModalBasicLayoutProps"
    ],
    "displayName": "ModalBasicLayout",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of the layout, structured as:\n1. Header content\n2. Main content",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Modal/layouts/ModalBasicLayout/ModalBasicLayout.types.ts",
          "name": "ModalBasicLayoutProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/layouts/ModalBasicLayout/ModalBasicLayout.types.ts",
            "name": "ModalBasicLayoutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ModalBasicLayout } from \"@vibe/core/next\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Modal/layouts/ModalMediaLayout/ModalMediaLayout.tsx",
    "aggregator": "next",
    "symbols": [
      "default as ModalMediaLayout",
      "ModalMediaLayoutProps"
    ],
    "displayName": "ModalMediaLayout",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of the layout, structured as:\n1. Media content\n2. Header content\n3. Main content",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Modal/layouts/ModalMediaLayout/ModalMediaLayout.types.ts",
          "name": "ModalMediaLayoutProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/layouts/ModalMediaLayout/ModalMediaLayout.types.ts",
            "name": "ModalMediaLayoutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ModalMediaLayout } from \"@vibe/core/next\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Modal/layouts/ModalSideBySideLayout/ModalSideBySideLayout.tsx",
    "aggregator": "next",
    "symbols": [
      "default as ModalSideBySideLayout",
      "ModalSideBySideLayoutProps"
    ],
    "displayName": "ModalSideBySideLayout",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The content of the layout, structured as:\n1. Header content\n2. Main content\n3. Media content",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Modal/layouts/ModalSideBySideLayout/ModalSideBySideLayout.types.ts",
          "name": "ModalSideBySideLayoutProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/layouts/ModalSideBySideLayout/ModalSideBySideLayout.types.ts",
            "name": "ModalSideBySideLayoutProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ModalSideBySideLayout } from \"@vibe/core/next\"",
    "subComponents": []
  },
  {
    "filePath": "src/components/Modal/Modal/Modal.tsx",
    "aggregator": "next",
    "symbols": [
      "default as Modal"
    ],
    "displayName": "Modal",
    "description": "",
    "props": {
      "id": {
        "defaultValue": null,
        "description": "Unique identifier for the modal.",
        "name": "id",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": {
          "name": "string"
        }
      },
      "show": {
        "defaultValue": null,
        "description": "Controls the visibility of the modal.",
        "name": "show",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": {
          "name": "boolean"
        }
      },
      "size": {
        "defaultValue": {
          "value": "medium"
        },
        "description": "Determines the width and max-height of the modal.",
        "name": "size",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ModalSize",
          "value": [
            {
              "value": "\"small\""
            },
            {
              "value": "\"medium\""
            },
            {
              "value": "\"large\""
            },
            {
              "value": "\"full-view\""
            }
          ]
        }
      },
      "closeButtonTheme": {
        "defaultValue": null,
        "description": "Theme color for the close button.",
        "name": "closeButtonTheme",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "enum",
          "raw": "ModalTopActionsTheme",
          "value": [
            {
              "value": "\"dark\""
            },
            {
              "value": "\"light\""
            }
          ]
        }
      },
      "closeButtonAriaLabel": {
        "defaultValue": null,
        "description": "Accessibility label for the close button.",
        "name": "closeButtonAriaLabel",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "onClose": {
        "defaultValue": {
          "value": "() => {}"
        },
        "description": "Callback fired when the modal should close.",
        "name": "onClose",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(event: any) => void"
        }
      },
      "autoFocus": {
        "defaultValue": {
          "value": "true"
        },
        "description": "This is intended for advanced use-cases.\nIt allows you to control the default focus behavior when the modal mounts.\nMake sure to use this prop only when you understand the implications.\n\nDetermines if focus should automatically move to the first focusable element when the component mounts.\nWhen set to `false` - disables the automatic focus behavior.\n- Notice this might break keyboard and general accessibility and should be used with caution.",
        "name": "autoFocus",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "onFocusAttempt": {
        "defaultValue": null,
        "description": "This is intended for advanced use-cases.\nIt allows you to control the focus behavior when moving between elements within the modal.\nMake sure to use this prop only when you understand the implications.\n\nCalled whenever focus is about to move to a new element within the modal.\nReturn:\n- `true` to allow normal flow focus.\n- `false` to block it (let the browser decide, usually moves to body).\n  - Notice this might break keyboard accessibility and should be used with caution.\n- An HTMLElement to redirect focus to instead of normal flow.\n- Any other value (e.g., null, undefined) would act as `false`.",
        "name": "onFocusAttempt",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "(nextFocusedElement?: HTMLElement) => boolean | HTMLElement"
        }
      },
      "renderHeaderAction": {
        "defaultValue": null,
        "description": "Additional action to render in the header area.",
        "name": "renderHeaderAction",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "anchorElementRef": {
        "defaultValue": null,
        "description": "Reference to an element that triggered the modal, used for animations.",
        "name": "anchorElementRef",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.RefObject<HTMLElement>"
        }
      },
      "alertModal": {
        "defaultValue": null,
        "description": "When true, prevents closing the modal when clicking the overlay (\"click-outside\") or pressing ESC.",
        "name": "alertModal",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "boolean"
        }
      },
      "container": {
        "defaultValue": {
          "value": "document.body"
        },
        "description": "The target element to render the modal into.",
        "name": "container",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "children": {
        "defaultValue": null,
        "description": "Modal content.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "style": {
        "defaultValue": null,
        "description": "Additional inline styles for the modal.",
        "name": "style",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.CSSProperties"
        }
      },
      "zIndex": {
        "defaultValue": null,
        "description": "The z-index to be used for the modal and overlay.",
        "name": "zIndex",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "number"
        }
      },
      "aria-labelledby": {
        "defaultValue": null,
        "description": "If provided, overrides the automatically generated aria-labelledby, that is assigned when used with ModalHeader.",
        "name": "aria-labelledby",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "aria-describedby": {
        "defaultValue": null,
        "description": "If provided, overrides the automatically generated aria-describedby, that is assigned when used with ModalHeader.",
        "name": "aria-describedby",
        "parent": {
          "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
          "name": "ModalProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/Modal/Modal.types.tsx",
            "name": "ModalProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { Modal } from \"@vibe/core/next\"",
    "subComponents": [
      "Modal.types"
    ]
  },
  {
    "filePath": "src/components/Modal/ModalHeader/ModalHeader.tsx",
    "aggregator": "next",
    "symbols": [
      "default as ModalHeader",
      "ModalHeaderProps"
    ],
    "displayName": "ModalHeader",
    "description": "",
    "props": {
      "title": {
        "defaultValue": null,
        "description": "Main heading text of the modal.\n\n- If you pass a **string**, `ModalHeader` will generate an internal ID and communicate it to the parent `Modal`\n  so that `aria-labelledby` is set automatically (unless `Modal` receives `aria-labelledby` prop).\n- If you pass a **ReactNode** (such as a custom component), **you must**:\n  1. Assign an **`id`** to that element (or a nested element), and\n  2. Pass that **same `id`** as the `aria-labelledby` prop to the `Modal`.\n\nThis ensures that assistive technologies know which element is the modal's title.\n@see [WAI-ARIA Authoring Practices for Dialog (Modal)](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/#wai-ariaroles,states,andproperties)",
        "name": "title",
        "declarations": [
          {
            "fileName": "core/src/components/Modal/ModalHeader/ModalHeader.types.ts",
            "name": "TypeLiteral"
          }
        ],
        "required": true,
        "type": {
          "name": "any"
        }
      },
      "description": {
        "defaultValue": null,
        "description": "Descriptive text or content below the title.\n- If you pass a **string**, this will automatically set an internally generated `aria-describedby` on the parent Modal.\n- If you pass a **ReactNode** (e.g., a complex component), we recommend assigning an **`id`** to that component (or a nested element),\n  and then pass that same ID in `aria-describedby` to the **Modal** (overriding the internal ID).\n\nThis ensures that assistive technologies know which element is the modal's descriptive content.\n@see [WAI-ARIA Authoring Practices for Dialog (Modal)](https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/#wai-ariaroles,states,andproperties)",
        "name": "description",
        "parent": {
          "fileName": "core/src/components/Modal/ModalHeader/ModalHeader.types.ts",
          "name": "WithDescription"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/ModalHeader/ModalHeader.types.ts",
            "name": "WithDescription"
          },
          {
            "fileName": "core/src/components/Modal/ModalHeader/ModalHeader.types.ts",
            "name": "WithoutDescription"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "descriptionIcon": {
        "defaultValue": null,
        "description": "Icon to display before the description. Can only be passed when description is supplied.",
        "name": "descriptionIcon",
        "parent": {
          "fileName": "core/src/components/Modal/ModalHeader/ModalHeader.types.ts",
          "name": "WithDescription"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/ModalHeader/ModalHeader.types.ts",
            "name": "WithDescription"
          },
          {
            "fileName": "core/src/components/Modal/ModalHeader/ModalHeader.types.ts",
            "name": "WithoutDescription"
          }
        ],
        "required": false,
        "type": {
          "name": "any"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ModalHeader } from \"@vibe/core/next\"",
    "parentComponent": "Modal",
    "subComponents": []
  },
  {
    "filePath": "src/components/Modal/ModalContent/ModalContent.tsx",
    "aggregator": "next",
    "symbols": [
      "default as ModalContent",
      "ModalContentProps"
    ],
    "displayName": "ModalContent",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The main content of the modal.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Modal/ModalContent/ModalContent.types.ts",
          "name": "ModalContentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/ModalContent/ModalContent.types.ts",
            "name": "ModalContentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ModalContent } from \"@vibe/core/next\"",
    "parentComponent": "Modal",
    "subComponents": []
  },
  {
    "filePath": "src/components/Modal/ModalMedia/ModalMedia.tsx",
    "aggregator": "next",
    "symbols": [
      "default as ModalMedia",
      "ModalMediaProps"
    ],
    "displayName": "ModalMedia",
    "description": "",
    "props": {
      "children": {
        "defaultValue": null,
        "description": "The media content displayed in the modal.",
        "name": "children",
        "parent": {
          "fileName": "core/src/components/Modal/ModalMedia/ModalMedia.types.ts",
          "name": "ModalMediaProps"
        },
        "declarations": [
          {
            "fileName": "core/src/components/Modal/ModalMedia/ModalMedia.types.ts",
            "name": "ModalMediaProps"
          }
        ],
        "required": true,
        "type": {
          "name": "React.ReactNode"
        }
      },
      "className": {
        "defaultValue": null,
        "description": "A CSS class name to apply to the component.",
        "name": "className",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "data-testid": {
        "defaultValue": null,
        "description": "A unique identifier for testing purposes.",
        "name": "data-testid",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      },
      "id": {
        "defaultValue": null,
        "description": "An HTML id attribute for the component.",
        "name": "id",
        "parent": {
          "fileName": "core/src/types/VibeComponentProps.ts",
          "name": "VibeComponentProps"
        },
        "declarations": [
          {
            "fileName": "core/src/types/VibeComponentProps.ts",
            "name": "VibeComponentProps"
          }
        ],
        "required": false,
        "type": {
          "name": "string"
        }
      }
    },
    "import": "import { ModalMedia } from \"@vibe/core/next\"",
    "parentComponent": "Modal",
    "subComponents": []
  }
]