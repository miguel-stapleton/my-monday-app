{"version":3,"file":"TextWithHighlight.js","sources":["../../../../src/components/TextWithHighlight/TextWithHighlight.tsx"],"sourcesContent":["import { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { forwardRef, useMemo, useRef } from \"react\";\nimport Tooltip, { TooltipProps } from \"../../components/Tooltip/Tooltip\";\nimport useIsOverflowing from \"../../hooks/useIsOverflowing/useIsOverflowing\";\nimport useIsomorphicLayoutEffect from \"../../hooks/ssr/useIsomorphicLayoutEffect\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport styles from \"./TextWithHighlight.module.scss\";\nimport { TooltipPositions } from \"../Tooltip/Tooltip.types\";\n\nconst getTextPart = (\n  text: string,\n  key: number,\n  shouldHighlight: boolean,\n  wrappingTextTag: keyof JSX.IntrinsicElements = \"em\",\n  wrappingElementClassName: string\n) => {\n  const WrappingElement = wrappingTextTag;\n  if (shouldHighlight) {\n    return (\n      <WrappingElement className={cx(styles.highlightText, wrappingElementClassName)} key={key}>\n        {text}\n      </WrappingElement>\n    );\n  }\n  return <span key={key}>{text}</span>;\n};\n\nexport interface TextWithHighlightProps extends VibeComponentProps {\n  /**\n   * The text content to display.\n   */\n  text?: string;\n  /**\n   * The term to highlight within the text.\n   */\n  highlightTerm?: string;\n  /**\n   * The maximum number of highlighted terms allowed.\n   */\n  limit?: number;\n  /**\n   * If true, the highlight search is case-insensitive.\n   */\n  ignoreCase?: boolean;\n  /**\n   * If true, truncates overflowing text with an ellipsis.\n   */\n  useEllipsis?: boolean;\n  /**\n   * If true, allows splitting the highlight term into separate words.\n   */\n  allowTermSplit?: boolean;\n  /**\n   * The number of lines to display before truncating with an ellipsis.\n   */\n  linesToClamp?: number;\n  /**\n   * Tooltip content displayed when there is no overflow.\n   */\n  nonEllipsisTooltip?: string;\n  /**\n   * The HTML tag used to wrap highlighted text.\n   */\n  wrappingTextTag?: keyof JSX.IntrinsicElements;\n  /**\n   * Class name applied to the wrapping element of highlighted text.\n   */\n  wrappingElementClassName?: string;\n  /**\n   * The position of the tooltip when displayed.\n   * @deprecated Use `tooltipProps.position` instead.\n   */\n  tooltipPosition?: TooltipPositions;\n  /**\n   * Additional props to customize the tooltip component.\n   */\n  tooltipProps?: Partial<TooltipProps>;\n}\n\nconst TextWithHighlight: React.FC<TextWithHighlightProps> = forwardRef(\n  (\n    {\n      className,\n      id,\n      text = \"\",\n      highlightTerm,\n      limit,\n      useEllipsis = true,\n      linesToClamp = 3,\n      ignoreCase = true,\n      allowTermSplit = true,\n      nonEllipsisTooltip,\n      tooltipPosition,\n      wrappingTextTag = \"em\",\n      wrappingElementClassName,\n      tooltipProps = {},\n      \"data-testid\": dataTestId\n    }: TextWithHighlightProps,\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const textWithHighlights = useMemo(() => {\n      if (!text || !highlightTerm || limit === 0) return text;\n      let finalTerm = escapeRegExp(highlightTerm);\n      if (allowTermSplit) {\n        finalTerm = finalTerm.split(\" \").join(\"|\");\n      }\n      const regex = new RegExp(`(${finalTerm})`, ignoreCase ? \"i\" : \"\");\n      const tokens = text.split(regex);\n      const parts = [];\n      // Tokens include the term search (in odd indices)\n      let highlightTermsCount = 0;\n      let key = 0;\n      for (let i = 0; i < tokens.length; i++) {\n        // skip empty tokens\n        if (tokens[i]) {\n          // adding highlight part\n          const isTermPart = i % 2 === 1;\n          const shouldHighlight = isTermPart && (!limit || limit < 0 || highlightTermsCount < limit);\n          parts.push(getTextPart(tokens[i], key++, shouldHighlight, wrappingTextTag, wrappingElementClassName));\n          if (isTermPart) highlightTermsCount++;\n        }\n      }\n\n      return parts;\n    }, [text, highlightTerm, limit, ignoreCase, allowTermSplit, wrappingTextTag, wrappingElementClassName]);\n\n    const isOverflowing = useIsOverflowing({ ref: useEllipsis && componentRef });\n\n    useIsomorphicLayoutEffect(() => {\n      if (componentRef.current) {\n        componentRef.current.style.setProperty(\"--heading-clamp-lines\", linesToClamp.toString());\n      }\n    }, [componentRef, linesToClamp, isOverflowing]);\n\n    const Element = (\n      <div\n        ref={mergedRef}\n        className={cx(styles.textWithHighlightWrapper, className, {\n          [styles.withEllipsis]: useEllipsis\n        })}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TEXT_WITH_HIGHLIGHT, id)}\n      >\n        {textWithHighlights}\n      </div>\n    );\n\n    if (isOverflowing || nonEllipsisTooltip) {\n      const tooltipContent = isOverflowing ? text : nonEllipsisTooltip;\n      return (\n        <Tooltip content={tooltipContent} position={tooltipPosition} {...tooltipProps}>\n          {Element}\n        </Tooltip>\n      );\n    }\n    return Element;\n  }\n);\n\nexport default TextWithHighlight;\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n}\n"],"names":["getTextPart","text","key","shouldHighlight","React","arguments","length","undefined","className","cx","styles","highlightText","TextWithHighlight","forwardRef","_ref","ref","id","_ref$text","highlightTerm","limit","_ref$useEllipsis","useEllipsis","_ref$linesToClamp","linesToClamp","_ref$ignoreCase","ignoreCase","_ref$allowTermSplit","allowTermSplit","nonEllipsisTooltip","tooltipPosition","_ref$wrappingTextTag","wrappingTextTag","wrappingElementClassName","_ref$tooltipProps","tooltipProps","dataTestId","componentRef","useRef","mergedRef","useMergeRef","textWithHighlights","useMemo","finalTerm","replace","split","join","regex","RegExp","concat","tokens","parts","highlightTermsCount","i","isTermPart","push","isOverflowing","useIsOverflowing","useIsomorphicLayoutEffect","current","style","setProperty","Element","createElement","textWithHighlightWrapper","_defineProperty","withEllipsis","getTestId","ComponentDefaultTestId","TEXT_WITH_HIGHLIGHT","Tooltip","Object","assign","content","position"],"mappings":"qfAWA,IAAMA,EAAc,SAClBC,EACAC,EACAC,GAKA,OAAIA,EAEAC,gBAN2CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,KAM3B,CAACG,UAAWC,EAAGC,EAAOC,cALVN,UAAAC,OAAAD,EAAAA,kBAAAE,GAKoDL,IAAKA,GAClFD,GAIAG,wBAAMF,IAAKA,GAAMD,EAC1B,EAsDMW,EAAsDC,GAC1D,SAAAC,EAkBEC,GACE,IAjBAP,EAASM,EAATN,UACAQ,EAAEF,EAAFE,GAAEC,EAAAH,EACFb,KAAAA,OAAO,IAAHgB,EAAG,GAAEA,EACTC,EAAaJ,EAAbI,cACAC,EAAKL,EAALK,MAAKC,EAAAN,EACLO,YAAAA,OAAc,IAAHD,GAAOA,EAAAE,EAAAR,EAClBS,aAAAA,OAAe,IAAHD,EAAG,EAACA,EAAAE,EAAAV,EAChBW,WAAAA,OAAa,IAAHD,GAAOA,EAAAE,EAAAZ,EACjBa,eAAAA,OAAiB,IAAHD,GAAOA,EACrBE,EAAkBd,EAAlBc,mBACAC,EAAef,EAAfe,gBAAeC,EAAAhB,EACfiB,gBAAAA,OAAkB,IAAHD,EAAG,KAAIA,EACtBE,EAAwBlB,EAAxBkB,yBAAwBC,EAAAnB,EACxBoB,aAAAA,OAAY,IAAAD,EAAG,CAAE,EAAAA,EACFE,EAAUrB,EAAzB,eAIIsB,EAAeC,EAAO,MACtBC,EAAYC,EAAYxB,EAAKqB,GAE7BI,EAAqBC,GAAQ,WACjC,IAAKxC,IAASiB,GAA2B,IAAVC,EAAa,OAAOlB,EACnD,IAAIyC,EAAyBxB,EA4DnByB,QAAQ,sBAAuB,QA3DrChB,IACFe,EAAYA,EAAUE,MAAM,KAAKC,KAAK,MAQxC,IANA,IAAMC,EAAYC,WAAMC,OAAKN,EAAS,KAAKjB,EAAa,IAAM,IACxDwB,EAAShD,EAAK2C,MAAME,GACpBI,EAAQ,GAEVC,EAAsB,EACtBjD,EAAM,EACDkD,EAAI,EAAOH,EAAO3C,OAAX8C,EAAmBA,IAEjC,GAAIH,EAAOG,GAAI,CAEb,IAAMC,EAAaD,EAAI,GAAM,EAE7BF,EAAMI,KAAKtD,EAAYiD,EAAOG,GAAIlD,IADVmD,KAAgBlC,GAAiB,EAARA,GAAmCA,EAAtBgC,GACJpB,EAAiBC,IACvEqB,GAAYF,GACjB,CAGH,OAAOD,CACT,GAAG,CAACjD,EAAMiB,EAAeC,EAAOM,EAAYE,EAAgBI,EAAiBC,IAEvEuB,EAAgBC,EAAiB,CAAEzC,IAAKM,GAAee,IAE7DqB,GAA0B,WACpBrB,EAAasB,SACftB,EAAasB,QAAQC,MAAMC,YAAY,wBAAyBrC,KAEnE,GAAE,CAACa,EAAcb,EAAcgC,IAEhC,IAAMM,EACJzD,EACE0D,cAAA,MAAA,CAAA/C,IAAKuB,EACL9B,UAAWC,EAAGC,EAAOqD,yBAA0BvD,EAASwD,KACrDtD,EAAOuD,aAAe5C,IAEzBL,GAAIA,EACS,cAAAmB,GAAc+B,EAAUC,EAAuBC,oBAAqBpD,IAEhFwB,GAIL,OAAIe,GAAiB3B,EAGjBxB,EAAC0D,cAAAO,EAAQC,OAAAC,OAAA,CAAAC,QAFYjB,EAAgBtD,EAAO2B,EAEV6C,SAAU5C,GAAqBK,GAC9D2B,GAIAA,CACT"}