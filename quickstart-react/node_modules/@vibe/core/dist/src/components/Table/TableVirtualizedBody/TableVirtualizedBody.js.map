{"version":3,"file":"TableVirtualizedBody.js","sources":["../../../../../src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx"],"sourcesContent":["import React, { ComponentType, forwardRef, useCallback, useEffect, useMemo } from \"react\";\nimport { VibeComponentProps } from \"../../../types\";\nimport TableBody from \"../TableBody/TableBody\";\nimport styles from \"./TableVirtualizedBody.module.scss\";\nimport { FixedSizeList as List, ListChildComponentProps, ScrollDirection } from \"react-window\";\nimport { useTable } from \"../context/TableContext/TableContext\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { RowHeights } from \"../Table/TableConsts\";\nimport AutoSizer, { Size as AutoSizerSize } from \"react-virtualized-auto-sizer\";\nimport { useTableRowMenu } from \"../context/TableRowMenuContext/TableRowMenuContext\";\nimport { TableColumn } from \"../Table/Table\";\n\nexport type TableVirtualizedRow = Record<string, unknown> & { id: string };\n\nexport interface TableVirtualizedBodyProps<T extends TableVirtualizedRow = TableVirtualizedRow>\n  extends VibeComponentProps {\n  /**\n   * The list of items to render in the virtualized table.\n   */\n  items: T[];\n  /**\n   * Function to render a row in the table.\n   */\n  rowRenderer: (item: T) => JSX.Element;\n  /**\n   * Callback function triggered on scroll.\n   */\n  onScroll?: (horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void;\n  /**\n   * The columns configuration for the table.\n   */\n  columns?: TableColumn[];\n  /**\n   * Function to render the table header.\n   */\n  headerRenderer?: (columns: TableColumn[]) => JSX.Element;\n  /**\n   * Number of rows to render above/below the visible area.\n   */\n  overscanCount?: number;\n}\n\nconst MemoizedRow = React.memo(\n  <T extends TableVirtualizedRow>({\n    item,\n    rowRenderer,\n    style\n  }: {\n    item: T;\n    rowRenderer: (item: T) => JSX.Element;\n    style: React.CSSProperties;\n  }) => {\n    const element = rowRenderer(item);\n    const { width: _width, ...styleWithoutWidth } = style;\n    return React.cloneElement(element, {\n      style: { ...styleWithoutWidth, ...element.props?.style }\n    });\n  }\n);\n\nconst TableVirtualizedBody = forwardRef(\n  <T extends TableVirtualizedRow = TableVirtualizedRow>(\n    {\n      items,\n      rowRenderer,\n      onScroll,\n      columns,\n      headerRenderer,\n      id,\n      className,\n      \"data-testid\": dataTestId,\n      overscanCount = 1\n    }: TableVirtualizedBodyProps<T>,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const { size, virtualizedListRef, onVirtualizedListScroll, markTableAsVirtualized } = useTable();\n    const { resetHoveredRow } = useTableRowMenu();\n    const virtualizedWithHeader = !!columns && !!headerRenderer;\n\n    const handleOuterScroll = useCallback(\n      (e: Event) => {\n        const target = e.target as HTMLDivElement;\n        resetHoveredRow();\n        onVirtualizedListScroll({\n          target,\n          currentTarget: target\n        } as unknown as React.UIEvent<HTMLDivElement>);\n      },\n      [resetHoveredRow, onVirtualizedListScroll]\n    );\n\n    useEffect(() => {\n      const scrollElement = virtualizedListRef.current;\n      if (!scrollElement) return;\n\n      scrollElement.addEventListener(\"scroll\", handleOuterScroll);\n\n      return () => {\n        scrollElement.removeEventListener(\"scroll\", handleOuterScroll);\n      };\n    }, [handleOuterScroll, virtualizedListRef]);\n\n    const handleVirtualizedVerticalScroll = useCallback(\n      ({\n        scrollDirection,\n        scrollOffset,\n        scrollUpdateWasRequested\n      }: {\n        scrollDirection: ScrollDirection;\n        scrollOffset: number;\n        scrollUpdateWasRequested: boolean;\n      }) => {\n        if (virtualizedWithHeader) return;\n        onScroll?.(scrollDirection, scrollOffset, scrollUpdateWasRequested);\n      },\n      [onScroll, virtualizedWithHeader]\n    );\n\n    const itemRenderer = useCallback<ComponentType<ListChildComponentProps<T>>>(\n      ({ index, style }) => {\n        if (virtualizedWithHeader && index === 0) {\n          return null; //placeholder for virtualized with header\n        }\n        const currentIndex = virtualizedWithHeader ? index - 1 : index;\n        const currentItem = items[currentIndex];\n\n        return <MemoizedRow item={currentItem} rowRenderer={rowRenderer} style={style} />;\n      },\n      [items, rowRenderer, virtualizedWithHeader]\n    );\n\n    useEffect(() => {\n      if (!virtualizedWithHeader) markTableAsVirtualized();\n    }, [markTableAsVirtualized, virtualizedWithHeader]);\n\n    const memoizedInnerElementType = useMemo(\n      () =>\n        virtualizedWithHeader\n          ? forwardRef(({ children, ...rest }: any, ref: React.Ref<HTMLDivElement>) => (\n              <div ref={ref} {...rest}>\n                {headerRenderer!(columns!)}\n                {children}\n              </div>\n            ))\n          : undefined,\n      [virtualizedWithHeader, headerRenderer, columns]\n    );\n\n    return (\n      <TableBody\n        className={cx(\n          styles.tableBody,\n          {\n            [styles.withHeader]: virtualizedWithHeader\n          },\n          className\n        )}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TABLE_VIRTUALIZED_BODY, id)}\n        ref={ref}\n      >\n        {items?.length && (\n          <AutoSizer>\n            {({ height, width }: AutoSizerSize) => (\n              <List\n                itemSize={RowHeights[size]}\n                height={height}\n                itemCount={virtualizedWithHeader ? items.length + 1 : items.length}\n                width={width}\n                overscanCount={overscanCount}\n                onScroll={handleVirtualizedVerticalScroll}\n                outerRef={element => {\n                  virtualizedListRef.current = element;\n                }}\n                innerElementType={memoizedInnerElementType}\n              >\n                {itemRenderer}\n              </List>\n            )}\n          </AutoSizer>\n        )}\n      </TableBody>\n    );\n  }\n);\n\nexport default TableVirtualizedBody;\n"],"names":["MemoizedRow","React","memo","_ref","style","element","rowRenderer","item","styleWithoutWidth","__rest","cloneElement","Object","assign","_a","props","TableVirtualizedBody","forwardRef","_ref2","ref","items","onScroll","columns","headerRenderer","id","className","dataTestId","_ref2$overscanCount","overscanCount","_useTable","useTable","size","virtualizedListRef","onVirtualizedListScroll","markTableAsVirtualized","resetHoveredRow","useTableRowMenu","virtualizedWithHeader","handleOuterScroll","useCallback","e","target","currentTarget","useEffect","scrollElement","current","addEventListener","removeEventListener","handleVirtualizedVerticalScroll","_ref3","scrollDirection","scrollOffset","scrollUpdateWasRequested","itemRenderer","_ref4","index","createElement","memoizedInnerElementType","useMemo","children","rest","undefined","TableBody","cx","styles","tableBody","_defineProperty","withHeader","getTestId","ComponentDefaultTestId","TABLE_VIRTUALIZED_BODY","length","AutoSizer","_ref5","List","itemSize","RowHeights","height","itemCount","width","outerRef","innerElementType"],"mappings":"0vBA4CA,IAAMA,EAAcC,EAAMC,MACxB,SAAAC,GAQK,MALHC,EAAKD,EAALC,MAMMC,GAAUC,EAPLH,EAAXG,aADIH,EAAJI,MAS0BC,EAAsBC,EAAAL,EAA1C,CAAA,UACN,OAAOH,EAAMS,aAAaL,EAAS,CACjCD,MAAKO,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAOJ,GAAqC,QAAfK,EAAAR,EAAQS,aAAO,IAAAD,OAAA,EAAAA,EAAAT,QAErD,IAGIW,EAAuBC,GAC3B,SAAAC,EAYEC,GACE,IAXAC,EAAKF,EAALE,MACAb,EAAWW,EAAXX,YACAc,EAAQH,EAARG,SACAC,EAAOJ,EAAPI,QACAC,EAAcL,EAAdK,eACAC,EAAEN,EAAFM,GACAC,EAASP,EAATO,UACeC,EAAUR,EAAzB,eAAaS,EAAAT,EACbU,cAAAA,OAAgB,IAAHD,EAAG,EAACA,EAInBE,EAAsFC,IAA9EC,EAAIF,EAAJE,KAAMC,EAAkBH,EAAlBG,mBAAoBC,EAAuBJ,EAAvBI,wBAAyBC,EAAsBL,EAAtBK,uBACnDC,EAAoBC,IAApBD,gBACFE,IAA0Bf,KAAaC,EAEvCe,EAAoBC,GACxB,SAACC,GACC,IAAMC,EAASD,EAAEC,OACjBN,IACAF,EAAwB,CACtBQ,OAAAA,EACAC,cAAeD,GAEnB,GACA,CAACN,EAAiBF,IAGpBU,GAAU,WACR,IAAMC,EAAgBZ,EAAmBa,QACzC,GAAKD,EAIL,OAFAA,EAAcE,iBAAiB,SAAUR,GAElC,WACLM,EAAcG,oBAAoB,SAAUT,GAEhD,GAAG,CAACA,EAAmBN,IAEvB,IAAMgB,EAAkCT,GACtC,SAAAU,GASMZ,GACJhB,SAAAA,EATe4B,EAAfC,gBACYD,EAAZE,aACwBF,EAAxBG,yBAQF,GACA,CAAC/B,EAAUgB,IAGPgB,EAAed,GACnB,SAAAe,GAAqB,IAAlBC,EAAKD,EAALC,MACD,OAAIlB,GAAmC,IAAVkB,EACpB,KAKFrD,EAACsD,cAAAvD,EAAY,CAAAO,KAFAY,EADCiB,EAAwBkB,EAAQ,EAAIA,GAGlBhD,YAAaA,EAAaF,MAPpDiD,EAALjD,OAQT,GACD,CAACe,EAAOb,EAAa8B,IAGvBM,GAAU,WACHN,GAAuBH,GAC9B,GAAG,CAACA,EAAwBG,IAE5B,IAAMoB,EAA2BC,GAC/B,WAAA,OACErB,EACIpB,GAAW,SAACH,EAA4BK,GAA5B,IAAEwC,EAAwB7C,EAAxB6C,SAAaC,EAAIlD,EAAAI,EAAnB,cAA+D,OACzEZ,EAAKsD,cAAA,MAAA5C,OAAAC,OAAA,CAAAM,IAAKA,GAASyC,GAChBrC,EAAgBD,GAChBqC,EAEJ,SACDE,CAAS,GACf,CAACxB,EAAuBd,EAAgBD,IAG1C,OACEpB,EAACsD,cAAAM,EACC,CAAArC,UAAWsC,EACTC,EAAOC,UAASC,EAEbF,GAAAA,EAAOG,WAAa9B,GAEvBZ,GAEFD,GAAIA,EAAE,cACOE,GAAc0C,EAAUC,EAAuBC,uBAAwB9C,GACpFL,IAAKA,IAEJC,aAAA,EAAAA,EAAOmD,SACNrE,EAACsD,cAAAgB,QACE,SAAAC,GAAgB,OACfvE,EAAAsD,cAACkB,EACC,CAAAC,SAAUC,EAAW7C,GACrB8C,OAHMJ,EAANI,OAIAC,UAAWzC,EAAwBjB,EAAMmD,OAAS,EAAInD,EAAMmD,OAC5DQ,MALaN,EAALM,MAMRnD,cAAeA,EACfP,SAAU2B,EACVgC,SAAU,SAAA1E,GACR0B,EAAmBa,QAAUvC,CAC9B,EACD2E,iBAAkBxB,GAEjBJ,EAEJ,IAKX"}