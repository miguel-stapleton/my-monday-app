{"version":3,"file":"TextArea.js","sources":["../../../../src/components/TextArea/TextArea.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo, useState } from \"react\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId, ComponentVibeId } from \"../../tests/constants\";\nimport styles from \"./TextArea.module.scss\";\nimport { TextAreaProps, TextAreaSize } from \"./TextArea.types\";\nimport Text from \"../Text/Text\";\nimport { Flex } from \"../Flex\";\nimport { HiddenText } from \"../HiddenText\";\n\nconst DEFAULT_ROWS: Record<TextAreaSize, number> = {\n  small: 3,\n  large: 4\n};\n\nconst TextArea = forwardRef(\n  (\n    {\n      size = \"small\",\n      rows,\n      label,\n      helpText,\n      success,\n      error,\n      className,\n      \"data-testid\": dataTestId,\n      id,\n      disabled,\n      readOnly,\n      required,\n      maxLength,\n      allowExceedingMaxLength,\n      onChange,\n      value,\n      resize = true,\n      showCharCount = false,\n      ...rest\n    }: TextAreaProps,\n    ref: React.ForwardedRef<HTMLTextAreaElement>\n  ) => {\n    const numRows = rows || DEFAULT_ROWS[size];\n    const helpTextId = helpText && `${id}-help-text`;\n    const allowExceedingMaxLengthTextId = allowExceedingMaxLength && `${id}-allow-exceeding-max-length`;\n\n    const ariaDescribedby = useMemo(\n      () => [helpTextId, allowExceedingMaxLengthTextId].filter(id => !!id).join(\" \") || undefined,\n      [helpTextId, allowExceedingMaxLengthTextId]\n    );\n\n    const [characterCount, setCharacterCount] = useState(value?.length || 0);\n    const isErrorState = error || (typeof maxLength === \"number\" && characterCount > maxLength);\n\n    const handleOnChange = useCallback(\n      (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setCharacterCount(event.target.value.length);\n        onChange?.(event);\n      },\n      [onChange]\n    );\n\n    return (\n      <div\n        className={cx(\n          styles.textAreaWrapper,\n          {\n            [styles.error]: isErrorState,\n            [styles.success]: success,\n            [styles.disabled]: disabled,\n            [styles.readOnly]: readOnly\n          },\n          className\n        )}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TEXT_AREA, id)}\n        data-vibe={ComponentVibeId.TEXT_AREA}\n      >\n        {label && (\n          <label className={cx(styles.label, { [styles.required]: required })} htmlFor={id}>\n            {label}\n          </label>\n        )}\n        <textarea\n          {...rest}\n          id={id}\n          maxLength={typeof maxLength === \"number\" && !allowExceedingMaxLength ? maxLength : undefined}\n          ref={ref}\n          value={value}\n          disabled={disabled}\n          readOnly={readOnly}\n          required={required}\n          rows={numRows}\n          className={cx(styles.textArea, [styles[size]], { [styles.resize]: resize })}\n          aria-invalid={isErrorState}\n          aria-describedby={ariaDescribedby}\n          onChange={handleOnChange}\n        />\n        {(showCharCount || helpText) && (\n          <Flex gap=\"xs\" justify=\"space-between\" className={cx(styles.subTextContainer)}>\n            {helpText && (\n              <Text className={cx(styles.helpText)} color=\"inherit\" id={helpTextId}>\n                {helpText}\n              </Text>\n            )}\n            {showCharCount && (\n              <>\n                <Text className={styles.limitText}>\n                  {characterCount}\n                  {typeof maxLength === \"number\" && `/${maxLength}`}\n                </Text>\n                <HiddenText id={allowExceedingMaxLengthTextId} text={`Maximum of ${maxLength} characters`} />\n              </>\n            )}\n          </Flex>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default TextArea;\n"],"names":["DEFAULT_ROWS","small","large","TextArea","forwardRef","_a","ref","size","_a$size","rows","label","helpText","success","error","className","dataTestId","id","disabled","readOnly","required","maxLength","allowExceedingMaxLength","onChange","value","_a$resize","resize","_a$showCharCount","showCharCount","rest","__rest","numRows","helpTextId","concat","allowExceedingMaxLengthTextId","ariaDescribedby","useMemo","filter","join","undefined","_useState","useState","length","_useState2","_slicedToArray","characterCount","setCharacterCount","isErrorState","handleOnChange","useCallback","event","target","React","cx","styles","textAreaWrapper","_defineProperty","getTestId","ComponentDefaultTestId","TEXT_AREA","ComponentVibeId","createElement","htmlFor","Object","assign","textArea","Flex","gap","justify","subTextContainer","Text","color","Fragment","limitText","HiddenText","text"],"mappings":"giBAUA,IAAMA,EAA6C,CACjDC,MAAO,EACPC,MAAO,GAGHC,EAAWC,GACf,SACEC,EAqBAC,WApBEC,KAAAA,OAAO,IAAHC,EAAG,QAAOA,EACdC,IAAAA,KACAC,IAAAA,MACAC,IAAAA,SACAC,IAAAA,QACAC,IAAAA,MACAC,IAAAA,UACeC,IAAf,eACAC,IAAAA,GACAC,IAAAA,SACAC,IAAAA,SACAC,IAAAA,SACAC,IAAAA,UACAC,IAAAA,wBACAC,IAAAA,SACAC,IAAAA,MAAKC,IACLC,OAAAA,OAAS,IAAHD,GAAOA,EAAAE,IACbC,cAAAA,OAAgB,IAAHD,GAAQA,EAClBE,EAnBLC,EAAAxB,EAAA,CAAA,OAAA,OAAA,QAAA,WAAA,UAAA,QAAA,YAAA,cAAA,KAAA,WAAA,WAAA,WAAA,YAAA,0BAAA,WAAA,QAAA,SAAA,kBAuBMyB,EAAUrB,GAAQT,EAAaO,GAC/BwB,EAAapB,MAAQqB,OAAOhB,EAAc,cAC1CiB,EAAgCZ,MAAuBW,OAAOhB,EAA+B,+BAE7FkB,EAAkBC,GACtB,WAAA,MAAM,CAACJ,EAAYE,GAA+BG,QAAO,SAAApB,GAAE,QAAMA,CAAE,IAAEqB,KAAK,WAAQC,CAAS,GAC3F,CAACP,EAAYE,IAGfM,EAA4CC,GAASjB,eAAAA,EAAOkB,SAAU,GAAEC,EAAAC,EAAAJ,EAAA,GAAjEK,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAClCI,EAAejC,GAA+B,iBAAdO,GAA0BwB,EAAiBxB,EAE3E2B,EAAiBC,GACrB,SAACC,GACCJ,EAAkBI,EAAMC,OAAO3B,MAAMkB,QACrCnB,SAAAA,EAAW2B,EACb,GACA,CAAC3B,IAGH,OACE6B,uBACErC,UAAWsC,EACTC,EAAOC,gBAAeC,EAAAA,EAAAA,EAAAA,KAEnBF,EAAOxC,MAAQiC,GACfO,EAAOzC,QAAUA,GACjByC,EAAOpC,SAAWA,GAClBoC,EAAOnC,SAAWA,GAErBJ,GACD,cACYC,GAAcyC,EAAUC,EAAuBC,UAAW1C,GAC5D,YAAA2C,EAAgBD,WAE1BhD,GACCyC,EAAOS,cAAA,QAAA,CAAA9C,UAAWsC,EAAGC,EAAO3C,MAAK6C,EAAA,CAAA,EAAKF,EAAOlC,SAAWA,IAAa0C,QAAS7C,GAC3EN,GAGLyC,EAAAS,cAAA,WAAAE,OAAAC,OAAA,CAAA,EACMnC,EACJ,CAAAZ,GAAIA,EACJI,UAAgC,iBAAdA,GAA2BC,OAAsCiB,EAAZlB,EACvEd,IAAKA,EACLiB,MAAOA,EACPN,SAAUA,EACVC,SAAUA,EACVC,SAAUA,EACVV,KAAMqB,EACNhB,UAAWsC,EAAGC,EAAOW,SAAU,CAACX,EAAO9C,IAAMgD,EAAKF,CAAAA,EAAAA,EAAO5B,OAASA,IAAS,eAC7DqB,EACI,mBAAAZ,EAClBZ,SAAUyB,MAEVpB,GAAiBhB,IACjBwC,EAACS,cAAAK,EAAK,CAAAC,IAAI,KAAKC,QAAQ,gBAAgBrD,UAAWsC,EAAGC,EAAOe,mBACzDzD,GACCwC,EAAAS,cAACS,EAAI,CAACvD,UAAWsC,EAAGC,EAAO1C,UAAW2D,MAAM,UAAUtD,GAAIe,GACvDpB,GAGJgB,GACCwB,EAAAS,cAAAT,EAAAoB,SAAA,KACEpB,EAAAS,cAACS,EAAK,CAAAvD,UAAWuC,EAAOmB,WACrB5B,EACqB,iBAAdxB,GAAsBY,IAAAA,OAAQZ,IAExC+B,EAAAS,cAACa,EAAW,CAAAzD,GAAIiB,EAA+ByC,KAAI,cAAA1C,OAAgBZ,EAAS,mBAO1F"}