{"version":3,"file":"StepsHeader.js","sources":["../../../../src/components/Steps/StepsHeader.tsx"],"sourcesContent":["import React, { FC, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { StepsCommand } from \"./StepsCommand\";\nimport { StepsGalleryHeader, StepsGalleryHeaderProps } from \"./StepsGalleryHeader\";\nimport { StepsNumbersHeader, StepsNumbersHeaderProps } from \"./StepsNumbersHeader\";\nimport { FINISH_TEXT } from \"./StepsConstants\";\nimport { StepsType, StepsColor } from \"./Steps.types\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport Button, { ButtonProps } from \"../Button/Button\";\nimport styles from \"./StepsHeader.module.scss\";\n\nexport interface StepsHeaderProps extends VibeComponentProps {\n  /**\n   * The type of steps header.\n   */\n  type: StepsType;\n  /**\n   * The index of the currently active step.\n   */\n  activeStepIndex: number;\n  /**\n   * Callback fired when the active step changes.\n   */\n  onChangeActiveStep: (e: React.MouseEvent, stepIndex: number) => void;\n  /**\n   * The total number of steps.\n   */\n  stepsCount: number;\n  /**\n   * If true, hides the navigation buttons.\n   */\n  areNavigationButtonsHidden: boolean;\n  /**\n   * Props applied to the back button.\n   */\n  backButtonProps: Partial<ButtonProps>;\n  /**\n   * Props applied to the next button.\n   */\n  nextButtonProps: Partial<ButtonProps>;\n  /**\n   * Props applied to the finish button.\n   */\n  finishButtonProps: Partial<ButtonProps>;\n  /**\n   * If true, hides the icons in the navigation buttons.\n   */\n  areButtonsIconsHidden: boolean;\n  /**\n   * The color theme of the steps header.\n   */\n  color?: StepsColor;\n  /**\n   * Callback fired when the finish button is clicked.\n   */\n  onFinish?: (e: React.MouseEvent) => void;\n}\n\nexport const StepsHeader: FC<StepsHeaderProps> = ({\n  type,\n  activeStepIndex,\n  onChangeActiveStep,\n  stepsCount,\n  areNavigationButtonsHidden,\n  backButtonProps,\n  nextButtonProps,\n  finishButtonProps,\n  areButtonsIconsHidden,\n  color = \"primary\",\n  onFinish,\n  className\n}: StepsHeaderProps) => {\n  const SubHeaderComponent: FC<StepsGalleryHeaderProps | StepsNumbersHeaderProps> =\n    type === \"gallery\" ? StepsGalleryHeader : StepsNumbersHeader;\n\n  // TODO: [breaking] make finish button as default in next major\n  const showFinishButton = useMemo(() => {\n    if (!onFinish) {\n      return;\n    }\n    return activeStepIndex === stepsCount - 1;\n  }, [activeStepIndex, onFinish, stepsCount]);\n\n  return (\n    <div className={cx(styles.header, className)}>\n      {areNavigationButtonsHidden ? null : (\n        <StepsCommand\n          isNext={false}\n          isIconHidden={areButtonsIconsHidden}\n          onChangeActiveStep={onChangeActiveStep}\n          activeStepIndex={activeStepIndex}\n          stepsCount={stepsCount}\n          buttonProps={backButtonProps}\n          color={color}\n        />\n      )}\n      <SubHeaderComponent\n        activeStepIndex={activeStepIndex}\n        stepsCount={stepsCount}\n        onChangeActiveStep={onChangeActiveStep}\n        color={color}\n      />\n      {areNavigationButtonsHidden ? null : (\n        <>\n          {showFinishButton ? (\n            <Button onClick={onFinish} color={color} {...finishButtonProps}>\n              {finishButtonProps?.children || FINISH_TEXT}\n            </Button>\n          ) : (\n            <StepsCommand\n              isNext\n              isIconHidden={areButtonsIconsHidden}\n              activeStepIndex={activeStepIndex}\n              onChangeActiveStep={onChangeActiveStep}\n              stepsCount={stepsCount}\n              buttonProps={nextButtonProps}\n              color={color}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n"],"names":["StepsHeader","_ref","activeStepIndex","onChangeActiveStep","stepsCount","areNavigationButtonsHidden","backButtonProps","nextButtonProps","finishButtonProps","areButtonsIconsHidden","_ref$color","color","onFinish","className","SubHeaderComponent","type","StepsGalleryHeader","StepsNumbersHeader","showFinishButton","useMemo","React","createElement","cx","styles","header","StepsCommand","isNext","isIconHidden","buttonProps","Fragment","Button","Object","assign","onClick","children","FINISH_TEXT"],"mappings":"6WA0DaA,EAAoC,SAAzBC,GAaD,IAXrBC,EAAeD,EAAfC,gBACAC,EAAkBF,EAAlBE,mBACAC,EAAUH,EAAVG,WACAC,EAA0BJ,EAA1BI,2BACAC,EAAeL,EAAfK,gBACAC,EAAeN,EAAfM,gBACAC,EAAiBP,EAAjBO,kBACAC,EAAqBR,EAArBQ,sBAAqBC,EAAAT,EACrBU,MAAAA,OAAQ,IAAHD,EAAG,UAASA,EACjBE,EAAQX,EAARW,SACAC,EAASZ,EAATY,UAEMC,EACK,YAdPb,EAAJc,KAcuBC,EAAqBC,EAGtCC,EAAmBC,GAAQ,WAC/B,GAAKP,EAGL,OAAOV,IAAoBE,EAAa,CACzC,GAAE,CAACF,EAAiBU,EAAUR,IAE/B,OACEgB,EAAKC,cAAA,MAAA,CAAAR,UAAWS,EAAGC,EAAOC,OAAQX,IAC/BR,EAA6B,KAC5Be,EAACC,cAAAI,GACCC,QAAQ,EACRC,aAAclB,EACdN,mBAAoBA,EACpBD,gBAAiBA,EACjBE,WAAYA,EACZwB,YAAatB,EACbK,MAAOA,IAGXS,EAAAC,cAACP,EACC,CAAAZ,gBAAiBA,EACjBE,WAAYA,EACZD,mBAAoBA,EACpBQ,MAAOA,IAERN,EAA6B,KAC5Be,EACGC,cAAAD,EAAAS,SAAA,KAAAX,EACCE,EAAAC,cAACS,EAAOC,OAAAC,OAAA,CAAAC,QAASrB,EAAUD,MAAOA,GAAWH,IAC1CA,aAAA,EAAAA,EAAmB0B,WAAYC,GAGlCf,EAACC,cAAAI,GACCC,QAAM,EACNC,aAAclB,EACdP,gBAAiBA,EACjBC,mBAAoBA,EACpBC,WAAYA,EACZwB,YAAarB,EACbI,MAAOA,KAOrB"}