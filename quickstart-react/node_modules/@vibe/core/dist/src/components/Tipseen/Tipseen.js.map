{"version":3,"file":"Tipseen.js","sources":["../../../../src/components/Tipseen/Tipseen.tsx"],"sourcesContent":["import { forwardRef, Fragment, ReactElement, useEffect, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { AnimationType as AnimationTypeEnum, HideShowEvent as HideShowEventEnum } from \"../Dialog/DialogConstants\";\nimport { DialogAnimationType, DialogTriggerEvent } from \"../Dialog/Dialog.types\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Tooltip from \"../../components/Tooltip/Tooltip\";\nimport IconButton from \"../../components/IconButton/IconButton\";\nimport { CloseSmall } from \"@vibe/icons\";\nimport TipseenTitle from \"./TipseenTitle\";\nimport {\n  TIPSEEN_CLOSE_BUTTON_ARIA_LABEL,\n  TipseenCloseButtonTheme as TipseenCloseButtonThemeEnum,\n  TipseenColor as TipseenColorEnum\n} from \"./TipseenConstants\";\nimport { TipseenCloseButtonTheme, TipseenColor } from \"./Tipseen.types\";\nimport { ElementContent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { Modifier } from \"react-popper\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport Text from \"../Text/Text\";\nimport styles from \"./Tipseen.module.scss\";\nimport { ButtonColor } from \"../Button/ButtonConstants\";\nimport React from \"react\";\nimport { TooltipPositions } from \"../Tooltip/Tooltip.types\";\nimport { TooltipPositions as TooltipPositionsEnum } from \"../Tooltip/TooltipConstants\";\n\nexport interface TipseenProps extends VibeComponentProps {\n  /**\n   * Class name applied to the Tipseen title.\n   */\n  titleClassName?: string;\n  /**\n   * The position of the Tipseen relative to the target element.\n   */\n  position?: TooltipPositions;\n  /**\n   * The animation type used for showing/hiding the Tipseen.\n   */\n  animationType?: DialogAnimationType;\n  /**\n   * The delay in milliseconds before hiding the Tipseen.\n   */\n  hideDelay?: number;\n  /**\n   * The delay in milliseconds before showing the Tipseen.\n   */\n  showDelay?: number;\n  /**\n   * The title text of the Tipseen.\n   */\n  title?: string;\n  /**\n   * If true, hides the close button.\n   */\n  hideCloseButton?: boolean;\n  /**\n   * The child element that triggers the Tipseen.\n   */\n  children?: ReactElement;\n  /**\n   * The CSS selector of the container where the Tipseen should be rendered.\n   */\n  containerSelector?: string;\n  /**\n   * Events that trigger hiding the Tipseen.\n   */\n  hideTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;\n  /**\n   * Events that trigger showing the Tipseen.\n   */\n  showTrigger?: DialogTriggerEvent | Array<DialogTriggerEvent>;\n  /**\n   * The width of the Tipseen.\n   */\n  width?: number;\n  /**\n   * Offset values for positioning adjustments.\n   */\n  moveBy?: MoveBy;\n  /**\n   * If true, hides the Tipseen when the reference element is hidden.\n   */\n  hideWhenReferenceHidden?: boolean;\n  /**\n   * Class name applied to the reference wrapper element.\n   */\n  referenceWrapperClassName?: string;\n  /**\n   * If false, hides the arrow of the Tipseen.\n   */\n  tip?: boolean;\n  /**\n   * Class name applied to the Tipseen arrow.\n   */\n  tooltipArrowClassName?: string;\n  /**\n   * Custom Popper.js modifiers.\n   * https://popper.js.org/docs/v2/modifiers/\n   */\n  modifiers?: Array<Modifier<unknown>>;\n  /**\n   * The aria-label for the close button.\n   */\n  closeAriaLabel?: string;\n  /**\n   * Callback fired when the Tipseen is closed.\n   */\n  onClose?: (event?: React.MouseEvent<HTMLButtonElement>) => void;\n  /**\n   * The content displayed inside the Tipseen.\n   */\n  content: ElementContent;\n  /**\n   * The theme of the Tipseen close button.\n   */\n  closeButtonTheme?: TipseenCloseButtonTheme;\n  /**\n   * If true, renders the Tipseen as a floating element without a reference.\n   */\n  floating?: boolean;\n  /**\n   * The color theme of the Tipseen.\n   */\n  color?: TipseenColor;\n}\n\nexport const TipseenContext = React.createContext<TipseenColor>(\"primary\");\n\nconst Tipseen = forwardRef(\n  (\n    {\n      className,\n      id,\n      position = \"bottom\",\n      animationType = \"expand\",\n      hideDelay = 0,\n      showDelay = 100,\n      title,\n      titleClassName,\n      hideCloseButton,\n      closeButtonTheme = \"light\",\n      onClose,\n      closeAriaLabel,\n      children = null,\n      content,\n      containerSelector,\n      hideTrigger = [],\n      showTrigger = [],\n      width,\n      moveBy,\n      hideWhenReferenceHidden = false,\n      referenceWrapperClassName,\n      tip = true,\n      tooltipArrowClassName,\n      modifiers = [],\n      floating = false,\n      color: colorProp,\n      \"data-testid\": dataTestId\n    }: TipseenProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const color = colorProp ?? \"inverted\";\n\n    const defaultDelayOpen =\n      Array.isArray(showTrigger) && Array.isArray(hideTrigger) && showTrigger.length === 0 && showDelay > 0;\n\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const [delayedOpen, setDelayOpen] = useState(!defaultDelayOpen);\n    const overrideCloseAriaLabel = closeAriaLabel || TIPSEEN_CLOSE_BUTTON_ARIA_LABEL;\n\n    useEffect(() => {\n      let timeout: NodeJS.Timeout;\n      if (showDelay) {\n        timeout = setTimeout(() => {\n          setDelayOpen(true);\n        }, showDelay);\n      }\n      return () => {\n        clearTimeout(timeout);\n      };\n    }, [showDelay, setDelayOpen]);\n\n    const textColor = useMemo(() => {\n      return color === \"inverted\" ? \"onInverted\" : \"onPrimary\";\n    }, [color]);\n    const closeButtonColor = useMemo(() => {\n      if (closeButtonTheme === \"light\") {\n        return color === \"inverted\" ? ButtonColor.ON_INVERTED_BACKGROUND : ButtonColor.ON_PRIMARY_COLOR;\n      } else {\n        return closeButtonTheme;\n      }\n    }, [color, closeButtonTheme]);\n\n    const TipseenWrapper = ref || id ? \"div\" : Fragment;\n    const tooltipContent = (\n      <div>\n        <div className={cx(styles.tipseenHeader)}>\n          {hideCloseButton ? null : (\n            <IconButton\n              hideTooltip\n              className={cx(styles.tipseenCloseButton, {\n                [styles.dark]: closeButtonTheme === \"dark\" || closeButtonTheme === \"fixed-dark\"\n              })}\n              onClick={onClose}\n              size=\"xs\"\n              kind=\"tertiary\"\n              // @ts-ignore\n              color={closeButtonColor}\n              ariaLabel={overrideCloseAriaLabel}\n              icon={CloseSmall}\n            />\n          )}\n          <TipseenTitle text={title} className={cx(styles.tipseenTitle, titleClassName)} />\n        </div>\n        <Text color={textColor} type=\"text2\" element=\"p\" className={cx(styles.tipseenContent)}>\n          <TipseenContext.Provider value={color}>{content}</TipseenContext.Provider>\n        </Text>\n      </div>\n    );\n\n    return (\n      <TipseenWrapper ref={mergedRef} id={id} data-testid={dataTestId || getTestId(ComponentDefaultTestId.TIPSEEN, id)}>\n        <Tooltip\n          className={cx(styles.tipseenWrapper, className, {\n            [styles.tipseenWrapperWithoutCustomWidth]: !width,\n            [styles.floating]: floating\n          })}\n          maxWidth={width}\n          arrowClassName={tooltipArrowClassName}\n          style={width ? { width } : undefined}\n          shouldShowOnMount={!defaultDelayOpen}\n          position={position}\n          animationType={animationType}\n          hideDelay={hideDelay}\n          showDelay={0}\n          hideTrigger={hideTrigger}\n          showTrigger={showTrigger}\n          showOnDialogEnter={false}\n          content={tooltipContent}\n          theme={color === \"inverted\" ? \"dark\" : \"primary\"}\n          containerSelector={containerSelector}\n          disableDialogSlide={false}\n          moveBy={moveBy}\n          hideWhenReferenceHidden={hideWhenReferenceHidden}\n          referenceWrapperClassName={referenceWrapperClassName}\n          tip={tip && !floating}\n          modifiers={modifiers}\n          open={defaultDelayOpen ? delayedOpen : undefined}\n          forceRenderWithoutChildren={floating}\n        >\n          {children}\n        </Tooltip>\n      </TipseenWrapper>\n    );\n  }\n);\n\ninterface TipseenStaticProps {\n  closeButtonThemes: typeof TipseenCloseButtonThemeEnum;\n  animationTypes: typeof AnimationTypeEnum;\n  hideShowTriggers: typeof HideShowEventEnum;\n  colors: typeof TipseenColorEnum;\n  positions: typeof TooltipPositionsEnum;\n}\n\nexport default withStaticProps<TipseenProps, TipseenStaticProps>(Tipseen, {\n  closeButtonThemes: TipseenCloseButtonThemeEnum,\n  animationTypes: AnimationTypeEnum,\n  hideShowTriggers: HideShowEventEnum,\n  colors: TipseenColorEnum,\n  positions: TooltipPositionsEnum\n});\n"],"names":["TipseenContext","React","createContext","withStaticProps","forwardRef","_ref","ref","className","id","_ref$position","position","_ref$animationType","animationType","_ref$hideDelay","hideDelay","_ref$showDelay","showDelay","title","titleClassName","hideCloseButton","_ref$closeButtonTheme","closeButtonTheme","onClose","closeAriaLabel","_ref$children","children","content","containerSelector","_ref$hideTrigger","hideTrigger","_ref$showTrigger","showTrigger","width","moveBy","_ref$hideWhenReferenc","hideWhenReferenceHidden","referenceWrapperClassName","_ref$tip","tip","tooltipArrowClassName","_ref$modifiers","modifiers","_ref$floating","floating","colorProp","color","dataTestId","defaultDelayOpen","Array","isArray","length","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","delayedOpen","setDelayOpen","overrideCloseAriaLabel","TIPSEEN_CLOSE_BUTTON_ARIA_LABEL","useEffect","timeout","setTimeout","clearTimeout","textColor","useMemo","closeButtonColor","ButtonColor","ON_INVERTED_BACKGROUND","ON_PRIMARY_COLOR","TipseenWrapper","Fragment","tooltipContent","createElement","cx","styles","tipseenHeader","IconButton","hideTooltip","tipseenCloseButton","_defineProperty","dark","onClick","size","kind","ariaLabel","icon","CloseSmall","TipseenTitle","text","tipseenTitle","Text","type","element","tipseenContent","Provider","value","getTestId","ComponentDefaultTestId","TIPSEEN","Tooltip","tipseenWrapper","tipseenWrapperWithoutCustomWidth","maxWidth","arrowClassName","style","undefined","shouldShowOnMount","showOnDialogEnter","theme","disableDialogSlide","open","forceRenderWithoutChildren","closeButtonThemes","TipseenCloseButtonThemeEnum","animationTypes","AnimationTypeEnum","hideShowTriggers","HideShowEventEnum","colors","TipseenColorEnum","positions","TooltipPositionsEnum"],"mappings":"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"}