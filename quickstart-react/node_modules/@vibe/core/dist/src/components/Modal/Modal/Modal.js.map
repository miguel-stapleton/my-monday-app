{"version":3,"file":"Modal.js","sources":["../../../../../src/components/Modal/Modal/Modal.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport FocusLock from \"react-focus-lock\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport styles from \"./Modal.module.scss\";\nimport { ModalProps } from \"./Modal.types\";\nimport ModalTopActions from \"../ModalTopActions/ModalTopActions\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport { camelCase } from \"lodash-es\";\nimport { ModalProvider } from \"../context/ModalContext\";\nimport { ModalProviderValue } from \"../context/ModalContext.types\";\nimport { keyCodes } from \"../../../constants\";\nimport {\n  modalAnimationAnchorPopVariants,\n  modalAnimationCenterPopVariants,\n  modalAnimationFullViewVariants,\n  modalAnimationOverlayVariants\n} from \"../utils/animationVariants\";\nimport { createPortal } from \"react-dom\";\nimport usePortalTarget from \"../hooks/usePortalTarget/usePortalTarget\";\nimport { LayerProvider } from \"../../LayerProvider\";\nimport useMergeRef from \"../../../hooks/useMergeRef\";\n\n// @ts-expect-error This is a precaution to support all possible module systems (ESM/CJS)\nconst FocusLockComponent = (FocusLock.default || FocusLock) as typeof FocusLock;\n\nconst Modal = forwardRef(\n  (\n    {\n      id,\n      show,\n      size = \"medium\",\n      renderHeaderAction,\n      closeButtonTheme,\n      closeButtonAriaLabel,\n      onClose = () => {},\n      autoFocus = true,\n      onFocusAttempt,\n      anchorElementRef,\n      alertModal,\n      container = document.body,\n      children,\n      style,\n      zIndex,\n      className,\n      \"data-testid\": dataTestId,\n      \"aria-labelledby\": ariaLabelledby,\n      \"aria-describedby\": ariaDescribedby\n    }: ModalProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const portalTargetElement = usePortalTarget(container);\n\n    const modalRef = useRef<HTMLDivElement>(null);\n    const modalMergedRef = useMergeRef<HTMLDivElement>(ref, modalRef);\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const [titleId, setTitleId] = useState<string>();\n    const [descriptionId, setDescriptionId] = useState<string>();\n\n    const setTitleIdCallback = useCallback(\n      (newId: string) => {\n        if (ariaLabelledby) return;\n        setTitleId(newId);\n      },\n      [ariaLabelledby]\n    );\n    const setDescriptionIdCallback = useCallback(\n      (newId: string) => {\n        if (ariaDescribedby) return;\n        setDescriptionId(newId);\n      },\n      [ariaDescribedby]\n    );\n\n    const contextValue = useMemo<ModalProviderValue>(\n      () => ({\n        modalId: id,\n        setTitleId: setTitleIdCallback,\n        setDescriptionId: setDescriptionIdCallback,\n        autoFocus\n      }),\n      [id, setTitleIdCallback, setDescriptionIdCallback, autoFocus]\n    );\n\n    const onBackdropClick = useCallback<React.MouseEventHandler<HTMLDivElement>>(\n      e => {\n        if (!show || alertModal) return;\n        onClose(e);\n      },\n      [show, alertModal, onClose]\n    );\n\n    const onModalKeyDown = useCallback<React.KeyboardEventHandler<HTMLDivElement>>(\n      e => {\n        if (e.key !== keyCodes.ESCAPE || !show || alertModal) return;\n        onClose(e);\n      },\n      [alertModal, onClose, show]\n    );\n\n    const modalAnimationVariants =\n      size === \"full-view\"\n        ? modalAnimationFullViewVariants\n        : anchorElementRef?.current\n        ? modalAnimationAnchorPopVariants\n        : modalAnimationCenterPopVariants;\n\n    const zIndexStyle = zIndex ? ({ \"--monday-modal-z-index\": zIndex } as React.CSSProperties) : {};\n\n    const handleFocusLockWhiteList = useCallback(\n      (nextFocusedElement?: HTMLElement) => {\n        if (!onFocusAttempt) return true;\n\n        const outcome = onFocusAttempt(nextFocusedElement);\n\n        if (outcome === true) return true;\n\n        if (outcome instanceof HTMLElement) {\n          outcome.focus();\n          return false;\n        }\n\n        return false;\n      },\n      [onFocusAttempt]\n    );\n\n    return (\n      <AnimatePresence>\n        {show && (\n          <LayerProvider layerRef={containerRef}>\n            <ModalProvider value={contextValue}>\n              {createPortal(\n                <FocusLockComponent returnFocus autoFocus={autoFocus} whiteList={handleFocusLockWhiteList}>\n                  <div ref={containerRef} className={styles.container} style={zIndexStyle}>\n                    <motion.div\n                      variants={modalAnimationOverlayVariants}\n                      initial=\"initial\"\n                      animate=\"enter\"\n                      exit=\"exit\"\n                      data-testid={getTestId(ComponentDefaultTestId.MODAL_NEXT_OVERLAY, id)}\n                      className={styles.overlay}\n                      onClick={onBackdropClick}\n                      aria-hidden\n                    />\n                    <RemoveScroll forwardProps ref={modalMergedRef}>\n                      <motion.div\n                        variants={modalAnimationVariants}\n                        initial=\"exit\"\n                        animate=\"enter\"\n                        exit=\"exit\"\n                        custom={anchorElementRef}\n                        className={cx(\n                          styles.modal,\n                          getStyle(styles, camelCase(\"size-\" + size)),\n                          { [styles.withHeaderAction]: !!renderHeaderAction },\n                          className\n                        )}\n                        id={id}\n                        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MODAL_NEXT, id)}\n                        role=\"dialog\"\n                        aria-modal\n                        aria-labelledby={ariaLabelledby || titleId}\n                        aria-describedby={ariaDescribedby || descriptionId}\n                        style={style}\n                        onKeyDown={onModalKeyDown}\n                        tabIndex={-1}\n                      >\n                        {children}\n                        <ModalTopActions\n                          renderAction={renderHeaderAction}\n                          theme={closeButtonTheme}\n                          closeButtonAriaLabel={closeButtonAriaLabel}\n                          onClose={onClose}\n                        />\n                      </motion.div>\n                    </RemoveScroll>\n                  </div>\n                </FocusLockComponent>,\n                portalTargetElement\n              )}\n            </ModalProvider>\n          </LayerProvider>\n        )}\n      </AnimatePresence>\n    );\n  }\n);\n\nexport default Modal;\n"],"names":["FocusLockComponent","FocusLock","default","Modal","forwardRef","_ref","ref","id","show","_ref$size","size","renderHeaderAction","closeButtonTheme","closeButtonAriaLabel","_ref$onClose","onClose","_ref$autoFocus","autoFocus","onFocusAttempt","anchorElementRef","alertModal","_ref$container","container","document","body","children","style","zIndex","className","dataTestId","ariaLabelledby","ariaDescribedby","portalTargetElement","usePortalTarget","modalRef","useRef","modalMergedRef","useMergeRef","containerRef","_useState","useState","_useState2","_slicedToArray","titleId","setTitleId","_useState3","_useState4","descriptionId","setDescriptionId","setTitleIdCallback","useCallback","newId","setDescriptionIdCallback","contextValue","useMemo","modalId","onBackdropClick","e","onModalKeyDown","key","keyCodes","ESCAPE","modalAnimationVariants","modalAnimationFullViewVariants","current","modalAnimationAnchorPopVariants","modalAnimationCenterPopVariants","zIndexStyle","handleFocusLockWhiteList","nextFocusedElement","outcome","HTMLElement","focus","React","createElement","AnimatePresence","LayerProvider","layerRef","ModalProvider","value","createPortal","returnFocus","whiteList","styles","motion","div","variants","modalAnimationOverlayVariants","initial","animate","exit","getTestId","ComponentDefaultTestId","MODAL_NEXT_OVERLAY","overlay","onClick","RemoveScroll","forwardProps","custom","cx","modal","getStyle","camelCase","_defineProperty","withHeaderAction","MODAL_NEXT","role","onKeyDown","tabIndex","ModalTopActions","renderAction","theme"],"mappings":"4sCA2BA,IAAMA,EAAsBC,EAAUC,SAAWD,EAE3CE,EAAQC,GACZ,SAAAC,EAsBEC,GACE,IArBAC,EAAEF,EAAFE,GACAC,EAAIH,EAAJG,KAAIC,EAAAJ,EACJK,KAAAA,OAAO,IAAHD,EAAG,SAAQA,EACfE,EAAkBN,EAAlBM,mBACAC,EAAgBP,EAAhBO,iBACAC,EAAoBR,EAApBQ,qBAAoBC,EAAAT,EACpBU,QAAAA,OAAO,IAAAD,EAAG,WAAQ,EAAAA,EAAAE,EAAAX,EAClBY,UAAAA,OAAY,IAAHD,GAAOA,EAChBE,EAAcb,EAAda,eACAC,EAAgBd,EAAhBc,iBACAC,EAAUf,EAAVe,WAAUC,EAAAhB,EACViB,UAAAA,OAAS,IAAAD,EAAGE,SAASC,KAAIH,EACzBI,EAAQpB,EAARoB,SACAC,EAAKrB,EAALqB,MACAC,EAAMtB,EAANsB,OACAC,EAASvB,EAATuB,UACeC,EAAUxB,EAAzB,eACmByB,EAAczB,EAAjC,mBACoB0B,EAAe1B,EAAnC,oBAII2B,EAAsBC,EAAgBX,GAEtCY,GAAWC,EAAuB,MAClCC,GAAiBC,EAA4B/B,EAAK4B,IAClDI,GAAeH,EAAuB,MAE5CI,GAA8BC,IAAkBC,GAAAC,EAAAH,GAAA,GAAzCI,GAAOF,GAAA,GAAEG,GAAUH,GAAA,GAC1BI,GAA0CL,IAAkBM,GAAAJ,EAAAG,GAAA,GAArDE,GAAaD,GAAA,GAAEE,GAAgBF,GAAA,GAEhCG,GAAqBC,GACzB,SAACC,GACKrB,GACJc,GAAWO,EACb,GACA,CAACrB,IAEGsB,GAA2BF,GAC/B,SAACC,GACKpB,GACJiB,GAAiBG,EACnB,GACA,CAACpB,IAGGsB,GAAeC,GACnB,WAAA,MAAO,CACLC,QAAShD,EACTqC,WAAYK,GACZD,iBAAkBI,GAClBnC,UAAAA,EACA,GACF,CAACV,EAAI0C,GAAoBG,GAA0BnC,IAG/CuC,GAAkBN,GACtB,SAAAO,GACOjD,IAAQY,GACbL,EAAQ0C,EACT,GACD,CAACjD,EAAMY,EAAYL,IAGf2C,GAAiBR,GACrB,SAAAO,GACMA,EAAEE,MAAQC,EAASC,QAAWrD,IAAQY,GAC1CL,EAAQ0C,EACT,GACD,CAACrC,EAAYL,EAASP,IAGlBsD,GACK,cAATpD,EACIqD,GACA5C,aAAA,EAAAA,EAAkB6C,SAClBC,EACAC,EAEAC,GAAcxC,EAAU,CAAE,yBAA0BA,GAAmC,GAEvFyC,GAA2BlB,GAC/B,SAACmB,GACC,IAAKnD,EAAgB,OAAO,EAE5B,IAAMoD,EAAUpD,EAAemD,GAE/B,OAAgB,IAAZC,GAEAA,aAAmBC,cACrBD,EAAQE,SACD,EAIX,GACA,CAACtD,IAGH,OACEuD,EAAAC,cAACC,EAAe,KACbnE,GACCiE,EAAAC,cAACE,EAAa,CAACC,SAAUvC,IACvBmC,EAAAC,cAACI,EAAc,CAAAC,MAAO1B,IACnB2B,EACCP,EAAAC,cAAC1E,EAAmB,CAAAiF,eAAYhE,UAAWA,EAAWiE,UAAWd,IAC/DK,EAAAC,cAAA,MAAA,CAAKpE,IAAKgC,GAAcV,UAAWuD,EAAO7D,UAAWI,MAAOyC,IAC1DM,EAAAC,cAACU,EAAOC,IACN,CAAAC,SAAUC,EACVC,QAAQ,UACRC,QAAQ,QACRC,KAAK,OACQ,cAAAC,EAAUC,EAAuBC,mBAAoBtF,GAClEqB,UAAWuD,EAAOW,QAClBC,QAASvC,GAET,eAAA,IACFiB,EAAAC,cAACsB,EAAa,CAAAC,cAAa,EAAA3F,IAAK8B,IAC9BqC,EAACC,cAAAU,EAAOC,IAAG,CACTC,SAAUxB,GACV0B,QAAQ,OACRC,QAAQ,QACRC,KAAK,OACLQ,OAAQ/E,EACRS,UAAWuE,EACThB,EAAOiB,MACPC,EAASlB,EAAQmB,EAAU,QAAU5F,IAAM6F,EAAA,CAAA,EACxCpB,EAAOqB,mBAAqB7F,GAC/BiB,GAEFrB,GAAIA,EAAE,cACOsB,GAAc8D,EAAUC,EAAuBa,WAAYlG,GACxEmG,KAAK,SAEY,cAAA,EAAA,kBAAA5E,GAAkBa,GAAO,mBACxBZ,GAAmBgB,GACrCrB,MAAOA,EACPiF,UAAWjD,GACXkD,UAAW,GAEVnF,EACDgD,EAAAC,cAACmC,EAAe,CACdC,aAAcnG,EACdoG,MAAOnG,EACPC,qBAAsBA,EACtBE,QAASA,QAMnBiB,KAOd"}