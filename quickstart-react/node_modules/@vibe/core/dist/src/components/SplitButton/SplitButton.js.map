{"version":3,"file":"SplitButton.js","sources":["../../../../src/components/SplitButton/SplitButton.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\n// Libraries import\nimport React, { ReactElement, useCallback, useMemo, useRef, useState } from \"react\";\n// Constants import\nimport {\n  DEFAULT_DIALOG_HIDE_TRIGGER,\n  DEFAULT_DIALOG_SHOW_TRIGGER,\n  DIALOG_MOVE_BY,\n  ENTER_KEYS,\n  SECONDARY_BUTTON_ARIA_LABEL,\n  SECONDARY_BUTTON_WRAPPER_CLASSNAME,\n  SplitButtonSecondaryContentPosition,\n  SplitButtonSecondaryContentPositionType\n} from \"./SplitButtonConstants\";\nimport { withStaticProps } from \"../../types\";\nimport { AnimationType, DialogPosition, HideShowEvent } from \"../Dialog/DialogConstants\";\n// Utils import\nimport { NOOP } from \"../../utils/function-utils\";\nimport { isInsideClass } from \"../../utils/dom-utils\";\n// Hooks import\nimport useKeyEvent from \"../../hooks/useKeyEvent\";\nimport useEventListener from \"../../hooks/useEventListener\";\n// Components import\nimport Button, { ButtonProps } from \"../Button/Button\";\nimport Dialog, { DialogEvent } from \"../Dialog/Dialog\";\nimport { DropdownChevronDown } from \"@vibe/icons\";\nimport DialogContentContainer from \"../DialogContentContainer/DialogContentContainer\";\nimport styles from \"./SplitButton.module.scss\";\nimport { DialogSize, DialogTriggerEvent } from \"../Dialog\";\nimport { ComponentVibeId } from \"../../tests/constants\";\n\nexport interface SplitButtonProps extends ButtonProps {\n  /**\n   * The element or renderer that is displayed inside the dialog opened by clicking the secondary button.\n   */\n  secondaryDialogContent?: ReactElement | (() => string | ReactElement);\n  /**\n   * Callback fired when the secondary dialog is shown.\n   */\n  onSecondaryDialogDidShow?: () => void;\n  /**\n   * Callback fired when the secondary dialog is hidden.\n   */\n  onSecondaryDialogDidHide?: () => void;\n  /**\n   * The z-index applied to the secondary dialog.\n   */\n  zIndex?: number;\n  /**\n   * Class name applied to the wrapper of the secondary dialog.\n   */\n  secondaryDialogClassName?: string;\n  /**\n   * The position of the secondary dialog.\n   */\n  secondaryDialogPosition?: SplitButtonSecondaryContentPositionType;\n  /**\n   * The padding size inside the secondary dialog.\n   */\n  dialogPaddingSize?: DialogSize;\n  /**\n   * The CSS selector of the container where the dialog should be rendered.\n   */\n  dialogContainerSelector?: string;\n  /**\n   * If true, clicking inside the dialog will close it.\n   */\n  shouldCloseOnClickInsideDialog?: boolean;\n}\n\nconst SplitButton = ({\n  secondaryDialogContent,\n  onSecondaryDialogDidShow = NOOP,\n  onSecondaryDialogDidHide = NOOP,\n  shouldCloseOnClickInsideDialog,\n  zIndex = null,\n  secondaryDialogClassName,\n  secondaryDialogPosition = \"bottom-start\",\n  dialogContainerSelector,\n  dialogPaddingSize = \"medium\",\n  disabled,\n  // success mode not working right now, need to fix it in different pr\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  success,\n  loading,\n  kind,\n  color,\n  className,\n  leftIcon,\n  rightIcon,\n  onClick,\n  children,\n  marginLeft,\n  marginRight,\n  active,\n  id,\n  \"data-testid\": dataTestId,\n  ...buttonProps\n}: SplitButtonProps) => {\n  // State //\n  const [isDialogOpen, setDialogOpen] = useState(false);\n  const [isHovered, setIsHover] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  // Refs //\n  const ref = useRef(null);\n  const secondaryButtonRef = useRef(null);\n\n  // Callbacks //\n  const setHovered = useCallback(() => setIsHover(true), [setIsHover]);\n  const setNotHovered = useCallback(() => setIsHover(false), [setIsHover]);\n\n  const shouldSetActive = useCallback(\n    (e: React.KeyboardEvent<HTMLElement>) => {\n      if (disabled) return false;\n      return !isInsideClass(e.target as HTMLElement, SECONDARY_BUTTON_WRAPPER_CLASSNAME);\n    },\n    [disabled]\n  );\n\n  const setActive = useCallback(\n    (e: React.KeyboardEvent<HTMLElement>) => {\n      if (!shouldSetActive(e)) return;\n      setIsActive(true);\n    },\n    [setIsActive, shouldSetActive]\n  );\n  const setNotActive = useCallback(() => setIsActive(false), [setIsActive]);\n  const setActiveOnEnter = useCallback(\n    (e: React.KeyboardEvent<HTMLElement>) => {\n      if (!shouldSetActive(e)) return;\n      setIsActive(true);\n    },\n    [setIsActive, shouldSetActive]\n  );\n\n  const showDialog = useCallback(() => {\n    setDialogOpen(true);\n    onSecondaryDialogDidShow();\n  }, [setDialogOpen, onSecondaryDialogDidShow]);\n\n  const hideDialog = useCallback(\n    (_: DialogEvent, eventName: DialogTriggerEvent) => {\n      setDialogOpen(false);\n      onSecondaryDialogDidHide();\n      if (eventName === \"esckey\") {\n        secondaryButtonRef.current.focus();\n      }\n    },\n    [setDialogOpen, onSecondaryDialogDidHide]\n  );\n\n  // Event listeners //\n\n  // Used to set both buttons as hovered no matter what button was hovered\n  useEventListener({ eventName: \"mouseenter\", callback: setHovered, ref });\n  useEventListener({ eventName: \"mouseleave\", callback: setNotHovered, ref });\n\n  useEventListener({ eventName: \"mousedown\", callback: setActive, ref });\n  useEventListener({ eventName: \"mouseup\", callback: setNotActive, ref });\n\n  // Used to finish active transition if clicked on enter\n  useEventListener({ eventName: \"transitionend\", callback: setNotActive, ref });\n\n  // Key events\n  useKeyEvent({ keys: ENTER_KEYS, ref, callback: setActiveOnEnter });\n\n  const classNames = useMemo(\n    () =>\n      cx(\n        styles.button,\n        getStyle(styles, camelCase(\"kind-\" + kind)),\n        getStyle(styles, camelCase(\"color-\" + color)),\n        {\n          [styles.mainActive]: active,\n          [styles.active]: isActive,\n          [styles.splitContentOpen]: isDialogOpen,\n          [styles.hovered]: isHovered,\n          [styles.disabled]: disabled\n        },\n        className\n      ),\n    [className, kind, color, active, isActive, isDialogOpen, isHovered, disabled]\n  );\n\n  const dialogShowTrigger = useMemo(() => (disabled ? [] : DEFAULT_DIALOG_SHOW_TRIGGER), [disabled]);\n\n  const dialogHideTrigger = useMemo(() => {\n    if (shouldCloseOnClickInsideDialog) return [...DEFAULT_DIALOG_HIDE_TRIGGER, HideShowEvent.CONTENT_CLICK];\n    return DEFAULT_DIALOG_HIDE_TRIGGER;\n  }, [shouldCloseOnClickInsideDialog]);\n\n  const actionsContent = useCallback(() => {\n    const content = typeof secondaryDialogContent === \"function\" ? secondaryDialogContent() : secondaryDialogContent;\n    return (\n      <DialogContentContainer type={DialogContentContainer.types.POPOVER} size={dialogPaddingSize}>\n        {content}\n      </DialogContentContainer>\n    );\n  }, [secondaryDialogContent, dialogPaddingSize]);\n\n  const animationEdgePosition = useMemo(() => {\n    if (secondaryDialogPosition === \"bottom\") {\n      return \"\";\n    }\n    if (secondaryDialogPosition === \"bottom-start\") {\n      return \"bottom\";\n    }\n\n    return \"top\";\n  }, [secondaryDialogPosition]);\n\n  return (\n    <div\n      className={classNames}\n      ref={ref}\n      id={id}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SPLIT_BUTTON, id)}\n      data-vibe={ComponentVibeId.SPLIT_BUTTON}\n    >\n      <Button\n        {\n          ...buttonProps /* We are enriching button with other props so we must use spreading */\n        }\n        preventClickAnimation\n        leftIcon={leftIcon}\n        rightIcon={rightIcon}\n        rightFlat\n        color={color}\n        kind={kind}\n        active={active}\n        onClick={onClick}\n        className={styles.mainButton}\n        marginLeft={marginLeft}\n        onFocus={setHovered}\n        onBlur={setNotHovered}\n        disabled={disabled}\n        loading={loading}\n        data-testid={getTestId(ComponentDefaultTestId.SPLIT_BUTTON_PRIMARY_BUTTON, id)}\n      >\n        {children}\n      </Button>\n      <div className={styles.secondaryButtonWrapper}>\n        <Dialog\n          wrapperClassName={secondaryDialogClassName}\n          zIndex={zIndex}\n          content={actionsContent}\n          position={secondaryDialogPosition as DialogPosition}\n          containerSelector={dialogContainerSelector}\n          startingEdge={animationEdgePosition}\n          animationType={AnimationType.EXPAND}\n          moveBy={DIALOG_MOVE_BY}\n          onDialogDidShow={showDialog}\n          onDialogDidHide={hideDialog}\n          showTrigger={dialogShowTrigger}\n          hideTrigger={dialogHideTrigger}\n        >\n          <Button\n            {...buttonProps}\n            ref={secondaryButtonRef}\n            preventClickAnimation\n            leftFlat\n            noSidePadding\n            color={color}\n            kind={kind}\n            className={styles.secondaryButton}\n            active={isDialogOpen}\n            marginRight={marginRight}\n            onFocus={setHovered}\n            onBlur={setNotHovered}\n            disabled={disabled}\n            ariaLabel={SECONDARY_BUTTON_ARIA_LABEL}\n            ariaHasPopup\n            ariaExpanded={isDialogOpen}\n            data-testid={getTestId(ComponentDefaultTestId.SPLIT_BUTTON_SECONDARY_BUTTON, id)}\n          >\n            <div className={styles.secondaryButtonIconWrapper}>\n              <DropdownChevronDown aria-hidden=\"true\" />\n            </div>\n          </Button>\n        </Dialog>\n      </div>\n    </div>\n  );\n};\n\nSplitButton.defaultProps = {\n  ...Button.defaultProps,\n  onSecondaryDialogDidShow: NOOP,\n  onSecondaryDialogDidHide: NOOP,\n  zIndex: null,\n  secondaryDialogClassName: \"\",\n  secondaryDialogPosition: SplitButtonSecondaryContentPosition.BOTTOM_START,\n  dialogPaddingSize: DialogContentContainer.sizes.MEDIUM\n};\n\ninterface SplitButtonStaticProps {\n  secondaryPositions: typeof SplitButtonSecondaryContentPosition;\n  secondaryDialogPositions: typeof SplitButtonSecondaryContentPosition;\n  sizes: typeof Button.sizes;\n  colors: typeof Button.colors;\n  kinds: typeof Button.kinds;\n  inputTags: typeof Button.inputTags;\n  dialogPaddingSizes: typeof DialogContentContainer.sizes;\n}\n\nexport default withStaticProps<SplitButtonProps, SplitButtonStaticProps>(SplitButton, {\n  secondaryPositions: SplitButtonSecondaryContentPosition,\n  secondaryDialogPositions: SplitButtonSecondaryContentPosition,\n  sizes: Button.sizes,\n  colors: Button.colors,\n  kinds: Button.kinds,\n  inputTags: Button.inputTags,\n  dialogPaddingSizes: DialogContentContainer.sizes\n});\n"],"names":["SplitButton","_a","secondaryDialogContent","_a$onSecondaryDialogD","onSecondaryDialogDidShow","NOOP","_a$onSecondaryDialogD2","onSecondaryDialogDidHide","shouldCloseOnClickInsideDialog","_a$zIndex","zIndex","secondaryDialogClassName","_a$secondaryDialogPos","secondaryDialogPosition","dialogContainerSelector","_a$dialogPaddingSize","dialogPaddingSize","disabled","loading","kind","color","className","leftIcon","rightIcon","onClick","children","marginLeft","marginRight","active","id","dataTestId","buttonProps","__rest","_useState","useState","_useState2","_slicedToArray","isDialogOpen","setDialogOpen","_useState3","_useState4","isHovered","setIsHover","_useState5","_useState6","isActive","setIsActive","ref","useRef","secondaryButtonRef","setHovered","useCallback","setNotHovered","shouldSetActive","e","isInsideClass","target","SECONDARY_BUTTON_WRAPPER_CLASSNAME","setActive","setNotActive","setActiveOnEnter","showDialog","hideDialog","_","eventName","current","focus","useEventListener","callback","useKeyEvent","keys","ENTER_KEYS","classNames","useMemo","cx","styles","button","getStyle","camelCase","_defineProperty","mainActive","splitContentOpen","hovered","dialogShowTrigger","DEFAULT_DIALOG_SHOW_TRIGGER","dialogHideTrigger","concat","_toConsumableArray","DEFAULT_DIALOG_HIDE_TRIGGER","HideShowEvent","CONTENT_CLICK","actionsContent","content","React","createElement","DialogContentContainer","type","types","POPOVER","size","animationEdgePosition","getTestId","ComponentDefaultTestId","SPLIT_BUTTON","ComponentVibeId","Button","Object","assign","preventClickAnimation","rightFlat","mainButton","onFocus","onBlur","SPLIT_BUTTON_PRIMARY_BUTTON","secondaryButtonWrapper","Dialog","wrapperClassName","position","containerSelector","startingEdge","animationType","AnimationType","EXPAND","moveBy","DIALOG_MOVE_BY","onDialogDidShow","onDialogDidHide","showTrigger","hideTrigger","leftFlat","noSidePadding","secondaryButton","ariaLabel","SECONDARY_BUTTON_ARIA_LABEL","ariaHasPopup","ariaExpanded","SPLIT_BUTTON_SECONDARY_BUTTON","secondaryButtonIconWrapper","DropdownChevronDown","defaultProps","SplitButtonSecondaryContentPosition","BOTTOM_START","sizes","MEDIUM","withStaticProps","secondaryPositions","secondaryDialogPositions","colors","kinds","inputTags","dialogPaddingSizes"],"mappings":"44CA0EA,IAAMA,EAAc,SAACC,GAAA,IACnBC,EA2BiBD,EA3BjBC,uBAAsBC,EA2BLF,EA1BjBG,yBAAAA,OAA2BC,IAAHF,EAAGE,EAAIF,EAAAG,EA0BdL,EAzBjBM,yBAAAA,OAA2BF,IAAHC,EAAGD,EAAIC,EAC/BE,EAwBiBP,EAxBjBO,+BAA8BC,EAwBbR,EAvBjBS,OAAAA,OAAS,IAAHD,EAAG,KAAIA,EACbE,EAsBiBV,EAtBjBU,yBAAwBC,EAsBPX,EArBjBY,wBAAAA,OAA0B,IAAHD,EAAG,eAAcA,EACxCE,EAoBiBb,EApBjBa,wBAAuBC,EAoBNd,EAnBjBe,kBAAAA,OAAoB,IAAHD,EAAG,SAAQA,EAC5BE,EAkBiBhB,EAlBjBgB,SAIAC,EAciBjB,EAdjBiB,QACAC,EAaiBlB,EAbjBkB,KACAC,EAYiBnB,EAZjBmB,MACAC,EAWiBpB,EAXjBoB,UACAC,EAUiBrB,EAVjBqB,SACAC,EASiBtB,EATjBsB,UACAC,GAQiBvB,EARjBuB,QACAC,GAOiBxB,EAPjBwB,SACAC,GAMiBzB,EANjByB,WACAC,GAKiB1B,EALjB0B,YACAC,GAIiB3B,EAJjB2B,OACAC,GAGiB5B,EAHjB4B,GACeC,GAEE7B,EAFjB,eACG8B,GAAWC,EAAA/B,EA3BK,4XA8BnBgC,GAAsCC,GAAS,GAAMC,GAAAC,EAAAH,GAAA,GAA9CI,GAAYF,GAAA,GAAEG,GAAaH,GAAA,GAClCI,GAAgCL,GAAS,GAAMM,GAAAJ,EAAAG,GAAA,GAAxCE,GAASD,GAAA,GAAEE,GAAUF,GAAA,GAC5BG,GAAgCT,GAAS,GAAMU,GAAAR,EAAAO,GAAA,GAAxCE,GAAQD,GAAA,GAAEE,GAAWF,GAAA,GAGtBG,GAAMC,EAAO,MACbC,GAAqBD,EAAO,MAG5BE,GAAaC,GAAY,WAAA,OAAMT,IAAW,KAAO,CAACA,KAClDU,GAAgBD,GAAY,WAAA,OAAMT,IAAW,KAAQ,CAACA,KAEtDW,GAAkBF,GACtB,SAACG,GACC,OAAIrC,IACIsC,EAAcD,EAAEE,OAAuBC,EACjD,GACA,CAACxC,IAGGyC,GAAYP,GAChB,SAACG,GACMD,GAAgBC,IACrBR,IAAY,EACd,GACA,CAACA,GAAaO,KAEVM,GAAeR,GAAY,WAAA,OAAML,IAAY,KAAQ,CAACA,KACtDc,GAAmBT,GACvB,SAACG,GACMD,GAAgBC,IACrBR,IAAY,EACd,GACA,CAACA,GAAaO,KAGVQ,GAAaV,GAAY,WAC7Bb,IAAc,GACdlC,GACF,GAAG,CAACkC,GAAelC,IAEb0D,GAAaX,GACjB,SAACY,EAAgBC,GACf1B,IAAc,GACd/B,IACkB,WAAdyD,GACFf,GAAmBgB,QAAQC,OAE/B,GACA,CAAC5B,GAAe/B,IAMlB4D,EAAiB,CAAEH,UAAW,aAAcI,SAAUlB,GAAYH,IAAAA,KAClEoB,EAAiB,CAAEH,UAAW,aAAcI,SAAUhB,GAAeL,IAAAA,KAErEoB,EAAiB,CAAEH,UAAW,YAAaI,SAAUV,GAAWX,IAAAA,KAChEoB,EAAiB,CAAEH,UAAW,UAAWI,SAAUT,GAAcZ,IAAAA,KAGjEoB,EAAiB,CAAEH,UAAW,gBAAiBI,SAAUT,GAAcZ,IAAAA,KAGvEsB,EAAY,CAAEC,KAAMC,EAAYxB,IAAAA,GAAKqB,SAAUR,KAE/C,IAAMY,GAAaC,GACjB,WAAA,OACEC,EACEC,EAAOC,OACPC,EAASF,EAAQG,EAAU,QAAU3D,IACrC0D,EAASF,EAAQG,EAAU,SAAW1D,IAAO2D,EAAAA,EAAAA,EAAAA,EAAAA,EAE1CJ,CAAAA,EAAAA,EAAOK,WAAapD,IACpB+C,EAAO/C,OAASiB,IAChB8B,EAAOM,iBAAmB5C,IAC1BsC,EAAOO,QAAUzC,IACjBkC,EAAO1D,SAAWA,GAErBI,EACD,GACH,CAACA,EAAWF,EAAMC,EAAOQ,GAAQiB,GAAUR,GAAcI,GAAWxB,IAGhEkE,GAAoBV,GAAQ,WAAA,OAAOxD,EAAW,GAAKmE,CAA2B,GAAG,CAACnE,IAElFoE,GAAoBZ,GAAQ,WAChC,OAAIjE,EAAgC,GAAA8E,OAAAC,EAAWC,GAA2B,CAAEC,EAAcC,gBACnFF,CACT,GAAG,CAAChF,IAEEmF,GAAiBxC,GAAY,WACjC,IAAMyC,EAA4C,mBAA3B1F,EAAwCA,IAA2BA,EAC1F,OACE2F,EAACC,cAAAC,GAAuBC,KAAMD,EAAuBE,MAAMC,QAASC,KAAMnF,GACvE4E,EAGP,GAAG,CAAC1F,EAAwBc,IAEtBoF,GAAwB3B,GAAQ,WACpC,MAAgC,WAA5B5D,EACK,GAEuB,iBAA5BA,EACK,SAGF,KACT,GAAG,CAACA,IAEJ,OACEgF,EACEC,cAAA,MAAA,CAAAzE,UAAWmD,GACXzB,IAAKA,GACLlB,GAAIA,GACS,cAAAC,IAAcuE,EAAUC,EAAuBC,aAAc1E,IAAG,YAClE2E,EAAgBD,cAE3BV,EAAAC,cAACW,EAAMC,OAAAC,OAAA,CAAA,EAEA5E,GAEL,CAAA6E,uBACA,EAAAtF,SAAUA,EACVC,UAAWA,EACXsF,WAAS,EACTzF,MAAOA,EACPD,KAAMA,EACNS,OAAQA,GACRJ,QAASA,GACTH,UAAWsD,EAAOmC,WAClBpF,WAAYA,GACZqF,QAAS7D,GACT8D,OAAQ5D,GACRnC,SAAUA,EACVC,QAASA,gBACImF,EAAUC,EAAuBW,4BAA6BpF,MAE1EJ,IAEHoE,EAAAC,cAAA,MAAA,CAAKzE,UAAWsD,EAAOuC,wBACrBrB,EAACC,cAAAqB,GACCC,iBAAkBzG,EAClBD,OAAQA,EACRkF,QAASD,GACT0B,SAAUxG,EACVyG,kBAAmBxG,EACnByG,aAAcnB,GACdoB,cAAeC,EAAcC,OAC7BC,OAAQC,EACRC,gBAAiBhE,GACjBiE,gBAAiBhE,GACjBiE,YAAa5C,GACb6C,YAAa3C,IAEbQ,EAAAC,cAACW,EAAMC,OAAAC,OAAA,CAAA,EACD5E,GAAW,CACfgB,IAAKE,GACL2D,uBAAqB,EACrBqB,UAAQ,EACRC,eACA,EAAA9G,MAAOA,EACPD,KAAMA,EACNE,UAAWsD,EAAOwD,gBAClBvG,OAAQS,GACRV,YAAaA,GACboF,QAAS7D,GACT8D,OAAQ5D,GACRnC,SAAUA,EACVmH,UAAWC,EACXC,cACA,EAAAC,aAAclG,GAAY,cACbgE,EAAUC,EAAuBkC,8BAA+B3G,MAE7EgE,EAAAC,cAAA,MAAA,CAAKzE,UAAWsD,EAAO8D,4BACrB5C,EAACC,cAAA4C,EAAgC,CAAA,cAAA,aAO/C,EAEA1I,EAAY2I,aAAYjC,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EACnBF,EAAOkC,cACV,CAAAvI,yBAA0BC,EAC1BE,yBAA0BF,EAC1BK,OAAQ,KACRC,yBAA0B,GAC1BE,wBAAyB+H,EAAoCC,aAC7D7H,kBAAmB+E,EAAuB+C,MAAMC,SAalD,IAAeC,EAAAA,EAA0DhJ,EAAa,CACpFiJ,mBAAoBL,EACpBM,yBAA0BN,EAC1BE,MAAOrC,EAAOqC,MACdK,OAAQ1C,EAAO0C,OACfC,MAAO3C,EAAO2C,MACdC,UAAW5C,EAAO4C,UAClBC,mBAAoBvD,EAAuB+C"}