{"version":3,"file":"Label.js","sources":["../../../../src/components/Label/Label.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport Text from \"../Text/Text\";\nimport Leg from \"./Leg\";\nimport { LabelAllowedColor as LabelColorEnum, LabelKind as LabelKindEnum, mapSizesToTextSize } from \"./LabelConstants\";\nimport { LabelColor, LabelKind, ContentColor } from \"./Label.types\";\nimport { contentColors } from \"../../utils/colors-vars-map\";\nimport { VibeComponentProps, withStaticProps } from \"../../types\";\nimport useClickableProps from \"../../hooks/useClickableProps/useClickableProps\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport styles from \"./Label.module.scss\";\nimport LabelCelebrationAnimation from \"./LabelCelebrationAnimation\";\nimport { LabelSizes } from \"./Label.types\";\n\nexport interface LabelProps extends VibeComponentProps {\n  /**\n   * Class name applied to the inner text wrapper.\n   */\n  labelClassName?: string;\n  /**\n   * The visual style of the label.\n   */\n  kind?: LabelKind;\n  /**\n   * The background color of the label.\n   */\n  color?: LabelColor;\n  /**\n   * The text content of the label.\n   */\n  text?: string;\n  /**\n   * If true, includes a leg (decorative extension).\n   */\n  isLegIncluded?: boolean;\n  /**\n   * Callback fired when the label is clicked.\n   */\n  onClick?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n  /**\n   * If true, triggers a celebration animation.\n   */\n  celebrationAnimation?: boolean;\n  /**\n   * The size of the label.\n   */\n  size?: LabelSizes;\n}\n\nconst Label = forwardRef<HTMLElement, LabelProps>(\n  (\n    {\n      className,\n      labelClassName,\n      kind = \"fill\",\n      color = \"primary\",\n      text = \"\",\n      isLegIncluded = false,\n      id,\n      \"data-testid\": dataTestId,\n      onClick,\n      celebrationAnimation,\n      size = \"medium\"\n    }: LabelProps,\n    ref\n  ) => {\n    const labelRef = useRef<HTMLSpanElement>(null);\n    const mergedRef = useMergeRef(ref, labelRef);\n    const [isCelebrationAnimation, setIsCelebrationAnimation] = useState(celebrationAnimation);\n\n    const isClickable = Boolean(onClick);\n\n    const classNames = useMemo(\n      () =>\n        cx(\n          styles.label,\n          getStyle(styles, camelCase(\"kind\" + \"-\" + kind)),\n          getStyle(styles, camelCase(\"color\" + \"-\" + color)),\n          {\n            [styles.withLeg]: isLegIncluded,\n            [styles.clickable]: isClickable,\n            [styles.small]: size === \"small\"\n          },\n          labelClassName\n        ),\n      [kind, color, isLegIncluded, labelClassName, isClickable, size]\n    );\n\n    const backgroundColorStyle = useMemo(() => {\n      if (contentColors.includes(color as ContentColor)) {\n        return { backgroundColor: `var(--color-${color})` };\n      }\n    }, [color]);\n\n    const onClickCallback = useCallback(\n      (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        if (onClick) {\n          event.preventDefault();\n          onClick(event);\n        }\n      },\n      [onClick]\n    );\n\n    const clickableProps = useClickableProps(\n      {\n        onClick: onClickCallback,\n        id,\n        ariaHidden: false,\n        ariaHasPopup: false,\n        ariaExpanded: false\n      },\n      labelRef\n    );\n\n    useEffect(() => {\n      setIsCelebrationAnimation(celebrationAnimation);\n    }, [celebrationAnimation]);\n\n    const label = useMemo(() => {\n      return (\n        <span\n          {...(isClickable && clickableProps)}\n          className={cx({ [styles.clickableWrapper]: isClickable }, className)}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.LABEL, id)}\n          ref={mergedRef}\n        >\n          <Text\n            style={backgroundColorStyle}\n            element=\"span\"\n            type={mapSizesToTextSize[size]}\n            className={classNames}\n            color=\"onInverted\"\n            data-celebration-text={isCelebrationAnimation}\n          >\n            <Text\n              element=\"span\"\n              type={mapSizesToTextSize[size]}\n              color=\"inherit\"\n              className={cx({ [styles.smallText]: size === \"small\" })}\n            >\n              {text}\n            </Text>\n            <span className={cx(styles.legWrapper)}>{isLegIncluded ? <Leg /> : null}</span>\n          </Text>\n        </span>\n      );\n    }, [\n      isClickable,\n      clickableProps,\n      className,\n      dataTestId,\n      id,\n      mergedRef,\n      classNames,\n      isCelebrationAnimation,\n      text,\n      isLegIncluded,\n      size,\n      backgroundColorStyle\n    ]);\n\n    // Celebration animation is applied only for line kind\n    if (isCelebrationAnimation && kind === \"line\") {\n      return (\n        <LabelCelebrationAnimation onAnimationEnd={() => setIsCelebrationAnimation(false)}>\n          {label}\n        </LabelCelebrationAnimation>\n      );\n    }\n\n    return label;\n  }\n);\n\ninterface LabelStaticProps {\n  colors: typeof LabelColorEnum;\n  kinds: typeof LabelKindEnum;\n}\n\nexport default withStaticProps<LabelProps, LabelStaticProps>(Label, {\n  colors: LabelColorEnum,\n  kinds: LabelKindEnum\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","labelClassName","_ref$kind","kind","_ref$color","color","_ref$text","text","_ref$isLegIncluded","isLegIncluded","id","dataTestId","onClick","celebrationAnimation","_ref$size","size","labelRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isCelebrationAnimation","setIsCelebrationAnimation","isClickable","classNames","useMemo","cx","styles","label","getStyle","camelCase","_defineProperty","withLeg","clickable","small","backgroundColorStyle","contentColors","includes","backgroundColor","concat","onClickCallback","useCallback","event","preventDefault","clickableProps","useClickableProps","ariaHidden","ariaHasPopup","ariaExpanded","useEffect","React","createElement","Object","assign","clickableWrapper","getTestId","ComponentDefaultTestId","LABEL","Text","style","element","type","mapSizesToTextSize","smallText","legWrapper","Leg","LabelCelebrationAnimation","onAnimationEnd","colors","LabelColorEnum","kinds","LabelKindEnum"],"mappings":"23BAoDA,IAmIeA,EAAAA,EAnIDC,GACZ,SAAAC,EAcEC,GACE,IAbAC,EAASF,EAATE,UACAC,EAAcH,EAAdG,eAAcC,EAAAJ,EACdK,KAAAA,OAAO,IAAHD,EAAG,OAAMA,EAAAE,EAAAN,EACbO,MAAAA,OAAQ,IAAHD,EAAG,UAASA,EAAAE,EAAAR,EACjBS,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EAAAE,EAAAV,EACTW,cAAAA,OAAgB,IAAHD,GAAQA,EACrBE,EAAEZ,EAAFY,GACeC,EAAUb,EAAzB,eACAc,EAAOd,EAAPc,QACAC,EAAoBf,EAApBe,qBAAoBC,EAAAhB,EACpBiB,KAAAA,OAAO,IAAHD,EAAG,SAAQA,EAIXE,EAAWC,EAAwB,MACnCC,EAAYC,EAAYpB,EAAKiB,GACnCI,EAA4DC,EAASR,GAAqBS,EAAAC,EAAAH,EAAA,GAAnFI,EAAsBF,EAAA,GAAEG,EAAyBH,EAAA,GAElDI,IAAsBd,EAEtBe,EAAaC,GACjB,WAAA,OACEC,EACEC,EAAOC,MACPC,EAASF,EAAQG,EAAU,QAAe9B,IAC1C6B,EAASF,EAAQG,EAAU,SAAgB5B,IAAO6B,EAAAA,EAAAA,EAAA,CAAA,EAE/CJ,EAAOK,QAAU1B,GACjBqB,EAAOM,UAAYV,GACnBI,EAAOO,MAAiB,UAATtB,GAElBd,EACD,GACH,CAACE,EAAME,EAAOI,EAAeR,EAAgByB,EAAaX,IAGtDuB,EAAuBV,GAAQ,WACnC,GAAIW,EAAcC,SAASnC,GACzB,MAAO,CAAEoC,gBAAe,eAAAC,OAAiBrC,EAAK,KAElD,GAAG,CAACA,IAEEsC,EAAkBC,GACtB,SAACC,GACKjC,IACFiC,EAAMC,iBACNlC,EAAQiC,GAEZ,GACA,CAACjC,IAGGmC,EAAiBC,EACrB,CACEpC,QAAS+B,EACTjC,GAAAA,EACAuC,YAAY,EACZC,cAAc,EACdC,cAAc,GAEhBnC,GAGFoC,GAAU,WACR3B,EAA0BZ,EAC5B,GAAG,CAACA,IAEJ,IAAMkB,EAAQH,GAAQ,WACpB,OACEyB,EACMC,cAAA,OAAAC,OAAAC,OAAA,CAAA,EAAC9B,GAAeqB,EAAe,CACnC/C,UAAW6B,EAAEK,EAAIJ,CAAAA,EAAAA,EAAO2B,iBAAmB/B,GAAe1B,GAC7C,cAAAW,GAAc+C,EAAUC,EAAuBC,MAAOlD,GACnEX,IAAKmB,IAELmC,EAACC,cAAAO,EACC,CAAAC,MAAOxB,EACPyB,QAAQ,OACRC,KAAMC,EAAmBlD,GACzBf,UAAW2B,EACXtB,MAAM,aAAY,wBACKmB,GAEvB6B,EAAAC,cAACO,EAAI,CACHE,QAAQ,OACRC,KAAMC,EAAmBlD,GACzBV,MAAM,UACNL,UAAW6B,EAAEK,EAAIJ,CAAAA,EAAAA,EAAOoC,UAAqB,UAATnD,KAEnCR,GAEH8C,EAAMC,cAAA,OAAA,CAAAtD,UAAW6B,EAAGC,EAAOqC,aAAc1D,EAAgB4C,EAACC,cAAAc,EAAM,MAAG,OAI1E,GAAE,CACD1C,EACAqB,EACA/C,EACAW,EACAD,EACAQ,EACAS,EACAH,EACAjB,EACAE,EACAM,EACAuB,IAIF,OAAId,GAAmC,SAATrB,EAE1BkD,EAACC,cAAAe,EAA0B,CAAAC,eAAgB,WAAA,OAAM7C,GAA0B,EAAM,GAC9EM,GAKAA,CACT,IAQkE,CAClEwC,OAAQC,EACRC,MAAOC"}