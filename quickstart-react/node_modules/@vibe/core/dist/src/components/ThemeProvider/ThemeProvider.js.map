{"version":3,"file":"ThemeProvider.js","sources":["../../../../src/components/ThemeProvider/ThemeProvider.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { ReactElement, useEffect, useMemo, useState } from \"react\";\nimport { SystemTheme as SystemThemeEnum, Theme, ThemeColor as ThemeColorEnum } from \"./ThemeProviderConstants\";\nimport { SystemTheme } from \"./ThemeProvider.types\";\nimport {\n  addSystemThemeClassNameToBody,\n  generateRandomAlphaString,\n  generateThemeCssOverride,\n  isAnySystemThemeClassNameOnBody,\n  removeSystemThemeClassNameFromBody,\n  shouldGenerateTheme\n} from \"./ThemeProviderUtils\";\nimport useIsomorphicLayoutEffect from \"../../hooks/ssr/useIsomorphicLayoutEffect\";\nimport { withStaticProps } from \"../../types\";\n\nexport interface ThemeProviderProps {\n  /**\n   * The theme configuration to apply. It consists of a `name` (a unique CSS class name added to the children)\n   * and an object of color overrides for each system theme.\n   */\n  themeConfig?: Theme;\n  /**\n   * The children to be rendered with the applied theme.\n   */\n  children: ReactElement;\n  /**\n   * A string added to the theme name selector to make it more specific, in case `themeConfig.name`\n   * collides with another class name.\n   */\n  themeClassSpecifier?: string;\n  /**\n   * The system theme to apply to the `body` element on mount,\n   * if there is no system theme class name on the body already.\n   */\n  systemTheme?: SystemTheme;\n  /**\n   * Class name applied to the wrapping `div`.\n   */\n  className?: string;\n}\n\nconst ThemeProvider = ({\n  themeConfig,\n  children,\n  themeClassSpecifier: customThemeClassSpecifier,\n  systemTheme,\n  className\n}: ThemeProviderProps) => {\n  const [stylesLoaded, setStylesLoaded] = useState(false);\n  const themeClassSpecifier = useMemo(\n    () => customThemeClassSpecifier || generateRandomAlphaString(),\n    [customThemeClassSpecifier]\n  );\n\n  // Add the systemTheme class name to the body on mount\n  useIsomorphicLayoutEffect(() => {\n    if (!systemTheme) {\n      return;\n    }\n\n    if (isAnySystemThemeClassNameOnBody()) {\n      // If there is already a systemTheme class name on the body, we don't want to override it\n      return;\n    }\n\n    addSystemThemeClassNameToBody(systemTheme);\n\n    return () => {\n      // Cleanup the systemTheme class name from the body on ThemeProvider unmount\n      removeSystemThemeClassNameFromBody(systemTheme);\n    };\n  }, [systemTheme]);\n\n  useEffect(() => {\n    if (!shouldGenerateTheme(themeConfig)) {\n      return;\n    }\n    if (document.getElementById(themeConfig.name)) {\n      setStylesLoaded(true);\n      return;\n    }\n\n    const styleElement = document.createElement(\"style\");\n    styleElement.type = \"text/css\";\n    styleElement.id = themeConfig.name;\n    const themeCssOverride = generateThemeCssOverride(themeConfig, themeClassSpecifier);\n\n    try {\n      styleElement.appendChild(document.createTextNode(themeCssOverride));\n      document.head.appendChild(styleElement);\n      setStylesLoaded(true);\n    } catch (error) {\n      console.error(\"vibe ThemeProvider: error inserting theme-generated css - \", error);\n    }\n\n    return () => {\n      document.head.removeChild(styleElement);\n    };\n  }, [themeClassSpecifier, themeConfig]);\n\n  if (!stylesLoaded && shouldGenerateTheme(themeConfig)) {\n    // Waiting for styles to load before children render\n    return null;\n  }\n\n  // Pass the theme name as a class to the div wrapping children - to scope the effect of the theme\n  return <div className={cx(themeConfig?.name, themeClassSpecifier, className)}>{children}</div>;\n};\n\ninterface ThemeProviderStaticProps {\n  systemThemes: typeof SystemThemeEnum;\n  colors: typeof ThemeColorEnum;\n}\n\nexport default withStaticProps<ThemeProviderProps, ThemeProviderStaticProps>(ThemeProvider, {\n  systemThemes: SystemThemeEnum,\n  colors: ThemeColorEnum\n});\n"],"names":["withStaticProps","_ref","themeConfig","children","customThemeClassSpecifier","themeClassSpecifier","systemTheme","className","_useState","useState","_useState2","_slicedToArray","stylesLoaded","setStylesLoaded","useMemo","generateRandomAlphaString","useIsomorphicLayoutEffect","isAnySystemThemeClassNameOnBody","addSystemThemeClassNameToBody","removeSystemThemeClassNameFromBody","useEffect","shouldGenerateTheme","document","getElementById","name","styleElement","createElement","type","id","themeCssOverride","generateThemeCssOverride","appendChild","createTextNode","head","error","console","removeChild","React","cx","systemThemes","SystemThemeEnum","colors","ThemeColorEnum"],"mappings":"koBAyCA,IAyEeA,EAAAA,GAzEO,SAAHC,GAMM,IALvBC,EAAWD,EAAXC,YACAC,EAAQF,EAARE,SACqBC,EAAyBH,EAA9CI,oBACAC,EAAWL,EAAXK,YACAC,EAASN,EAATM,UAEAC,EAAwCC,GAAS,GAAMC,EAAAC,EAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BL,EAAsBS,GAC1B,WAAA,OAAMV,GAA6BW,MACnC,CAACX,IAiDH,OA7CAY,GAA0B,WACxB,GAAKV,IAIDW,IAOJ,OAFAC,EAA8BZ,GAEvB,WAELa,EAAmCb,GAEvC,GAAG,CAACA,IAEJc,GAAU,WACR,GAAKC,EAAoBnB,GAAzB,CAGA,IAAIoB,SAASC,eAAerB,EAAYsB,MAAxC,CAKA,IAAMC,EAAeH,SAASI,cAAc,SAC5CD,EAAaE,KAAO,WACpBF,EAAaG,GAAK1B,EAAYsB,KAC9B,IAAMK,EAAmBC,EAAyB5B,EAAaG,GAE/D,IACEoB,EAAaM,YAAYT,SAASU,eAAeH,IACjDP,SAASW,KAAKF,YAAYN,GAC1BZ,GAAgB,EACjB,CAAC,MAAOqB,GACPC,QAAQD,MAAM,6DAA8DA,EAC7E,CAED,OAAO,WACLZ,SAASW,KAAKG,YAAYX,GAhB3B,CAFCZ,GAAgB,EAFjB,CAsBH,GAAG,CAACR,EAAqBH,KAEpBU,GAAgBS,EAAoBnB,GAEhC,KAIFmC,EAAAX,cAAA,MAAA,CAAKnB,UAAW+B,EAAGpC,aAAA,EAAAA,EAAasB,KAAMnB,EAAqBE,IAAaJ,EACjF,GAO4F,CAC1FoC,aAAcC,EACdC,OAAQC"}