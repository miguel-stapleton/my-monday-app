/// <reference types="react" />
import { ModalFooterActionProps } from "../ModalFooterBase/ModalFooterBase.types";
export declare function getPropsForButton(button?: ModalFooterActionProps, buttonClassName?: string): {
    className: string;
    tooltipProps: {
        referenceWrapperClassName: string;
        content?: import("../../../..").ElementContent;
        style?: import("react").CSSProperties;
        arrowClassName?: string;
        moveBy?: import("../../../../types/MoveBy").MoveBy;
        theme?: import("../../..").TooltipTheme;
        getContainer?: () => HTMLElement;
        hideDelay?: number;
        showDelay?: number;
        disableDialogSlide?: boolean;
        animationType?: import("../../..").DialogAnimationType;
        withoutDialog?: boolean;
        containerSelector?: string;
        immediateShowDelay?: number;
        tip?: boolean;
        shouldShowOnMount?: boolean;
        hideWhenReferenceHidden?: boolean;
        onTooltipHide?: () => void;
        onTooltipShow?: () => void;
        modifiers?: Partial<import("@popperjs/core").Modifier<unknown, object>>[];
        position?: import("../../..").TooltipPositions;
        showTrigger?: import("../../..").DialogTriggerEvent | import("../../..").DialogTriggerEvent[];
        hideTrigger?: import("../../..").DialogTriggerEvent | import("../../..").DialogTriggerEvent[];
        showOnDialogEnter?: boolean;
        addKeyboardHideShowTriggersByDefault?: boolean;
        open?: boolean;
        zIndex?: number;
        title?: string;
        image?: string;
        icon?: import("../../../..").SubIcon;
        maxWidth?: number;
        dir?: "ltr" | "rtl" | "auto";
        className?: string;
        "data-testid"?: string;
        id?: string;
        forceRenderWithoutChildren?: boolean;
        children?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>[];
    };
    text: string;
    activeButtonClassName?: string;
    onClick?: (event: import("react").MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    onMouseDown?: (event: import("react").MouseEvent<HTMLButtonElement, MouseEvent>) => void;
    blurOnMouseUp?: boolean;
    name?: string;
    color?: import("../../..").ButtonColor;
    type?: import("../../..").ButtonInputType;
    disabled?: boolean;
    rightIcon?: import("../../../..").SubIcon;
    leftIcon?: import("../../../..").SubIcon;
    success?: boolean;
    successIcon?: import("../../../..").SubIcon;
    successText?: string;
    loading?: boolean;
    loaderClassName?: string;
    style?: import("react").CSSProperties;
    active?: boolean;
    id?: string;
    marginRight?: boolean;
    marginLeft?: boolean;
    ariaLabeledBy?: string;
    ariaLabel?: string;
    ariaHasPopup?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog";
    ariaExpanded?: boolean;
    ariaControls?: string;
    "aria-describedby"?: string;
    "aria-hidden"?: boolean | "false" | "true";
    "aria-pressed"?: boolean | "false" | "true" | "mixed";
    onFocus?: (event: import("react").FocusEvent<HTMLButtonElement, Element>) => void;
    onBlur?: (event: import("react").FocusEvent<HTMLButtonElement, Element>) => void;
    rightFlat?: boolean;
    leftFlat?: boolean;
    preventClickAnimation?: boolean;
    noSidePadding?: boolean;
    defaultTextColorOnPrimaryColor?: string;
    "data-testid"?: string;
    insetFocus?: boolean;
    tabIndex?: number;
};
