import { BaseListItemData } from "../../BaseListItem";
import { DropdownGroupOption } from "../Dropdown.types";
declare function useDropdownCombobox<T extends BaseListItemData<Record<string, unknown>>>(options: DropdownGroupOption<T>, autoFocus?: boolean, isMenuOpen?: boolean, closeMenuOnSelect?: boolean, onChange?: (option: T | T[]) => void, onInputChange?: (value: string) => void, onMenuOpen?: () => void, onMenuClose?: () => void, onOptionSelect?: (option: T) => void): {
    isOpen: boolean;
    inputValue: string;
    highlightedIndex: number;
    selectedItem: T;
    getToggleButtonProps: <Options>(options?: import("downshift").UseComboboxGetToggleButtonPropsOptions & Options) => import("downshift").Overwrite<import("downshift").UseComboboxGetToggleButtonPropsReturnValue, Options>;
    getLabelProps: <Options_1>(options?: import("downshift").UseComboboxGetLabelPropsOptions & Options_1) => import("downshift").Overwrite<import("downshift").UseComboboxGetLabelPropsReturnValue, Options_1>;
    getMenuProps: <Options_2>(options?: import("downshift").UseComboboxGetMenuPropsOptions & Options_2, otherOptions?: import("downshift").GetPropsCommonOptions) => import("downshift").Overwrite<import("downshift").UseComboboxGetMenuPropsReturnValue, Options_2>;
    getInputProps: <Options_3>(options?: import("downshift").UseComboboxGetInputPropsOptions & Options_3, otherOptions?: import("downshift").GetPropsCommonOptions) => import("downshift").Overwrite<import("downshift").UseComboboxGetInputPropsReturnValue, Options_3>;
    getItemProps: <Options_4>(options: import("downshift").UseComboboxGetItemPropsOptions<T> & Options_4) => Omit<import("downshift").Overwrite<import("downshift").UseComboboxGetItemPropsReturnValue, Options_4>, "index" | "item">;
    reset: () => void;
    filteredOptions: import("../../BaseList").ListGroup<T>[];
};
export default useDropdownCombobox;
