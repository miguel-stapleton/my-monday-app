import React, { CSSProperties, ReactElement } from "react";
import { VibeComponentProps } from "../../../types";
import { DialogAnimationType, DialogTriggerEvent } from "../Dialog.types";
import * as PopperJS from "@popperjs/core";
export interface DialogContentProps extends VibeComponentProps {
    /**
     * The content inside the dialog.
     */
    children?: ReactElement | ReactElement[];
    /**
     * The placement of the dialog relative to the reference element.
     */
    position?: PopperJS.Placement;
    /**
     * Class name applied to the dialog wrapper.
     */
    wrapperClassName?: string;
    /**
     * If true, the dialog is open.
     */
    isOpen?: boolean;
    /**
     * The starting edge of the dialog.
     */
    startingEdge?: any;
    /**
     * The animation type used for showing/hiding the dialog.
     */
    animationType?: DialogAnimationType;
    /**
     * Callback fired when the Escape key is pressed.
     */
    onEsc?: (event: React.KeyboardEvent) => void;
    /**
     * Callback fired when the mouse enters the dialog.
     */
    onMouseEnter?: (event: React.MouseEvent) => void;
    /**
     * Callback fired when the mouse leaves the dialog.
     */
    onMouseLeave?: (event: React.MouseEvent) => void;
    /**
     * Callback fired when clicking outside the dialog.
     */
    onClickOutside?: (event: React.MouseEvent, hideShowEvent: DialogTriggerEvent) => void;
    /**
     * Callback fired when clicking inside the dialog.
     */
    onClick?: (event: React.MouseEvent) => void;
    /**
     * Delay before showing the dialog.
     */
    showDelay?: number;
    /**
     * Inline styles applied to the dialog.
     */
    styleObject?: CSSProperties;
    /**
     * If true, hides the reference element when the dialog is shown.
     */
    isReferenceHidden?: boolean;
    /**
     * If true, applies tooltip arrow to the dialog.
     */
    hasTooltip?: boolean;
    /**
     * The CSS selector of the container where the dialog should be rendered.
     */
    containerSelector?: string;
    /**
     * If true, disables scrolling in the container when the dialog is open.
     */
    disableContainerScroll?: boolean | string;
    /**
     * Callback fired when the context menu (right-click) event occurs outside the dialog.
     */
    onContextMenu?: (e: React.MouseEvent) => void;
}
declare const DialogContent: React.ForwardRefExoticComponent<DialogContentProps & React.RefAttributes<HTMLElement>>;
export default DialogContent;
